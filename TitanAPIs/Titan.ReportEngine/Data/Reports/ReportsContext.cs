// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Proxies;
using Microsoft.Extensions.Configuration;
using Titan.ReportEngine.Models.Reports;

#nullable disable

namespace Titan.ReportEngine.Data
{
    public partial class ReportsContext : DbContext
    {
        public ReportsContext()
        {
        }

        public ReportsContext(DbContextOptions<ReportsContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ActionSetting> ActionSettings { get; set; }
        public virtual DbSet<FreeAction> FreeActions { get; set; }
        public virtual DbSet<ReportAction> ReportActions { get; set; }
        public virtual DbSet<ReportActionSetting> ReportActionSettings { get; set; }
        public virtual DbSet<ReportConfig> ReportConfigs { get; set; }
        public virtual DbSet<ReportDocument> ReportDocuments { get; set; }
        public virtual DbSet<ReportDocumentHeader> ReportDocumentHeaders { get; set; }
        public virtual DbSet<ReturnAction> ReturnActions { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseLazyLoadingProxies()
                    .UseSqlServer(Startup.Configuration.GetConnectionString("REPORTS"));
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<ActionSetting>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Name })
                    .HasName("PK_ActionSettings");

                entity.ToTable("ActionSetting");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FreeAction>(entity =>
            {
                entity.ToTable("FreeAction");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ReportAction>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.ReportName })
                    .HasName("PK_ReportActionList");

                entity.ToTable("ReportAction");

                entity.Property(e => e.ReportName).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportActionSetting>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.ReportName, e.Name })
                    .HasName("PK_ReportActionSettings");

                entity.ToTable("ReportActionSetting");

                entity.Property(e => e.ReportName).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ReportConfig>(entity =>
            {
                entity.HasKey(e => e.Name)
                    .HasName("PK_ReportSettings");

                entity.ToTable("ReportConfig");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportDocument>(entity =>
            {
                entity.HasKey(e => new { e.ReportDocumentHeaderId, e.Version });

                entity.ToTable("ReportDocument");

                entity.Property(e => e.DateGenerated).HasColumnType("datetime");

                entity.Property(e => e.Report).IsRequired();

                entity.HasOne(d => d.ReportDocumentHeader)
                    .WithMany(p => p.ReportDocuments)
                    .HasForeignKey(d => d.ReportDocumentHeaderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportDocument_ReportDocumentHeader");
            });

            modelBuilder.Entity<ReportDocumentHeader>(entity =>
            {
                entity.ToTable("ReportDocumentHeader");

                entity.Property(e => e.DateFirstGenerated).HasColumnType("datetime");

                entity.Property(e => e.DateLastGenerated).HasColumnType("datetime");

                entity.Property(e => e.LastGeneratedBy).HasMaxLength(50);

                entity.Property(e => e.ReportId).HasMaxLength(50);

                entity.Property(e => e.ReportName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ReturnAction>(entity =>
            {
                entity.ToTable("ReturnAction");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
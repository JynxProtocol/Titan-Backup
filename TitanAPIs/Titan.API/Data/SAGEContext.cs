// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Titan.API.Models;

#nullable disable

namespace Titan.API
{
    public partial class SAGEContext : DbContext
    {
        public SAGEContext()
        {
        }

        public SAGEContext(DbContextOptions<SAGEContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Additional_CAU_Assembly> Additional_CAU_Assemblies { get; set; }
        public virtual DbSet<AllocationBalance> AllocationBalances { get; set; }
        public virtual DbSet<AlternativeItem> AlternativeItems { get; set; }
        public virtual DbSet<AnalysisCode> AnalysisCodes { get; set; }
        public virtual DbSet<AnalysisCode1> AnalysisCodes1 { get; set; }
        public virtual DbSet<AnalysisCodeMapping> AnalysisCodeMappings { get; set; }
        public virtual DbSet<AnalysisCodeValue> AnalysisCodeValues { get; set; }
        public virtual DbSet<AuditTrailView> AuditTrailViews { get; set; }
        public virtual DbSet<AuditTrailViewOpeningBalance> AuditTrailViewOpeningBalances { get; set; }
        public virtual DbSet<AuthorisationStatus> AuthorisationStatuses { get; set; }
        public virtual DbSet<Authoriser> Authorisers { get; set; }
        public virtual DbSet<AuthoriserAlternativeVw> AuthoriserAlternativeVws { get; set; }
        public virtual DbSet<AuthoriserType> AuthoriserTypes { get; set; }
        public virtual DbSet<BLAmountOrPercentage> BLAmountOrPercentages { get; set; }
        public virtual DbSet<BLBill> BLBills { get; set; }
        public virtual DbSet<BLBillDeliveryAddress> BLBillDeliveryAddresses { get; set; }
        public virtual DbSet<BLBillEvent> BLBillEvents { get; set; }
        public virtual DbSet<BLBillHeaderStatus> BLBillHeaderStatuses { get; set; }
        public virtual DbSet<BLBillHeaderStatusType> BLBillHeaderStatusTypes { get; set; }
        public virtual DbSet<BLBillLine> BLBillLines { get; set; }
        public virtual DbSet<BLBillLineInvoiceCreditLine> BLBillLineInvoiceCreditLines { get; set; }
        public virtual DbSet<BLBillLinePosting> BLBillLinePostings { get; set; }
        public virtual DbSet<BLBillLineType> BLBillLineTypes { get; set; }
        public virtual DbSet<BLBillTemplate> BLBillTemplates { get; set; }
        public virtual DbSet<BLBillTemplateClause> BLBillTemplateClauses { get; set; }
        public virtual DbSet<BLBilledTransaction> BLBilledTransactions { get; set; }
        public virtual DbSet<BLClause> BLClauses { get; set; }
        public virtual DbSet<BLClauseAttribute> BLClauseAttributes { get; set; }
        public virtual DbSet<BLClauseEvent> BLClauseEvents { get; set; }
        public virtual DbSet<BLContract> BLContracts { get; set; }
        public virtual DbSet<BLDetailOrSummaryType> BLDetailOrSummaryTypes { get; set; }
        public virtual DbSet<BLDiscountOrSurcharge> BLDiscountOrSurcharges { get; set; }
        public virtual DbSet<BLNextDraftDocumentNo> BLNextDraftDocumentNos { get; set; }
        public virtual DbSet<BOM> BOMs { get; set; }
        public virtual DbSet<BOMAllocBalance> BOMAllocBalances { get; set; }
        public virtual DbSet<BOMAllocComponent> BOMAllocComponents { get; set; }
        public virtual DbSet<BOMAllocFinishedItem> BOMAllocFinishedItems { get; set; }
        public virtual DbSet<BOMBuild> BOMBuilds { get; set; }
        public virtual DbSet<BOMBuildComponent> BOMBuildComponents { get; set; }
        public virtual DbSet<BOMBuildFinishedItem> BOMBuildFinishedItems { get; set; }
        public virtual DbSet<BOMCheckedOut> BOMCheckedOuts { get; set; }
        public virtual DbSet<BOMCheckedOutOpComponent> BOMCheckedOutOpComponents { get; set; }
        public virtual DbSet<BOMCostItem> BOMCostItems { get; set; }
        public virtual DbSet<BOMCostItemUnit> BOMCostItemUnits { get; set; }
        public virtual DbSet<BOMCostsBooked> BOMCostsBookeds { get; set; }
        public virtual DbSet<BOMItemType> BOMItemTypes { get; set; }
        public virtual DbSet<BOMLine> BOMLines { get; set; }
        public virtual DbSet<BOMLineCheckedOut> BOMLineCheckedOuts { get; set; }
        public virtual DbSet<BOMLineType> BOMLineTypes { get; set; }
        public virtual DbSet<BOMMakeupStockOption> BOMMakeupStockOptions { get; set; }
        public virtual DbSet<BOMMakeupSubAssOption> BOMMakeupSubAssOptions { get; set; }
        public virtual DbSet<BOMOpComponent> BOMOpComponents { get; set; }
        public virtual DbSet<BOMStatusType> BOMStatusTypes { get; set; }
        public virtual DbSet<BOMUnit> BOMUnits { get; set; }
        public virtual DbSet<BOMVersionsOpComponent> BOMVersionsOpComponents { get; set; }
        public virtual DbSet<BackToBackStatus> BackToBackStatuses { get; set; }
        public virtual DbSet<BalancePeriod> BalancePeriods { get; set; }
        public virtual DbSet<BinItem> BinItems { get; set; }
        public virtual DbSet<BomAllocation> BomAllocations { get; set; }
        public virtual DbSet<BomAllocationConsolidatedComponentView> BomAllocationConsolidatedComponentViews { get; set; }
        public virtual DbSet<BomAllocationFinishedItemView> BomAllocationFinishedItemViews { get; set; }
        public virtual DbSet<BomAllocationStatus> BomAllocationStatuses { get; set; }
        public virtual DbSet<BomAllocationWarehouse> BomAllocationWarehouses { get; set; }
        public virtual DbSet<BomAllocationWopOrderLink> BomAllocationWopOrderLinks { get; set; }
        public virtual DbSet<BomAttachedDocument> BomAttachedDocuments { get; set; }
        public virtual DbSet<BomBuildPackage> BomBuildPackages { get; set; }
        public virtual DbSet<BomBuildPackageType> BomBuildPackageTypes { get; set; }
        public virtual DbSet<BomBuildProduct> BomBuildProducts { get; set; }
        public virtual DbSet<BomBuildSession> BomBuildSessions { get; set; }
        public virtual DbSet<BomBuildSessionStatus> BomBuildSessionStatuses { get; set; }
        public virtual DbSet<BomBuildSessionType> BomBuildSessionTypes { get; set; }
        public virtual DbSet<BomCheckedOutAttachedDocument> BomCheckedOutAttachedDocuments { get; set; }
        public virtual DbSet<BomCheckedOutComponent> BomCheckedOutComponents { get; set; }
        public virtual DbSet<BomCheckedOutDrawing> BomCheckedOutDrawings { get; set; }
        public virtual DbSet<BomCheckedOutHeader> BomCheckedOutHeaders { get; set; }
        public virtual DbSet<BomCheckedOutImage> BomCheckedOutImages { get; set; }
        public virtual DbSet<BomCheckedOutOperation> BomCheckedOutOperations { get; set; }
        public virtual DbSet<BomComponent> BomComponents { get; set; }
        public virtual DbSet<BomComponentLine> BomComponentLines { get; set; }
        public virtual DbSet<BomComponentLineType> BomComponentLineTypes { get; set; }
        public virtual DbSet<BomComponentReference> BomComponentReferences { get; set; }
        public virtual DbSet<BomCost> BomCosts { get; set; }
        public virtual DbSet<BomCostSession> BomCostSessions { get; set; }
        public virtual DbSet<BomCostSessionTotal> BomCostSessionTotals { get; set; }
        public virtual DbSet<BomCostType> BomCostTypes { get; set; }
        public virtual DbSet<BomCustomField> BomCustomFields { get; set; }
        public virtual DbSet<BomDrawing> BomDrawings { get; set; }
        public virtual DbSet<BomDrawing1> BomDrawings1 { get; set; }
        public virtual DbSet<BomFinishedProduct> BomFinishedProducts { get; set; }
        public virtual DbSet<BomGroup> BomGroups { get; set; }
        public virtual DbSet<BomGroupLink> BomGroupLinks { get; set; }
        public virtual DbSet<BomHeader> BomHeaders { get; set; }
        public virtual DbSet<BomHistory> BomHistories { get; set; }
        public virtual DbSet<BomHistoryType> BomHistoryTypes { get; set; }
        public virtual DbSet<BomImage> BomImages { get; set; }
        public virtual DbSet<BomNote> BomNotes { get; set; }
        public virtual DbSet<BomOperation> BomOperations { get; set; }
        public virtual DbSet<BomOperation1> BomOperations1 { get; set; }
        public virtual DbSet<BomOperationComponent> BomOperationComponents { get; set; }
        public virtual DbSet<BomOperationLine> BomOperationLines { get; set; }
        public virtual DbSet<BomOperationLineType> BomOperationLineTypes { get; set; }
        public virtual DbSet<BomOperationResource> BomOperationResources { get; set; }
        public virtual DbSet<BomOperationSubcontractQuantityBreak> BomOperationSubcontractQuantityBreaks { get; set; }
        public virtual DbSet<BomOperationSubcontractSupplier> BomOperationSubcontractSuppliers { get; set; }
        public virtual DbSet<BomReasonForHold> BomReasonForHolds { get; set; }
        public virtual DbSet<BomRecord> BomRecords { get; set; }
        public virtual DbSet<BomRevisionHistory> BomRevisionHistories { get; set; }
        public virtual DbSet<BomSetting> BomSettings { get; set; }
        public virtual DbSet<BomVersionStatus> BomVersionStatuses { get; set; }
        public virtual DbSet<BomVersionsAttachedDocument> BomVersionsAttachedDocuments { get; set; }
        public virtual DbSet<BomVersionsComponent> BomVersionsComponents { get; set; }
        public virtual DbSet<BomVersionsDrawing> BomVersionsDrawings { get; set; }
        public virtual DbSet<BomVersionsHeader> BomVersionsHeaders { get; set; }
        public virtual DbSet<BomVersionsImage> BomVersionsImages { get; set; }
        public virtual DbSet<BomVersionsOperation> BomVersionsOperations { get; set; }
        public virtual DbSet<BuildSessionActualNominalPosting> BuildSessionActualNominalPostings { get; set; }
        public virtual DbSet<CBAccount> CBAccounts { get; set; }
        public virtual DbSet<CBAccountContact> CBAccountContacts { get; set; }
        public virtual DbSet<CBAccountLocationType> CBAccountLocationTypes { get; set; }
        public virtual DbSet<CBAccountMemo> CBAccountMemos { get; set; }
        public virtual DbSet<CBAccountType> CBAccountTypes { get; set; }
        public virtual DbSet<CBBankFeedAccount> CBBankFeedAccounts { get; set; }
        public virtual DbSet<CBBankFeedAccountPosting> CBBankFeedAccountPostings { get; set; }
        public virtual DbSet<CBBankFeedPostingInstruction> CBBankFeedPostingInstructions { get; set; }
        public virtual DbSet<CBBankFeedProcessStatus> CBBankFeedProcessStatuses { get; set; }
        public virtual DbSet<CBBankFeedReconciliationStatus> CBBankFeedReconciliationStatuses { get; set; }
        public virtual DbSet<CBBankFeedTransaction> CBBankFeedTransactions { get; set; }
        public virtual DbSet<CBBankFeedTransactionType> CBBankFeedTransactionTypes { get; set; }
        public virtual DbSet<CBBankLocation> CBBankLocations { get; set; }
        public virtual DbSet<CBBankStatement> CBBankStatements { get; set; }
        public virtual DbSet<CBCloudBankAccount> CBCloudBankAccounts { get; set; }
        public virtual DbSet<CBDirectDebitDocumentType> CBDirectDebitDocumentTypes { get; set; }
        public virtual DbSet<CBDirectDebitTran> CBDirectDebitTrans { get; set; }
        public virtual DbSet<CBDirectDebitTranType> CBDirectDebitTranTypes { get; set; }
        public virtual DbSet<CBDraftBankStatement> CBDraftBankStatements { get; set; }
        public virtual DbSet<CBDraftStatementPostTranLink> CBDraftStatementPostTranLinks { get; set; }
        public virtual DbSet<CBGroupHistCustomerTran> CBGroupHistCustomerTrans { get; set; }
        public virtual DbSet<CBGroupHistSupplierTran> CBGroupHistSupplierTrans { get; set; }
        public virtual DbSet<CBGroupPostedCustomerTran> CBGroupPostedCustomerTrans { get; set; }
        public virtual DbSet<CBGroupPostedSupplierTran> CBGroupPostedSupplierTrans { get; set; }
        public virtual DbSet<CBPaymentCloudProvider> CBPaymentCloudProviders { get; set; }
        public virtual DbSet<CBPaymentCloudProviderBank> CBPaymentCloudProviderBanks { get; set; }
        public virtual DbSet<CBPaymentCloudTran> CBPaymentCloudTrans { get; set; }
        public virtual DbSet<CBPaymentCloudTranStatusType> CBPaymentCloudTranStatusTypes { get; set; }
        public virtual DbSet<CBPaymentCloudTranType> CBPaymentCloudTranTypes { get; set; }
        public virtual DbSet<CBPaymentFrequency> CBPaymentFrequencies { get; set; }
        public virtual DbSet<CBPendAccountTran> CBPendAccountTrans { get; set; }
        public virtual DbSet<CBPostedAccountTran> CBPostedAccountTrans { get; set; }
        public virtual DbSet<CBProjectItemSearchView> CBProjectItemSearchViews { get; set; }
        public virtual DbSet<CBSetting> CBSettings { get; set; }
        public virtual DbSet<CBShortTermCashProjectionAccount> CBShortTermCashProjectionAccounts { get; set; }
        public virtual DbSet<CBShortTermCashProjectionDateType> CBShortTermCashProjectionDateTypes { get; set; }
        public virtual DbSet<CBShortTermCashProjectionHeader> CBShortTermCashProjectionHeaders { get; set; }
        public virtual DbSet<CBShortTermCashProjectionTran> CBShortTermCashProjectionTrans { get; set; }
        public virtual DbSet<CBTranType> CBTranTypes { get; set; }
        public virtual DbSet<COMPANY> COMPANies { get; set; }
        public virtual DbSet<CPAllocationTran> CPAllocationTrans { get; set; }
        public virtual DbSet<CPCardProcessorTranType> CPCardProcessorTranTypes { get; set; }
        public virtual DbSet<CPEntityCPTran> CPEntityCPTrans { get; set; }
        public virtual DbSet<CPLinkedDescriptor> CPLinkedDescriptors { get; set; }
        public virtual DbSet<CPTran> CPTrans { get; set; }
        public virtual DbSet<CRMConfigurationType> CRMConfigurationTypes { get; set; }
        public virtual DbSet<CRMIntegrationSetting> CRMIntegrationSettings { get; set; }
        public virtual DbSet<CRMIntegrationSyncDateType> CRMIntegrationSyncDateTypes { get; set; }
        public virtual DbSet<CRMIntegrationType> CRMIntegrationTypes { get; set; }
        public virtual DbSet<CSNinja_SLContacts_vw> CSNinja_SLContacts_vws { get; set; }
        public virtual DbSet<Calendar> Calendars { get; set; }
        public virtual DbSet<CashAcctInvAddressArch> CashAcctInvAddressArches { get; set; }
        public virtual DbSet<CashAcctInvoiceAddress> CashAcctInvoiceAddresses { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CategoryRate> CategoryRates { get; set; }
        public virtual DbSet<ConfigurableName> ConfigurableNames { get; set; }
        public virtual DbSet<ConfirmationIntentType> ConfirmationIntentTypes { get; set; }
        public virtual DbSet<Conformity> Conformities { get; set; }
        public virtual DbSet<ConformitySalesOrderItem> ConformitySalesOrderItems { get; set; }
        public virtual DbSet<CostingMethod> CostingMethods { get; set; }
        public virtual DbSet<Counter> Counters { get; set; }
        public virtual DbSet<CustDeliveryAddress> CustDeliveryAddresses { get; set; }
        public virtual DbSet<CustProdGroupDiscount> CustProdGroupDiscounts { get; set; }
        public virtual DbSet<CustStockItemDiscount> CustStockItemDiscounts { get; set; }
        public virtual DbSet<CustomerDiscountGroup> CustomerDiscountGroups { get; set; }
        public virtual DbSet<CustomerType> CustomerTypes { get; set; }
        public virtual DbSet<DLP_SABRE_INSPECTION_WAREHOUSE> DLP_SABRE_INSPECTION_WAREHOUSEs { get; set; }
        public virtual DbSet<DLP_stklvl> DLP_stklvls { get; set; }
        public virtual DbSet<DSAuditTrailView> DSAuditTrailViews { get; set; }
        public virtual DbSet<DefaultPricingSourceType> DefaultPricingSourceTypes { get; set; }
        public virtual DbSet<DeleteLog> DeleteLogs { get; set; }
        public virtual DbSet<DeprecatedObject> DeprecatedObjects { get; set; }
        public virtual DbSet<DeprecationScript> DeprecationScripts { get; set; }
        public virtual DbSet<DiscountType> DiscountTypes { get; set; }
        public virtual DbSet<DocumentPrintStatus> DocumentPrintStatuses { get; set; }
        public virtual DbSet<DocumentProcessStatus> DocumentProcessStatuses { get; set; }
        public virtual DbSet<DocumentStatus> DocumentStatuses { get; set; }
        public virtual DbSet<DrawDrawing> DrawDrawings { get; set; }
        public virtual DbSet<DrawDrawingCommentHistory> DrawDrawingCommentHistories { get; set; }
        public virtual DbSet<DrawingAttachedDocument> DrawingAttachedDocuments { get; set; }
        public virtual DbSet<DrawingRegister> DrawingRegisters { get; set; }
        public virtual DbSet<DrawingRevision> DrawingRevisions { get; set; }
        public virtual DbSet<DuplicatedSupplier> DuplicatedSuppliers { get; set; }
        public virtual DbSet<EDUFundType> EDUFundTypes { get; set; }
        public virtual DbSet<EDULocalEducationAuthority> EDULocalEducationAuthorities { get; set; }
        public virtual DbSet<EDUSchoolType> EDUSchoolTypes { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeRate> EmployeeRates { get; set; }
        public virtual DbSet<EntrySource> EntrySources { get; set; }
        public virtual DbSet<EstAttachedDocument> EstAttachedDocuments { get; set; }
        public virtual DbSet<EstDrawing> EstDrawings { get; set; }
        public virtual DbSet<EstMaterial> EstMaterials { get; set; }
        public virtual DbSet<EstModificationHistory> EstModificationHistories { get; set; }
        public virtual DbSet<EstNonStock> EstNonStocks { get; set; }
        public virtual DbSet<EstOpComponent> EstOpComponents { get; set; }
        public virtual DbSet<EstOperation> EstOperations { get; set; }
        public virtual DbSet<EstOtherExpense> EstOtherExpenses { get; set; }
        public virtual DbSet<EstQtyBreak> EstQtyBreaks { get; set; }
        public virtual DbSet<EstStage> EstStages { get; set; }
        public virtual DbSet<Estimate> Estimates { get; set; }
        public virtual DbSet<EventLog> EventLogs { get; set; }
        public virtual DbSet<EventLogType> EventLogTypes { get; set; }
        public virtual DbSet<ExpenseType> ExpenseTypes { get; set; }
        public virtual DbSet<ExtensionVersion> ExtensionVersions { get; set; }
        public virtual DbSet<FAAsset> FAAssets { get; set; }
        public virtual DbSet<FAAssetTransactionType> FAAssetTransactionTypes { get; set; }
        public virtual DbSet<FADepreciationMethod> FADepreciationMethods { get; set; }
        public virtual DbSet<FADepreciationTran> FADepreciationTrans { get; set; }
        public virtual DbSet<FAFixedAssetAnalysisVw> FAFixedAssetAnalysisVws { get; set; }
        public virtual DbSet<FAFixedAssetListVw> FAFixedAssetListVws { get; set; }
        public virtual DbSet<FAFixedAssetLocationVw> FAFixedAssetLocationVws { get; set; }
        public virtual DbSet<FAFixedAssetManagerVw> FAFixedAssetManagerVws { get; set; }
        public virtual DbSet<Forecast> Forecasts { get; set; }
        public virtual DbSet<ForecastEntry> ForecastEntries { get; set; }
        public virtual DbSet<ForecastPLMonthlyBucket> ForecastPLMonthlyBuckets { get; set; }
        public virtual DbSet<ForecastPLWeeklyBucket> ForecastPLWeeklyBuckets { get; set; }
        public virtual DbSet<ForecastProdCustMonthBucket> ForecastProdCustMonthBuckets { get; set; }
        public virtual DbSet<ForecastProdCustWeekBucket> ForecastProdCustWeekBuckets { get; set; }
        public virtual DbSet<ForecastProductLine> ForecastProductLines { get; set; }
        public virtual DbSet<ForecastSetting> ForecastSettings { get; set; }
        public virtual DbSet<GDPRContactCheckView> GDPRContactCheckViews { get; set; }
        public virtual DbSet<GpSetting> GpSettings { get; set; }
        public virtual DbSet<IJNCREASE_WebsiteDatum> IJNCREASE_WebsiteData { get; set; }
        public virtual DbSet<INCREASE_Average_WO_Cost> INCREASE_Average_WO_Costs { get; set; }
        public virtual DbSet<INCREASE_BOMOP_EstTime> INCREASE_BOMOP_EstTimes { get; set; }
        public virtual DbSet<INCREASE_BomCostLabour> INCREASE_BomCostLabours { get; set; }
        public virtual DbSet<INCREASE_BomCostMachine> INCREASE_BomCostMachines { get; set; }
        public virtual DbSet<INCREASE_BomCostMaterial> INCREASE_BomCostMaterials { get; set; }
        public virtual DbSet<INCREASE_BomCostSubcontract> INCREASE_BomCostSubcontracts { get; set; }
        public virtual DbSet<INCREASE_BomCostTooling> INCREASE_BomCostToolings { get; set; }
        public virtual DbSet<INCREASE_BomHeader_StockItem> INCREASE_BomHeader_StockItems { get; set; }
        public virtual DbSet<INCREASE_BomMachineOp> INCREASE_BomMachineOps { get; set; }
        public virtual DbSet<INCREASE_Bom_Cost1> INCREASE_Bom_Cost1s { get; set; }
        public virtual DbSet<INCREASE_BookRepairablesInView> INCREASE_BookRepairablesInViews { get; set; }
        public virtual DbSet<INCREASE_Build_Time> INCREASE_Build_Times { get; set; }
        public virtual DbSet<INCREASE_Clean_Time> INCREASE_Clean_Times { get; set; }
        public virtual DbSet<INCREASE_Code_Bin> INCREASE_Code_Bins { get; set; }
        public virtual DbSet<INCREASE_ComponentTreatment_Time> INCREASE_ComponentTreatment_Times { get; set; }
        public virtual DbSet<INCREASE_DateRepsRecvd> INCREASE_DateRepsRecvds { get; set; }
        public virtual DbSet<INCREASE_Delivery_Time> INCREASE_Delivery_Times { get; set; }
        public virtual DbSet<INCREASE_Despatch2> INCREASE_Despatch2s { get; set; }
        public virtual DbSet<INCREASE_Despatch_View> INCREASE_Despatch_Views { get; set; }
        public virtual DbSet<INCREASE_Despatch_View_OLD> INCREASE_Despatch_View_OLDs { get; set; }
        public virtual DbSet<INCREASE_Despatch_View_OLD_20170213> INCREASE_Despatch_View_OLD_20170213s { get; set; }
        public virtual DbSet<INCREASE_Dismantle_Time> INCREASE_Dismantle_Times { get; set; }
        public virtual DbSet<INCREASE_Est_Bom_Cost> INCREASE_Est_Bom_Costs { get; set; }
        public virtual DbSet<INCREASE_Est_vs_Actual> INCREASE_Est_vs_Actuals { get; set; }
        public virtual DbSet<INCREASE_Final_Assembly_Time> INCREASE_Final_Assembly_Times { get; set; }
        public virtual DbSet<INCREASE_GRNsWithEnteredDate> INCREASE_GRNsWithEnteredDates { get; set; }
        public virtual DbSet<INCREASE_Inspect_Time> INCREASE_Inspect_Times { get; set; }
        public virtual DbSet<INCREASE_IssuedCost> INCREASE_IssuedCosts { get; set; }
        public virtual DbSet<INCREASE_JanSale> INCREASE_JanSales { get; set; }
        public virtual DbSet<INCREASE_LatestBomCost> INCREASE_LatestBomCosts { get; set; }
        public virtual DbSet<INCREASE_LatestCostSession> INCREASE_LatestCostSessions { get; set; }
        public virtual DbSet<INCREASE_LinkedSalesOrdersCurrent> INCREASE_LinkedSalesOrdersCurrents { get; set; }
        public virtual DbSet<INCREASE_Location> INCREASE_Locations { get; set; }
        public virtual DbSet<INCREASE_MonthlySal_vs_MatCost> INCREASE_MonthlySal_vs_MatCosts { get; set; }
        public virtual DbSet<INCREASE_ORIGINALSalesSchedule2> INCREASE_ORIGINALSalesSchedule2s { get; set; }
        public virtual DbSet<INCREASE_OperationNumber> INCREASE_OperationNumbers { get; set; }
        public virtual DbSet<INCREASE_PaintCompleted_Time> INCREASE_PaintCompleted_Times { get; set; }
        public virtual DbSet<INCREASE_PaintPrep_Time> INCREASE_PaintPrep_Times { get; set; }
        public virtual DbSet<INCREASE_Paint_Component_Time> INCREASE_Paint_Component_Times { get; set; }
        public virtual DbSet<INCREASE_ProductionPlanJan2014> INCREASE_ProductionPlanJan2014s { get; set; }
        public virtual DbSet<INCREASE_ProductionPlanJan2014_Delivery> INCREASE_ProductionPlanJan2014_Deliveries { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_FGBFC> INCREASE_ProductionPlan_FGBFCs { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_FGBOGE> INCREASE_ProductionPlan_FGBOGEs { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_FGCAU> INCREASE_ProductionPlan_FGCAUs { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_FGDISPEN> INCREASE_ProductionPlan_FGDISPENs { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_FGDISTRIBUTOR> INCREASE_ProductionPlan_FGDISTRIBUTORs { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_FGKONI> INCREASE_ProductionPlan_FGKONIs { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_FGPBA> INCREASE_ProductionPlan_FGPBAs { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_FGPBA_old> INCREASE_ProductionPlan_FGPBA_olds { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_FGVALVE> INCREASE_ProductionPlan_FGVALVEs { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_FGWOODHEAD> INCREASE_ProductionPlan_FGWOODHEADs { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_OtherBrake> INCREASE_ProductionPlan_OtherBrakes { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_OtherBrakes_old> INCREASE_ProductionPlan_OtherBrakes_olds { get; set; }
        public virtual DbSet<INCREASE_ProductionPlan_SPARE> INCREASE_ProductionPlan_SPAREs { get; set; }
        public virtual DbSet<INCREASE_SOPLineDateTimeCreated> INCREASE_SOPLineDateTimeCreateds { get; set; }
        public virtual DbSet<INCREASE_SOP_Inv_Material_Cost> INCREASE_SOP_Inv_Material_Costs { get; set; }
        public virtual DbSet<INCREASE_SafetyCriticalFlag> INCREASE_SafetyCriticalFlags { get; set; }
        public virtual DbSet<INCREASE_SalesSchedule2> INCREASE_SalesSchedule2s { get; set; }
        public virtual DbSet<INCREASE_SearchCatsImport> INCREASE_SearchCatsImports { get; set; }
        public virtual DbSet<INCREASE_SlowStock6Month> INCREASE_SlowStock6Months { get; set; }
        public virtual DbSet<INCREASE_StockAvValueLastYear> INCREASE_StockAvValueLastYears { get; set; }
        public virtual DbSet<INCREASE_StockDatum> INCREASE_StockData { get; set; }
        public virtual DbSet<INCREASE_StockImport> INCREASE_StockImports { get; set; }
        public virtual DbSet<INCREASE_StockItemsToBeSetAsBOM> INCREASE_StockItemsToBeSetAsBOMs { get; set; }
        public virtual DbSet<INCREASE_StockReorderminmax> INCREASE_StockReorderminmaxes { get; set; }
        public virtual DbSet<INCREASE_Subassemble_Time> INCREASE_Subassemble_Times { get; set; }
        public virtual DbSet<INCREASE_SupplierStockItem> INCREASE_SupplierStockItems { get; set; }
        public virtual DbSet<INCREASE_Test_Time> INCREASE_Test_Times { get; set; }
        public virtual DbSet<INCREASE_UpdatedSupplierLeadTime> INCREASE_UpdatedSupplierLeadTimes { get; set; }
        public virtual DbSet<INCREASE_WOP_Bom_Cost> INCREASE_WOP_Bom_Costs { get; set; }
        public virtual DbSet<INCREASE_WO_QtyFinished> INCREASE_WO_QtyFinisheds { get; set; }
        public virtual DbSet<INCREASE_WO_comp_Issue_cost> INCREASE_WO_comp_Issue_costs { get; set; }
        public virtual DbSet<INCREASE_WorksOrderGRN> INCREASE_WorksOrderGRNs { get; set; }
        public virtual DbSet<INCREASE_vw_12MonthUse> INCREASE_vw_12MonthUses { get; set; }
        public virtual DbSet<INCREASE_vw_1MonthUse> INCREASE_vw_1MonthUses { get; set; }
        public virtual DbSet<INCREASE_vw_3MonthUse> INCREASE_vw_3MonthUses { get; set; }
        public virtual DbSet<INCREASE_vw_BatchReservedVw> INCREASE_vw_BatchReservedVws { get; set; }
        public virtual DbSet<INCREASE_vw_BomToTraceableComponent> INCREASE_vw_BomToTraceableComponents { get; set; }
        public virtual DbSet<INCREASE_vw_ContactDetailsforEstimate> INCREASE_vw_ContactDetailsforEstimates { get; set; }
        public virtual DbSet<INCREASE_vw_ForecastMonthByCustomerView> INCREASE_vw_ForecastMonthByCustomerViews { get; set; }
        public virtual DbSet<INCREASE_vw_ForecastMonthByStockItemView> INCREASE_vw_ForecastMonthByStockItemViews { get; set; }
        public virtual DbSet<INCREASE_vw_ForecastMonthlyBucketView> INCREASE_vw_ForecastMonthlyBucketViews { get; set; }
        public virtual DbSet<INCREASE_vw_ForecastUniqueCustAndProd> INCREASE_vw_ForecastUniqueCustAndProds { get; set; }
        public virtual DbSet<INCREASE_vw_ForecastWeekByCustomerView> INCREASE_vw_ForecastWeekByCustomerViews { get; set; }
        public virtual DbSet<INCREASE_vw_ForecastWeekByStockItemView> INCREASE_vw_ForecastWeekByStockItemViews { get; set; }
        public virtual DbSet<INCREASE_vw_ForecastWeeklyBucketView> INCREASE_vw_ForecastWeeklyBucketViews { get; set; }
        public virtual DbSet<INCREASE_vw_ProductionPlanMk2> INCREASE_vw_ProductionPlanMk2s { get; set; }
        public virtual DbSet<INCREASE_vw_ProductionPlanNew_DONOTUSE> INCREASE_vw_ProductionPlanNew_DONOTUSEs { get; set; }
        public virtual DbSet<INCREASE_vw_ReorderReport> INCREASE_vw_ReorderReports { get; set; }
        public virtual DbSet<INCREASE_vw_RepairablesFreeStock> INCREASE_vw_RepairablesFreeStocks { get; set; }
        public virtual DbSet<INCREASE_vw_SOLine_Batch> INCREASE_vw_SOLine_Batches { get; set; }
        public virtual DbSet<INCREASE_vw_SalesOrderLinesWithoutPromiseDate> INCREASE_vw_SalesOrderLinesWithoutPromiseDates { get; set; }
        public virtual DbSet<INCREASE_vw_SalesSchedule> INCREASE_vw_SalesSchedules { get; set; }
        public virtual DbSet<INCREASE_vw_StockItemLastPrice> INCREASE_vw_StockItemLastPrices { get; set; }
        public virtual DbSet<INCREASE_vw_StockItemsWithBin> INCREASE_vw_StockItemsWithBins { get; set; }
        public virtual DbSet<INCREASE_vw_StockitemLastDespatched> INCREASE_vw_StockitemLastDespatcheds { get; set; }
        public virtual DbSet<INCREASE_vw_StockitemWOAllocationsandIssue> INCREASE_vw_StockitemWOAllocationsandIssues { get; set; }
        public virtual DbSet<INCREASE_vw_WOtoTraceableComponent> INCREASE_vw_WOtoTraceableComponents { get; set; }
        public virtual DbSet<INCREASE_vw_WorksOrderIssue> INCREASE_vw_WorksOrderIssues { get; set; }
        public virtual DbSet<INCREASE_vw_WorksOrderIssues1> INCREASE_vw_WorksOrderIssues1s { get; set; }
        public virtual DbSet<INVCustomerUnitPricePref> INVCustomerUnitPricePrefs { get; set; }
        public virtual DbSet<INVInvCredNominalItem> INVInvCredNominalItems { get; set; }
        public virtual DbSet<INVInvCredTaxItem> INVInvCredTaxItems { get; set; }
        public virtual DbSet<INVInvoiceCredit> INVInvoiceCredits { get; set; }
        public virtual DbSet<INVInvoiceCreditAddress> INVInvoiceCreditAddresses { get; set; }
        public virtual DbSet<INVInvoiceCreditLine> INVInvoiceCreditLines { get; set; }
        public virtual DbSet<INVInvoiceCreditType> INVInvoiceCreditTypes { get; set; }
        public virtual DbSet<INVInvoiceStatus> INVInvoiceStatuses { get; set; }
        public virtual DbSet<ImportStockType> ImportStockTypes { get; set; }
        public virtual DbSet<ImportedLeadTime> ImportedLeadTimes { get; set; }
        public virtual DbSet<Increase_AVGStockValueLastYear> Increase_AVGStockValueLastYears { get; set; }
        public virtual DbSet<Increase_Mstklvl> Increase_Mstklvls { get; set; }
        public virtual DbSet<Increase_StockAvValueThisYear> Increase_StockAvValueThisYears { get; set; }
        public virtual DbSet<Increase_stklvl> Increase_stklvls { get; set; }
        public virtual DbSet<InternalArea> InternalAreas { get; set; }
        public virtual DbSet<IntrastatDateType> IntrastatDateTypes { get; set; }
        public virtual DbSet<IntrastatDestinationType> IntrastatDestinationTypes { get; set; }
        public virtual DbSet<IntrastatEntry> IntrastatEntries { get; set; }
        public virtual DbSet<IntrastatEntryHeader> IntrastatEntryHeaders { get; set; }
        public virtual DbSet<IntrastatEntryHeaderStatus> IntrastatEntryHeaderStatuses { get; set; }
        public virtual DbSet<IntrastatStatus> IntrastatStatuses { get; set; }
        public virtual DbSet<InvoiceCreditUpdateStatusType> InvoiceCreditUpdateStatusTypes { get; set; }
        public virtual DbSet<InvoiceLineProfitAnalysis> InvoiceLineProfitAnalyses { get; set; }
        public virtual DbSet<InvoiceProfitAnalysis> InvoiceProfitAnalyses { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobActualOpTime> JobActualOpTimes { get; set; }
        public virtual DbSet<JobAllocIssue> JobAllocIssues { get; set; }
        public virtual DbSet<JobAttachedDocument> JobAttachedDocuments { get; set; }
        public virtual DbSet<JobInvoicesByStage> JobInvoicesByStages { get; set; }
        public virtual DbSet<JobMaterial> JobMaterials { get; set; }
        public virtual DbSet<JobNonStock> JobNonStocks { get; set; }
        public virtual DbSet<JobOpComponent> JobOpComponents { get; set; }
        public virtual DbSet<JobOperation> JobOperations { get; set; }
        public virtual DbSet<JobOtherExpense> JobOtherExpenses { get; set; }
        public virtual DbSet<JobSalesInvoiceHeader> JobSalesInvoiceHeaders { get; set; }
        public virtual DbSet<JobSalesInvoiceItem> JobSalesInvoiceItems { get; set; }
        public virtual DbSet<JobStage> JobStages { get; set; }
        public virtual DbSet<LabLabourResource> LabLabourResources { get; set; }
        public virtual DbSet<LabLabourResourceGroup> LabLabourResourceGroups { get; set; }
        public virtual DbSet<Labour> Labours { get; set; }
        public virtual DbSet<LandedCostsType> LandedCostsTypes { get; set; }
        public virtual DbSet<MFGAddress> MFGAddresses { get; set; }
        public virtual DbSet<MFGAllocBalance> MFGAllocBalances { get; set; }
        public virtual DbSet<MFGAllocation> MFGAllocations { get; set; }
        public virtual DbSet<MFGAllocationLine> MFGAllocationLines { get; set; }
        public virtual DbSet<MFGComponentTraceability> MFGComponentTraceabilities { get; set; }
        public virtual DbSet<MFGComponentWarehouse> MFGComponentWarehouses { get; set; }
        public virtual DbSet<MFGContact> MFGContacts { get; set; }
        public virtual DbSet<MFGContactAddress> MFGContactAddresses { get; set; }
        public virtual DbSet<MFGContactRole> MFGContactRoles { get; set; }
        public virtual DbSet<MFGContactValue> MFGContactValues { get; set; }
        public virtual DbSet<MFGCustomLayout> MFGCustomLayouts { get; set; }
        public virtual DbSet<MFGIssue> MFGIssues { get; set; }
        public virtual DbSet<MFGIssueShortfall> MFGIssueShortfalls { get; set; }
        public virtual DbSet<MFGPOPOrderReturnLine> MFGPOPOrderReturnLines { get; set; }
        public virtual DbSet<MFGProductGroup> MFGProductGroups { get; set; }
        public virtual DbSet<MFGRepTraceabilityEnquiry> MFGRepTraceabilityEnquiries { get; set; }
        public virtual DbSet<MFGSOPOrderReturnLine> MFGSOPOrderReturnLines { get; set; }
        public virtual DbSet<MFGSOPSetting> MFGSOPSettings { get; set; }
        public virtual DbSet<MFGScrapReasonCode> MFGScrapReasonCodes { get; set; }
        public virtual DbSet<MFGSetting> MFGSettings { get; set; }
        public virtual DbSet<MFGStockItem> MFGStockItems { get; set; }
        public virtual DbSet<MFGSubstituteTraceableAudit> MFGSubstituteTraceableAudits { get; set; }
        public virtual DbSet<MFGSubstituteTraceableAuditType> MFGSubstituteTraceableAuditTypes { get; set; }
        public virtual DbSet<MFGTempDebugLog> MFGTempDebugLogs { get; set; }
        public virtual DbSet<MFGTraceableBuiltItem> MFGTraceableBuiltItems { get; set; }
        public virtual DbSet<MFGTraceableIssue> MFGTraceableIssues { get; set; }
        public virtual DbSet<MFGWOCompletedPOLink> MFGWOCompletedPOLinks { get; set; }
        public virtual DbSet<MFGWarehouse> MFGWarehouses { get; set; }
        public virtual DbSet<MFGWarehouseItem> MFGWarehouseItems { get; set; }
        public virtual DbSet<MFGWoCompletion> MFGWoCompletions { get; set; }
        public virtual DbSet<MRPReplenishmentRulesType> MRPReplenishmentRulesTypes { get; set; }
        public virtual DbSet<MachMachineResource> MachMachineResources { get; set; }
        public virtual DbSet<MachMachineResourceActivity> MachMachineResourceActivities { get; set; }
        public virtual DbSet<MachMachineResourceActivityType> MachMachineResourceActivityTypes { get; set; }
        public virtual DbSet<MachMachineResourceGroup> MachMachineResourceGroups { get; set; }
        public virtual DbSet<Machine> Machines { get; set; }
        public virtual DbSet<MachinesCalibrationHistory> MachinesCalibrationHistories { get; set; }
        public virtual DbSet<MfgBomAllocHierarchy> MfgBomAllocHierarchies { get; set; }
        public virtual DbSet<ModeOfTransport> ModeOfTransports { get; set; }
        public virtual DbSet<MovementBalance> MovementBalances { get; set; }
        public virtual DbSet<MovementBalanceType> MovementBalanceTypes { get; set; }
        public virtual DbSet<MseAddress> MseAddresses { get; set; }
        public virtual DbSet<MseContact> MseContacts { get; set; }
        public virtual DbSet<MseContactAddress> MseContactAddresses { get; set; }
        public virtual DbSet<MseContactRole> MseContactRoles { get; set; }
        public virtual DbSet<MseContactValue> MseContactValues { get; set; }
        public virtual DbSet<MseProductGroup> MseProductGroups { get; set; }
        public virtual DbSet<MseStockItem> MseStockItems { get; set; }
        public virtual DbSet<MseWarehouse> MseWarehouses { get; set; }
        public virtual DbSet<MseWarehouseItem> MseWarehouseItems { get; set; }
        public virtual DbSet<MsmCostHeading> MsmCostHeadings { get; set; }
        public virtual DbSet<MsmCostHeadingType> MsmCostHeadingTypes { get; set; }
        public virtual DbSet<MsmDateRollOnExclusion> MsmDateRollOnExclusions { get; set; }
        public virtual DbSet<MsmDateRollOnSetting> MsmDateRollOnSettings { get; set; }
        public virtual DbSet<MsmDesktopElement> MsmDesktopElements { get; set; }
        public virtual DbSet<MsmDesktopElementFormType> MsmDesktopElementFormTypes { get; set; }
        public virtual DbSet<MsmDesktopElementSourceType> MsmDesktopElementSourceTypes { get; set; }
        public virtual DbSet<MsmDesktopElementType> MsmDesktopElementTypes { get; set; }
        public virtual DbSet<MsmFeature> MsmFeatures { get; set; }
        public virtual DbSet<MsmPeriodFrequency> MsmPeriodFrequencies { get; set; }
        public virtual DbSet<MsmQuantityCalculatorOperatorType> MsmQuantityCalculatorOperatorTypes { get; set; }
        public virtual DbSet<MsmQuantityCalculatorSetting> MsmQuantityCalculatorSettings { get; set; }
        public virtual DbSet<MsmReplacementReport> MsmReplacementReports { get; set; }
        public virtual DbSet<MsmResourceTimeUnit> MsmResourceTimeUnits { get; set; }
        public virtual DbSet<MsmSearchCondition> MsmSearchConditions { get; set; }
        public virtual DbSet<MsmSearchHeader> MsmSearchHeaders { get; set; }
        public virtual DbSet<MsmSearchJoinType> MsmSearchJoinTypes { get; set; }
        public virtual DbSet<MsmSearchLine> MsmSearchLines { get; set; }
        public virtual DbSet<MsmSetting> MsmSettings { get; set; }
        public virtual DbSet<MsmSmartLink> MsmSmartLinks { get; set; }
        public virtual DbSet<MsmTimeUnit> MsmTimeUnits { get; set; }
        public virtual DbSet<MsmUser> MsmUsers { get; set; }
        public virtual DbSet<MsmUserColourSetting> MsmUserColourSettings { get; set; }
        public virtual DbSet<MsmUserFeature> MsmUserFeatures { get; set; }
        public virtual DbSet<MsmUserSetting> MsmUserSettings { get; set; }
        public virtual DbSet<MsmVersionControlStatus> MsmVersionControlStatuses { get; set; }
        public virtual DbSet<NLAccountMemo> NLAccountMemos { get; set; }
        public virtual DbSet<NLAccountNumber> NLAccountNumbers { get; set; }
        public virtual DbSet<NLAccountNumberCostCentre> NLAccountNumberCostCentres { get; set; }
        public virtual DbSet<NLAccountPeriodBalanceVw> NLAccountPeriodBalanceVws { get; set; }
        public virtual DbSet<NLAccountPeriodValue> NLAccountPeriodValues { get; set; }
        public virtual DbSet<NLAccountReportCategory> NLAccountReportCategories { get; set; }
        public virtual DbSet<NLAccountReportCategoryType> NLAccountReportCategoryTypes { get; set; }
        public virtual DbSet<NLAccountReportType> NLAccountReportTypes { get; set; }
        public virtual DbSet<NLAccountType> NLAccountTypes { get; set; }
        public virtual DbSet<NLAccountYearValue> NLAccountYearValues { get; set; }
        public virtual DbSet<NLAnnualBudgetApportProfile> NLAnnualBudgetApportProfiles { get; set; }
        public virtual DbSet<NLAnnualBudgetTitle> NLAnnualBudgetTitles { get; set; }
        public virtual DbSet<NLAnnualBudgetType> NLAnnualBudgetTypes { get; set; }
        public virtual DbSet<NLBudgetApportPeriodPrcnt> NLBudgetApportPeriodPrcnts { get; set; }
        public virtual DbSet<NLCashFlowLayoutNominalAccount> NLCashFlowLayoutNominalAccounts { get; set; }
        public virtual DbSet<NLCashFlowReport> NLCashFlowReports { get; set; }
        public virtual DbSet<NLCashFlowReportPeriodHeading> NLCashFlowReportPeriodHeadings { get; set; }
        public virtual DbSet<NLCompletedConsolidation> NLCompletedConsolidations { get; set; }
        public virtual DbSet<NLConsolidation> NLConsolidations { get; set; }
        public virtual DbSet<NLConsolidationItem> NLConsolidationItems { get; set; }
        public virtual DbSet<NLCostCentre> NLCostCentres { get; set; }
        public virtual DbSet<NLDefaultNominalAccount> NLDefaultNominalAccounts { get; set; }
        public virtual DbSet<NLDeferredNominalTran> NLDeferredNominalTrans { get; set; }
        public virtual DbSet<NLDepartment> NLDepartments { get; set; }
        public virtual DbSet<NLFinancialReportCategory> NLFinancialReportCategories { get; set; }
        public virtual DbSet<NLFinancialReportJoinVw> NLFinancialReportJoinVws { get; set; }
        public virtual DbSet<NLFinancialReportLayout> NLFinancialReportLayouts { get; set; }
        public virtual DbSet<NLFinancialReportLineType> NLFinancialReportLineTypes { get; set; }
        public virtual DbSet<NLFinancialReportRow> NLFinancialReportRows { get; set; }
        public virtual DbSet<NLHeldJournal> NLHeldJournals { get; set; }
        public virtual DbSet<NLHeldJournalTran> NLHeldJournalTrans { get; set; }
        public virtual DbSet<NLHistoricalNominalTran> NLHistoricalNominalTrans { get; set; }
        public virtual DbSet<NLJournalRecurringDate> NLJournalRecurringDates { get; set; }
        public virtual DbSet<NLJournalTemplate> NLJournalTemplates { get; set; }
        public virtual DbSet<NLJournalTemplateTran> NLJournalTemplateTrans { get; set; }
        public virtual DbSet<NLJournalTemplateType> NLJournalTemplateTypes { get; set; }
        public virtual DbSet<NLJournalTranTaxType> NLJournalTranTaxTypes { get; set; }
        public virtual DbSet<NLJournalType> NLJournalTypes { get; set; }
        public virtual DbSet<NLLayoutDebitOrCreditType> NLLayoutDebitOrCreditTypes { get; set; }
        public virtual DbSet<NLLayoutPositionType> NLLayoutPositionTypes { get; set; }
        public virtual DbSet<NLNextJournalReferenceNumber> NLNextJournalReferenceNumbers { get; set; }
        public virtual DbSet<NLNominalAccount> NLNominalAccounts { get; set; }
        public virtual DbSet<NLNominalAccountBudgetsVw> NLNominalAccountBudgetsVws { get; set; }
        public virtual DbSet<NLNominalTranType> NLNominalTranTypes { get; set; }
        public virtual DbSet<NLPendLastYearPeriodValue> NLPendLastYearPeriodValues { get; set; }
        public virtual DbSet<NLPendNominalAccount> NLPendNominalAccounts { get; set; }
        public virtual DbSet<NLPendNominalAccountAnalysis> NLPendNominalAccountAnalyses { get; set; }
        public virtual DbSet<NLPendNominalAccountType> NLPendNominalAccountTypes { get; set; }
        public virtual DbSet<NLPendNominalPeriodValue> NLPendNominalPeriodValues { get; set; }
        public virtual DbSet<NLPendNominalTran> NLPendNominalTrans { get; set; }
        public virtual DbSet<NLPendNominalTranReport> NLPendNominalTranReports { get; set; }
        public virtual DbSet<NLPendNominalYearValue> NLPendNominalYearValues { get; set; }
        public virtual DbSet<NLPostAndHistNominalTranView> NLPostAndHistNominalTranViews { get; set; }
        public virtual DbSet<NLPostedNominalTran> NLPostedNominalTrans { get; set; }
        public virtual DbSet<NLReconciliationEnquirySetting> NLReconciliationEnquirySettings { get; set; }
        public virtual DbSet<NLReconciliationEnquiryType> NLReconciliationEnquiryTypes { get; set; }
        public virtual DbSet<NLReportCategoryBudget> NLReportCategoryBudgets { get; set; }
        public virtual DbSet<NLReportCategoryBudgetOwner> NLReportCategoryBudgetOwners { get; set; }
        public virtual DbSet<NLReportCategoryBudgetYearValue> NLReportCategoryBudgetYearValues { get; set; }
        public virtual DbSet<NLReportCategoryYearBudgetsView> NLReportCategoryYearBudgetsViews { get; set; }
        public virtual DbSet<NLSetting> NLSettings { get; set; }
        public virtual DbSet<NLStatementLayout> NLStatementLayouts { get; set; }
        public virtual DbSet<NLStatementLayoutRow> NLStatementLayoutRows { get; set; }
        public virtual DbSet<NatureOfTransCode> NatureOfTransCodes { get; set; }
        public virtual DbSet<NominalUsage> NominalUsages { get; set; }
        public virtual DbSet<NonProductiveBreakdown> NonProductiveBreakdowns { get; set; }
        public virtual DbSet<NonProductiveTime> NonProductiveTimes { get; set; }
        public virtual DbSet<NonWorkingPeriod> NonWorkingPeriods { get; set; }
        public virtual DbSet<Old200BOMAllocation> Old200BOMAllocations { get; set; }
        public virtual DbSet<Old200BOMCostType> Old200BOMCostTypes { get; set; }
        public virtual DbSet<Old200BOMReasonForHold> Old200BOMReasonForHolds { get; set; }
        public virtual DbSet<OldMfgBomImage> OldMfgBomImages { get; set; }
        public virtual DbSet<OpOperation> OpOperations { get; set; }
        public virtual DbSet<OpOperationPhase> OpOperationPhases { get; set; }
        public virtual DbSet<OpOperationResource> OpOperationResources { get; set; }
        public virtual DbSet<OpOperationResourceType> OpOperationResourceTypes { get; set; }
        public virtual DbSet<OpOperationSubcontractQuantityBreak> OpOperationSubcontractQuantityBreaks { get; set; }
        public virtual DbSet<OpOperationSubcontractSupplier> OpOperationSubcontractSuppliers { get; set; }
        public virtual DbSet<OpSetting> OpSettings { get; set; }
        public virtual DbSet<Operation> Operations { get; set; }
        public virtual DbSet<OrderReturnLineType> OrderReturnLineTypes { get; set; }
        public virtual DbSet<OrderValueDiscount> OrderValueDiscounts { get; set; }
        public virtual DbSet<PCAccrual> PCAccruals { get; set; }
        public virtual DbSet<PCBillStatus> PCBillStatuses { get; set; }
        public virtual DbSet<PCBillingProjectSearchVw> PCBillingProjectSearchVws { get; set; }
        public virtual DbSet<PCBudgetLevel> PCBudgetLevels { get; set; }
        public virtual DbSet<PCChargeRateType> PCChargeRateTypes { get; set; }
        public virtual DbSet<PCConfigurableTerm> PCConfigurableTerms { get; set; }
        public virtual DbSet<PCCostGroup> PCCostGroups { get; set; }
        public virtual DbSet<PCCostGroupAnalysisField> PCCostGroupAnalysisFields { get; set; }
        public virtual DbSet<PCCostItem> PCCostItems { get; set; }
        public virtual DbSet<PCCostItemAnalysisField> PCCostItemAnalysisFields { get; set; }
        public virtual DbSet<PCCostItemGroupVw> PCCostItemGroupVws { get; set; }
        public virtual DbSet<PCCostItemType> PCCostItemTypes { get; set; }
        public virtual DbSet<PCCostItemTypeAnalFieldSetting> PCCostItemTypeAnalFieldSettings { get; set; }
        public virtual DbSet<PCCostItemTypeFeatureSetting> PCCostItemTypeFeatureSettings { get; set; }
        public virtual DbSet<PCCostItemTypeIntegrateSetting> PCCostItemTypeIntegrateSettings { get; set; }
        public virtual DbSet<PCCreateProjectPreference> PCCreateProjectPreferences { get; set; }
        public virtual DbSet<PCDefaultIntegrationSetting> PCDefaultIntegrationSettings { get; set; }
        public virtual DbSet<PCDisplayFeature> PCDisplayFeatures { get; set; }
        public virtual DbSet<PCDisplayFeatureGroup> PCDisplayFeatureGroups { get; set; }
        public virtual DbSet<PCEntryPostingStatus> PCEntryPostingStatuses { get; set; }
        public virtual DbSet<PCEntryType> PCEntryTypes { get; set; }
        public virtual DbSet<PCFinancialClassification> PCFinancialClassifications { get; set; }
        public virtual DbSet<PCGroupLevelAnalFieldSetting> PCGroupLevelAnalFieldSettings { get; set; }
        public virtual DbSet<PCGroupLevelFeatureSetting> PCGroupLevelFeatureSettings { get; set; }
        public virtual DbSet<PCGroupingLevel> PCGroupingLevels { get; set; }
        public virtual DbSet<PCIntegrationOption> PCIntegrationOptions { get; set; }
        public virtual DbSet<PCOverheadUpliftRateModifier> PCOverheadUpliftRateModifiers { get; set; }
        public virtual DbSet<PCPriceModifierType> PCPriceModifierTypes { get; set; }
        public virtual DbSet<PCPricingRuleMethodType> PCPricingRuleMethodTypes { get; set; }
        public virtual DbSet<PCProjectArchiveStatus> PCProjectArchiveStatuses { get; set; }
        public virtual DbSet<PCProjectArchiveUpdateVw> PCProjectArchiveUpdateVws { get; set; }
        public virtual DbSet<PCProjectArchiveVw> PCProjectArchiveVws { get; set; }
        public virtual DbSet<PCProjectAuthoriser> PCProjectAuthorisers { get; set; }
        public virtual DbSet<PCProjectContact> PCProjectContacts { get; set; }
        public virtual DbSet<PCProjectEntriesBilledVw> PCProjectEntriesBilledVws { get; set; }
        public virtual DbSet<PCProjectEntriesInvoicedVw> PCProjectEntriesInvoicedVws { get; set; }
        public virtual DbSet<PCProjectEntriesOutstandingVw> PCProjectEntriesOutstandingVws { get; set; }
        public virtual DbSet<PCProjectEntry> PCProjectEntries { get; set; }
        public virtual DbSet<PCProjectEntryDescriptor> PCProjectEntryDescriptors { get; set; }
        public virtual DbSet<PCProjectEntryPosting> PCProjectEntryPostings { get; set; }
        public virtual DbSet<PCProjectEntryVw> PCProjectEntryVws { get; set; }
        public virtual DbSet<PCProjectLevel> PCProjectLevels { get; set; }
        public virtual DbSet<PCProjectLevelBillingMethod> PCProjectLevelBillingMethods { get; set; }
        public virtual DbSet<PCProjectLvlAnalFieldSetting> PCProjectLvlAnalFieldSettings { get; set; }
        public virtual DbSet<PCProjectLvlFeatureSetting> PCProjectLvlFeatureSettings { get; set; }
        public virtual DbSet<PCProjectResourceLink> PCProjectResourceLinks { get; set; }
        public virtual DbSet<PCProjectResurrectVw> PCProjectResurrectVws { get; set; }
        public virtual DbSet<PCProjectRootStatusVw> PCProjectRootStatusVws { get; set; }
        public virtual DbSet<PCProjectSearchVw> PCProjectSearchVws { get; set; }
        public virtual DbSet<PCProjectStatusUpdateVw> PCProjectStatusUpdateVws { get; set; }
        public virtual DbSet<PCProjectURN> PCProjectURNs { get; set; }
        public virtual DbSet<PCProjectUserProfile> PCProjectUserProfiles { get; set; }
        public virtual DbSet<PCProjectsForCostAnalysisVw> PCProjectsForCostAnalysisVws { get; set; }
        public virtual DbSet<PCProjectsForCostAndRevenueAnalysisVw> PCProjectsForCostAndRevenueAnalysisVws { get; set; }
        public virtual DbSet<PCProjectsForRevenueAnalysisVw> PCProjectsForRevenueAnalysisVws { get; set; }
        public virtual DbSet<PCResourceType> PCResourceTypes { get; set; }
        public virtual DbSet<PCSOPOrderQuotationWithProjectEntriesVw> PCSOPOrderQuotationWithProjectEntriesVws { get; set; }
        public virtual DbSet<PCSOPOrderQuotationWithoutProjectEntriesVw> PCSOPOrderQuotationWithoutProjectEntriesVws { get; set; }
        public virtual DbSet<PCSetting> PCSettings { get; set; }
        public virtual DbSet<PCSimpleAccrualVw> PCSimpleAccrualVws { get; set; }
        public virtual DbSet<PCSimpleTransactionVw> PCSimpleTransactionVws { get; set; }
        public virtual DbSet<PCTimeMaterialsPriceRule> PCTimeMaterialsPriceRules { get; set; }
        public virtual DbSet<PCUniqueProjectCode> PCUniqueProjectCodes { get; set; }
        public virtual DbSet<PCUnitOfMeasure> PCUnitOfMeasures { get; set; }
        public virtual DbSet<PCUnpostedInvoiceCreditVw> PCUnpostedInvoiceCreditVws { get; set; }
        public virtual DbSet<PLAccountInformationView> PLAccountInformationViews { get; set; }
        public virtual DbSet<PLAccountMemo> PLAccountMemos { get; set; }
        public virtual DbSet<PLAllocHeaderPostedEntryVw> PLAllocHeaderPostedEntryVws { get; set; }
        public virtual DbSet<PLAllocationHeader> PLAllocationHeaders { get; set; }
        public virtual DbSet<PLAllocationTran> PLAllocationTrans { get; set; }
        public virtual DbSet<PLAllocationType> PLAllocationTypes { get; set; }
        public virtual DbSet<PLAnalysisPeriod> PLAnalysisPeriods { get; set; }
        public virtual DbSet<PLFactorHouse> PLFactorHouses { get; set; }
        public virtual DbSet<PLFactorHouseContact> PLFactorHouseContacts { get; set; }
        public virtual DbSet<PLFactorHouseLocation> PLFactorHouseLocations { get; set; }
        public virtual DbSet<PLGenerateSuggestPaymentVw> PLGenerateSuggestPaymentVws { get; set; }
        public virtual DbSet<PLHistRevalAllocationTran> PLHistRevalAllocationTrans { get; set; }
        public virtual DbSet<PLHistoricalSupplierTran> PLHistoricalSupplierTrans { get; set; }
        public virtual DbSet<PLLiveAndHistRevAllocTranView> PLLiveAndHistRevAllocTranViews { get; set; }
        public virtual DbSet<PLPaymentDocumentType> PLPaymentDocumentTypes { get; set; }
        public virtual DbSet<PLPaymentGroup> PLPaymentGroups { get; set; }
        public virtual DbSet<PLPendNLAnalysisBatchTran> PLPendNLAnalysisBatchTrans { get; set; }
        public virtual DbSet<PLPendNLAnalysisTran> PLPendNLAnalysisTrans { get; set; }
        public virtual DbSet<PLPendSupplierAccount> PLPendSupplierAccounts { get; set; }
        public virtual DbSet<PLPendSupplierAnalysis> PLPendSupplierAnalyses { get; set; }
        public virtual DbSet<PLPendSupplierBatch> PLPendSupplierBatches { get; set; }
        public virtual DbSet<PLPendSupplierBatchTran> PLPendSupplierBatchTrans { get; set; }
        public virtual DbSet<PLPendSupplierTran> PLPendSupplierTrans { get; set; }
        public virtual DbSet<PLPendTaxAnalysisBatchTran> PLPendTaxAnalysisBatchTrans { get; set; }
        public virtual DbSet<PLPendTaxAnalysisTran> PLPendTaxAnalysisTrans { get; set; }
        public virtual DbSet<PLPostAndHistSupplierTranView> PLPostAndHistSupplierTranViews { get; set; }
        public virtual DbSet<PLPostedSupplierTran> PLPostedSupplierTrans { get; set; }
        public virtual DbSet<PLPotRemittancePaymentVw> PLPotRemittancePaymentVws { get; set; }
        public virtual DbSet<PLProposedPayment> PLProposedPayments { get; set; }
        public virtual DbSet<PLProposedPaymentPostedTran> PLProposedPaymentPostedTrans { get; set; }
        public virtual DbSet<PLRemittanceMessage> PLRemittanceMessages { get; set; }
        public virtual DbSet<PLRevalAllocationTran> PLRevalAllocationTrans { get; set; }
        public virtual DbSet<PLSetting> PLSettings { get; set; }
        public virtual DbSet<PLSupplierAccount> PLSupplierAccounts { get; set; }
        public virtual DbSet<PLSupplierBank> PLSupplierBanks { get; set; }
        public virtual DbSet<PLSupplierContact> PLSupplierContacts { get; set; }
        public virtual DbSet<PLSupplierContactDefaultsVw> PLSupplierContactDefaultsVws { get; set; }
        public virtual DbSet<PLSupplierContactRole> PLSupplierContactRoles { get; set; }
        public virtual DbSet<PLSupplierContactValue> PLSupplierContactValues { get; set; }
        public virtual DbSet<PLSupplierDocument> PLSupplierDocuments { get; set; }
        public virtual DbSet<PLSupplierFactorHouse> PLSupplierFactorHouses { get; set; }
        public virtual DbSet<PLSupplierLocation> PLSupplierLocations { get; set; }
        public virtual DbSet<PLSupplierPeriodValue> PLSupplierPeriodValues { get; set; }
        public virtual DbSet<PLSupplierYearValue> PLSupplierYearValues { get; set; }
        public virtual DbSet<PLTotalOverdueBalancesView> PLTotalOverdueBalancesViews { get; set; }
        public virtual DbSet<PLTranMemo> PLTranMemos { get; set; }
        public virtual DbSet<PLTransactionSummary> PLTransactionSummaries { get; set; }
        public virtual DbSet<PLUnauthNominalAnalysisItem> PLUnauthNominalAnalysisItems { get; set; }
        public virtual DbSet<POPAdditionalCharge> POPAdditionalCharges { get; set; }
        public virtual DbSet<POPAlternativeAuthoriser> POPAlternativeAuthorisers { get; set; }
        public virtual DbSet<POPAnalysisCode> POPAnalysisCodes { get; set; }
        public virtual DbSet<POPAuthAuditEvent> POPAuthAuditEvents { get; set; }
        public virtual DbSet<POPAuthAuditEventType> POPAuthAuditEventTypes { get; set; }
        public virtual DbSet<POPAuthPrincipal> POPAuthPrincipals { get; set; }
        public virtual DbSet<POPAuthPrincipalContent> POPAuthPrincipalContents { get; set; }
        public virtual DbSet<POPAuthPrincipalContentType> POPAuthPrincipalContentTypes { get; set; }
        public virtual DbSet<POPAuthRoleType> POPAuthRoleTypes { get; set; }
        public virtual DbSet<POPAuthRule> POPAuthRules { get; set; }
        public virtual DbSet<POPAuthRuleSource> POPAuthRuleSources { get; set; }
        public virtual DbSet<POPAuthRuleView> POPAuthRuleViews { get; set; }
        public virtual DbSet<POPCancelledLine> POPCancelledLines { get; set; }
        public virtual DbSet<POPCancelledLineArch> POPCancelledLineArches { get; set; }
        public virtual DbSet<POPDisputeCode> POPDisputeCodes { get; set; }
        public virtual DbSet<POPDocDelAddress> POPDocDelAddresses { get; set; }
        public virtual DbSet<POPDocDelAddressArch> POPDocDelAddressArches { get; set; }
        public virtual DbSet<POPGRNNumber> POPGRNNumbers { get; set; }
        public virtual DbSet<POPIntrastatVw> POPIntrastatVws { get; set; }
        public virtual DbSet<POPInvCredDispute> POPInvCredDisputes { get; set; }
        public virtual DbSet<POPInvCreditLineArch> POPInvCreditLineArches { get; set; }
        public virtual DbSet<POPInvoiceCreditLine> POPInvoiceCreditLines { get; set; }
        public virtual DbSet<POPInvoiceCreditType> POPInvoiceCreditTypes { get; set; }
        public virtual DbSet<POPNonePartFullStatus> POPNonePartFullStatuses { get; set; }
        public virtual DbSet<POPOnOrderBalance> POPOnOrderBalances { get; set; }
        public virtual DbSet<POPOnOrderLine> POPOnOrderLines { get; set; }
        public virtual DbSet<POPOrdReturnLineDelAddrArch> POPOrdReturnLineDelAddrArches { get; set; }
        public virtual DbSet<POPOrdReturnLineDelAddress> POPOrdReturnLineDelAddresses { get; set; }
        public virtual DbSet<POPOrderAuthoriser> POPOrderAuthorisers { get; set; }
        public virtual DbSet<POPOrderAuthoriserAlternativeVw> POPOrderAuthoriserAlternativeVws { get; set; }
        public virtual DbSet<POPOrderGenerationType> POPOrderGenerationTypes { get; set; }
        public virtual DbSet<POPOrderNotification> POPOrderNotifications { get; set; }
        public virtual DbSet<POPOrderNotificationType> POPOrderNotificationTypes { get; set; }
        public virtual DbSet<POPOrderNotificationView> POPOrderNotificationViews { get; set; }
        public virtual DbSet<POPOrderNumber> POPOrderNumbers { get; set; }
        public virtual DbSet<POPOrderReturn> POPOrderReturns { get; set; }
        public virtual DbSet<POPOrderReturnArch> POPOrderReturnArches { get; set; }
        public virtual DbSet<POPOrderReturnLine> POPOrderReturnLines { get; set; }
        public virtual DbSet<POPOrderReturnLineAddrType> POPOrderReturnLineAddrTypes { get; set; }
        public virtual DbSet<POPOrderReturnLineArch> POPOrderReturnLineArches { get; set; }
        public virtual DbSet<POPOrderReturnType> POPOrderReturnTypes { get; set; }
        public virtual DbSet<POPOrdersCurrentValuesView> POPOrdersCurrentValuesViews { get; set; }
        public virtual DbSet<POPRcptReturnLineArch> POPRcptReturnLineArches { get; set; }
        public virtual DbSet<POPRcptRtnInvCrdLineArch> POPRcptRtnInvCrdLineArches { get; set; }
        public virtual DbSet<POPRcptRtnInvCredLine> POPRcptRtnInvCredLines { get; set; }
        public virtual DbSet<POPRcptRtnLineSource> POPRcptRtnLineSources { get; set; }
        public virtual DbSet<POPReceiptReturn> POPReceiptReturns { get; set; }
        public virtual DbSet<POPReceiptReturnLine> POPReceiptReturnLines { get; set; }
        public virtual DbSet<POPReceiptReturnType> POPReceiptReturnTypes { get; set; }
        public virtual DbSet<POPReorderLineStatus> POPReorderLineStatuses { get; set; }
        public virtual DbSet<POPRequisition> POPRequisitions { get; set; }
        public virtual DbSet<POPRequisitionFulfilmentLine> POPRequisitionFulfilmentLines { get; set; }
        public virtual DbSet<POPRequisitionFulfilmentLineType> POPRequisitionFulfilmentLineTypes { get; set; }
        public virtual DbSet<POPRequisitionLine> POPRequisitionLines { get; set; }
        public virtual DbSet<POPRequisitionNumber> POPRequisitionNumbers { get; set; }
        public virtual DbSet<POPRequisitionStatus> POPRequisitionStatuses { get; set; }
        public virtual DbSet<POPReturnNumber> POPReturnNumbers { get; set; }
        public virtual DbSet<POPSetting> POPSettings { get; set; }
        public virtual DbSet<POPStandardItemLink> POPStandardItemLinks { get; set; }
        public virtual DbSet<POPStandardItemLinkArch> POPStandardItemLinkArches { get; set; }
        public virtual DbSet<POPToReorderItem> POPToReorderItems { get; set; }
        public virtual DbSet<POPToReorderItemStatus> POPToReorderItemStatuses { get; set; }
        public virtual DbSet<POPToReorderSOPLine> POPToReorderSOPLines { get; set; }
        public virtual DbSet<POPToReorderWarehouse> POPToReorderWarehouses { get; set; }
        public virtual DbSet<PSCondOperatorDescriptor> PSCondOperatorDescriptors { get; set; }
        public virtual DbSet<PSCondOperatorType> PSCondOperatorTypes { get; set; }
        public virtual DbSet<PSDisplayField> PSDisplayFields { get; set; }
        public virtual DbSet<PSExpressionLine> PSExpressionLines { get; set; }
        public virtual DbSet<PSFieldDescriptor> PSFieldDescriptors { get; set; }
        public virtual DbSet<PSLogicalOperatorDescriptor> PSLogicalOperatorDescriptors { get; set; }
        public virtual DbSet<PSLogicalOperatorType> PSLogicalOperatorTypes { get; set; }
        public virtual DbSet<PSSearch> PSSearches { get; set; }
        public virtual DbSet<PSSearchField> PSSearchFields { get; set; }
        public virtual DbSet<PayPortGroupDiscVw> PayPortGroupDiscVws { get; set; }
        public virtual DbSet<PayPortItemDiscVw> PayPortItemDiscVws { get; set; }
        public virtual DbSet<PaymentCloudPayNowMessage> PaymentCloudPayNowMessages { get; set; }
        public virtual DbSet<PaymentCloudPaymentStatusType> PaymentCloudPaymentStatusTypes { get; set; }
        public virtual DbSet<PaymentCloudSetting> PaymentCloudSettings { get; set; }
        public virtual DbSet<PaymentInvCredLineType> PaymentInvCredLineTypes { get; set; }
        public virtual DbSet<PaymentInvoiceStatus> PaymentInvoiceStatuses { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<PlanMakeForStock> PlanMakeForStocks { get; set; }
        public virtual DbSet<PlanMpsItem> PlanMpsItems { get; set; }
        public virtual DbSet<PlanMrpDemand> PlanMrpDemands { get; set; }
        public virtual DbSet<PlanMrpException> PlanMrpExceptions { get; set; }
        public virtual DbSet<PlanMrpOpeningStock> PlanMrpOpeningStocks { get; set; }
        public virtual DbSet<PlanMrpRecommendation> PlanMrpRecommendations { get; set; }
        public virtual DbSet<PlanMrpRecommendationsRouting> PlanMrpRecommendationsRoutings { get; set; }
        public virtual DbSet<PlanMrpRecommendationsTag> PlanMrpRecommendationsTags { get; set; }
        public virtual DbSet<PlanMrpReplenishment> PlanMrpReplenishments { get; set; }
        public virtual DbSet<PlanMrpUsageLevel> PlanMrpUsageLevels { get; set; }
        public virtual DbSet<PriceBand> PriceBands { get; set; }
        public virtual DbSet<PriceBandType> PriceBandTypes { get; set; }
        public virtual DbSet<PriceBookSetting> PriceBookSettings { get; set; }
        public virtual DbSet<ProdGroupNominalCode> ProdGroupNominalCodes { get; set; }
        public virtual DbSet<ProdGroupQtyDiscBreak> ProdGroupQtyDiscBreaks { get; set; }
        public virtual DbSet<ProdGroupSearchCat> ProdGroupSearchCats { get; set; }
        public virtual DbSet<ProdGroupSearchVal> ProdGroupSearchVals { get; set; }
        public virtual DbSet<ProductGroup> ProductGroups { get; set; }
        public virtual DbSet<ProductGroupBatchAttribute> ProductGroupBatchAttributes { get; set; }
        public virtual DbSet<ProductGroupDiscount> ProductGroupDiscounts { get; set; }
        public virtual DbSet<ProductGroupUnit> ProductGroupUnits { get; set; }
        public virtual DbSet<Prospect> Prospects { get; set; }
        public virtual DbSet<RTLActiveLock> RTLActiveLocks { get; set; }
        public virtual DbSet<RTLActivityLog> RTLActivityLogs { get; set; }
        public virtual DbSet<RTLBarCode> RTLBarCodes { get; set; }
        public virtual DbSet<RTLBarCodeType> RTLBarCodeTypes { get; set; }
        public virtual DbSet<RTLDeliveryRoute> RTLDeliveryRoutes { get; set; }
        public virtual DbSet<RTLDimensionSet> RTLDimensionSets { get; set; }
        public virtual DbSet<RTLDimensionSetsBreakup> RTLDimensionSetsBreakups { get; set; }
        public virtual DbSet<RTLDimensionType> RTLDimensionTypes { get; set; }
        public virtual DbSet<RTLDimensionsBreakup> RTLDimensionsBreakups { get; set; }
        public virtual DbSet<RTLDispatch> RTLDispatches { get; set; }
        public virtual DbSet<RTLDispatchBreakup> RTLDispatchBreakups { get; set; }
        public virtual DbSet<RTLEmployee> RTLEmployees { get; set; }
        public virtual DbSet<RTLErrorCode> RTLErrorCodes { get; set; }
        public virtual DbSet<RTLExceptionLog> RTLExceptionLogs { get; set; }
        public virtual DbSet<RTLExceptionType> RTLExceptionTypes { get; set; }
        public virtual DbSet<RTLHierarchy> RTLHierarchies { get; set; }
        public virtual DbSet<RTLLevel> RTLLevels { get; set; }
        public virtual DbSet<RTLLocationType> RTLLocationTypes { get; set; }
        public virtual DbSet<RTLMemo> RTLMemos { get; set; }
        public virtual DbSet<RTLNext> RTLNexts { get; set; }
        public virtual DbSet<RTLOperationalStatus> RTLOperationalStatuses { get; set; }
        public virtual DbSet<RTLPoss> RTLPosses { get; set; }
        public virtual DbSet<RTLPrdHierarchy> RTLPrdHierarchies { get; set; }
        public virtual DbSet<RTLPrdLevel> RTLPrdLevels { get; set; }
        public virtual DbSet<RTLPricing> RTLPricings { get; set; }
        public virtual DbSet<RTLPricingBuyer> RTLPricingBuyers { get; set; }
        public virtual DbSet<RTLPricingDefault> RTLPricingDefaults { get; set; }
        public virtual DbSet<RTLPricingDefaultsAllPrice> RTLPricingDefaultsAllPrices { get; set; }
        public virtual DbSet<RTLPricingDefaultsSupplier> RTLPricingDefaultsSuppliers { get; set; }
        public virtual DbSet<RTLPricingHistory> RTLPricingHistories { get; set; }
        public virtual DbSet<RTLPricingLocation> RTLPricingLocations { get; set; }
        public virtual DbSet<RTLPricingPriceTable> RTLPricingPriceTables { get; set; }
        public virtual DbSet<RTLPricingProduct> RTLPricingProducts { get; set; }
        public virtual DbSet<RTLPricingReason> RTLPricingReasons { get; set; }
        public virtual DbSet<RTLPricingRounding> RTLPricingRoundings { get; set; }
        public virtual DbSet<RTLPromoProduct> RTLPromoProducts { get; set; }
        public virtual DbSet<RTLPromoRewardType> RTLPromoRewardTypes { get; set; }
        public virtual DbSet<RTLPromotion> RTLPromotions { get; set; }
        public virtual DbSet<RTLReplenishmentMethod> RTLReplenishmentMethods { get; set; }
        public virtual DbSet<RTLReplenishmentSource> RTLReplenishmentSources { get; set; }
        public virtual DbSet<RTLStockAlternativeItem> RTLStockAlternativeItems { get; set; }
        public virtual DbSet<RTLStockBinItem> RTLStockBinItems { get; set; }
        public virtual DbSet<RTLStockItem> RTLStockItems { get; set; }
        public virtual DbSet<RTLStockItemPrice> RTLStockItemPrices { get; set; }
        public virtual DbSet<RTLStockItemSupplier> RTLStockItemSuppliers { get; set; }
        public virtual DbSet<RTLStockSearchCategory> RTLStockSearchCategories { get; set; }
        public virtual DbSet<RTLStore> RTLStores { get; set; }
        public virtual DbSet<RTLStoreStatus> RTLStoreStatuses { get; set; }
        public virtual DbSet<RTLStoreType> RTLStoreTypes { get; set; }
        public virtual DbSet<RTLSystemSetting> RTLSystemSettings { get; set; }
        public virtual DbSet<RTLTransactionLog> RTLTransactionLogs { get; set; }
        public virtual DbSet<RTLVariantStructure> RTLVariantStructures { get; set; }
        public virtual DbSet<RTLVariantStructuresBreakup> RTLVariantStructuresBreakups { get; set; }
        public virtual DbSet<RepBomCostingAuditTrail> RepBomCostingAuditTrails { get; set; }
        public virtual DbSet<RepBomWorksOrderCosting> RepBomWorksOrderCostings { get; set; }
        public virtual DbSet<RepCostingStockFigure> RepCostingStockFigures { get; set; }
        public virtual DbSet<RepFreeStock> RepFreeStocks { get; set; }
        public virtual DbSet<RepIndentedPartsList> RepIndentedPartsLists { get; set; }
        public virtual DbSet<RepMaximumBuild> RepMaximumBuilds { get; set; }
        public virtual DbSet<RepRequirement> RepRequirements { get; set; }
        public virtual DbSet<RepWoLabel> RepWoLabels { get; set; }
        public virtual DbSet<Repairableitemsview> Repairableitemsviews { get; set; }
        public virtual DbSet<ReportBomComparisonItem> ReportBomComparisonItems { get; set; }
        public virtual DbSet<ReportBomComparisonResult> ReportBomComparisonResults { get; set; }
        public virtual DbSet<ReportBomImplosionItem> ReportBomImplosionItems { get; set; }
        public virtual DbSet<ReportBomImplosionResult> ReportBomImplosionResults { get; set; }
        public virtual DbSet<ReportCompany> ReportCompanies { get; set; }
        public virtual DbSet<ReportExplosionResult> ReportExplosionResults { get; set; }
        public virtual DbSet<ReportExplosionSetting> ReportExplosionSettings { get; set; }
        public virtual DbSet<ReportMaximumBuildItem> ReportMaximumBuildItems { get; set; }
        public virtual DbSet<ReportMaximumBuildResult> ReportMaximumBuildResults { get; set; }
        public virtual DbSet<ReportMaximumBuildWarehouse> ReportMaximumBuildWarehouses { get; set; }
        public virtual DbSet<ReportSession> ReportSessions { get; set; }
        public virtual DbSet<ReportTrialKittingOption> ReportTrialKittingOptions { get; set; }
        public virtual DbSet<ReportTrialKittingResult> ReportTrialKittingResults { get; set; }
        public virtual DbSet<ReportTrialKittingTask> ReportTrialKittingTasks { get; set; }
        public virtual DbSet<ReportTrialKittingWarehouse> ReportTrialKittingWarehouses { get; set; }
        public virtual DbSet<ReportUndoAllocationComponent> ReportUndoAllocationComponents { get; set; }
        public virtual DbSet<ReportUndoAllocationFinishedItem> ReportUndoAllocationFinishedItems { get; set; }
        public virtual DbSet<RequestedDelDateArch> RequestedDelDateArches { get; set; }
        public virtual DbSet<RequestedDeliveryDate> RequestedDeliveryDates { get; set; }
        public virtual DbSet<SABRERAIL_DLP_KPI_GoodsIn> SABRERAIL_DLP_KPI_GoodsIns { get; set; }
        public virtual DbSet<SABRERAIL_KPI_GoodsOut> SABRERAIL_KPI_GoodsOuts { get; set; }
        public virtual DbSet<SABRE_BC_Dry_prep_plan_2014> SABRE_BC_Dry_prep_plan_2014s { get; set; }
        public virtual DbSet<SABRE_BC_Operation> SABRE_BC_Operations { get; set; }
        public virtual DbSet<SABRE_BC_Production_Margin> SABRE_BC_Production_Margins { get; set; }
        public virtual DbSet<SABRE_BC_Repairables_Received> SABRE_BC_Repairables_Receiveds { get; set; }
        public virtual DbSet<SABRE_CMM_Overdue_Order> SABRE_CMM_Overdue_Orders { get; set; }
        public virtual DbSet<SABRE_DLP_12Month_NoSOR> SABRE_DLP_12Month_NoSORs { get; set; }
        public virtual DbSet<SABRE_DLP_12MonthsAboveZero> SABRE_DLP_12MonthsAboveZeros { get; set; }
        public virtual DbSet<SABRE_DLP_1Month_NoSOR> SABRE_DLP_1Month_NoSORs { get; set; }
        public virtual DbSet<SABRE_DLP_2018_2019_PGValue> SABRE_DLP_2018_2019_PGValues { get; set; }
        public virtual DbSet<SABRE_DLP_2018_2019_PMValue> SABRE_DLP_2018_2019_PMValues { get; set; }
        public virtual DbSet<SABRE_DLP_24MonthUse> SABRE_DLP_24MonthUses { get; set; }
        public virtual DbSet<SABRE_DLP_36MonthUse> SABRE_DLP_36MonthUses { get; set; }
        public virtual DbSet<SABRE_DLP_3Month_NoSOR> SABRE_DLP_3Month_NoSORs { get; set; }
        public virtual DbSet<SABRE_DLP_48MonthUse> SABRE_DLP_48MonthUses { get; set; }
        public virtual DbSet<SABRE_DLP_A_PARENT> SABRE_DLP_A_PARENTs { get; set; }
        public virtual DbSet<SABRE_DLP_Accounts_PODelivery> SABRE_DLP_Accounts_PODeliveries { get; set; }
        public virtual DbSet<SABRE_DLP_ActiveStocktake> SABRE_DLP_ActiveStocktakes { get; set; }
        public virtual DbSet<SABRE_DLP_BOMComponent> SABRE_DLP_BOMComponents { get; set; }
        public virtual DbSet<SABRE_DLP_BOMOperationTime> SABRE_DLP_BOMOperationTimes { get; set; }
        public virtual DbSet<SABRE_DLP_BOM_WHEREUSE> SABRE_DLP_BOM_WHEREUSEs { get; set; }
        public virtual DbSet<SABRE_DLP_Below_ROL> SABRE_DLP_Below_ROLs { get; set; }
        public virtual DbSet<SABRE_DLP_BomComp> SABRE_DLP_BomComps { get; set; }
        public virtual DbSet<SABRE_DLP_BomRepMissMATCH> SABRE_DLP_BomRepMissMATCHes { get; set; }
        public virtual DbSet<SABRE_DLP_Bom_Missing_Component> SABRE_DLP_Bom_Missing_Components { get; set; }
        public virtual DbSet<SABRE_DLP_BookingInSubContact> SABRE_DLP_BookingInSubContacts { get; set; }
        public virtual DbSet<SABRE_DLP_BringForward> SABRE_DLP_BringForwards { get; set; }
        public virtual DbSet<SABRE_DLP_BulkIssueReport> SABRE_DLP_BulkIssueReports { get; set; }
        public virtual DbSet<SABRE_DLP_COSHH_Usage> SABRE_DLP_COSHH_Usages { get; set; }
        public virtual DbSet<SABRE_DLP_CatList> SABRE_DLP_CatLists { get; set; }
        public virtual DbSet<SABRE_DLP_CheckedOutBom> SABRE_DLP_CheckedOutBoms { get; set; }
        public virtual DbSet<SABRE_DLP_Countsheet_Variance_Value> SABRE_DLP_Countsheet_Variance_Values { get; set; }
        public virtual DbSet<SABRE_DLP_CycleCount> SABRE_DLP_CycleCounts { get; set; }
        public virtual DbSet<SABRE_DLP_DailyTransaction> SABRE_DLP_DailyTransactions { get; set; }
        public virtual DbSet<SABRE_DLP_Despatch> SABRE_DLP_Despatches { get; set; }
        public virtual DbSet<SABRE_DLP_DespatchesByCu> SABRE_DLP_DespatchesByCus { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportActiveSupplier> SABRE_DLP_DownloadReportActiveSuppliers { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportBomComponent> SABRE_DLP_DownloadReportBomComponents { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportBomItem> SABRE_DLP_DownloadReportBomItems { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportBomTiming> SABRE_DLP_DownloadReportBomTimings { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportDespatch> SABRE_DLP_DownloadReportDespatches { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportDistributorKanBan> SABRE_DLP_DownloadReportDistributorKanBans { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportFGUsage> SABRE_DLP_DownloadReportFGUsages { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportInspectionTransfer> SABRE_DLP_DownloadReportInspectionTransfers { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportKANBAN> SABRE_DLP_DownloadReportKANBANs { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportNonFGUsage> SABRE_DLP_DownloadReportNonFGUsages { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportPastWorksOrder> SABRE_DLP_DownloadReportPastWorksOrders { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportSOR_WO> SABRE_DLP_DownloadReportSOR_WOs { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportStockList> SABRE_DLP_DownloadReportStockLists { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportStockList_Basic> SABRE_DLP_DownloadReportStockList_Basics { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportSupplierSpend> SABRE_DLP_DownloadReportSupplierSpends { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportUsageGoodsOut> SABRE_DLP_DownloadReportUsageGoodsOuts { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportUsagePOIn> SABRE_DLP_DownloadReportUsagePOIns { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportUsageStoresIssue> SABRE_DLP_DownloadReportUsageStoresIssues { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportUsageWOIssue> SABRE_DLP_DownloadReportUsageWOIssues { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportWarehouse> SABRE_DLP_DownloadReportWarehouses { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReportWarehouseMain> SABRE_DLP_DownloadReportWarehouseMains { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReport_Short> SABRE_DLP_DownloadReport_Shorts { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReport_Shorts_TotalComponent> SABRE_DLP_DownloadReport_Shorts_TotalComponents { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReport_StockitemsCreatedDate> SABRE_DLP_DownloadReport_StockitemsCreatedDates { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReport_TotalBom> SABRE_DLP_DownloadReport_TotalBoms { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReport_WOExplosion> SABRE_DLP_DownloadReport_WOExplosions { get; set; }
        public virtual DbSet<SABRE_DLP_DownloadReport_WOExplosion_TotalComponent> SABRE_DLP_DownloadReport_WOExplosion_TotalComponents { get; set; }
        public virtual DbSet<SABRE_DLP_Dry_prep_plan_2015> SABRE_DLP_Dry_prep_plan_2015s { get; set; }
        public virtual DbSet<SABRE_DLP_ExpediteData_Old_2> SABRE_DLP_ExpediteData_Old_2s { get; set; }
        public virtual DbSet<SABRE_DLP_ExpediteData_old> SABRE_DLP_ExpediteData_olds { get; set; }
        public virtual DbSet<SABRE_DLP_ExpediteDatum> SABRE_DLP_ExpediteData { get; set; }
        public virtual DbSet<SABRE_DLP_ExpediteRole> SABRE_DLP_ExpediteRoles { get; set; }
        public virtual DbSet<SABRE_DLP_FACTCON_ST_2014> SABRE_DLP_FACTCON_ST_2014s { get; set; }
        public virtual DbSet<SABRE_DLP_FG_Usage> SABRE_DLP_FG_Usages { get; set; }
        public virtual DbSet<SABRE_DLP_FactCon> SABRE_DLP_FactCons { get; set; }
        public virtual DbSet<SABRE_DLP_ForcastAcc> SABRE_DLP_ForcastAccs { get; set; }
        public virtual DbSet<SABRE_DLP_ForcastDetail> SABRE_DLP_ForcastDetails { get; set; }
        public virtual DbSet<SABRE_DLP_ForecastStockList> SABRE_DLP_ForecastStockLists { get; set; }
        public virtual DbSet<SABRE_DLP_INSPECTION_STK> SABRE_DLP_INSPECTION_STKs { get; set; }
        public virtual DbSet<SABRE_DLP_Koni070> SABRE_DLP_Koni070s { get; set; }
        public virtual DbSet<SABRE_DLP_LAST360DAY> SABRE_DLP_LAST360DAYs { get; set; }
        public virtual DbSet<SABRE_DLP_LAST60DAY> SABRE_DLP_LAST60DAYs { get; set; }
        public virtual DbSet<SABRE_DLP_LASTTANSACTION> SABRE_DLP_LASTTANSACTIONs { get; set; }
        public virtual DbSet<SABRE_DLP_LASTTRANSACTIONQA> SABRE_DLP_LASTTRANSACTIONQAs { get; set; }
        public virtual DbSet<SABRE_DLP_LastCost> SABRE_DLP_LastCosts { get; set; }
        public virtual DbSet<SABRE_DLP_LastTransactionIN_GurneyWay> SABRE_DLP_LastTransactionIN_GurneyWays { get; set; }
        public virtual DbSet<SABRE_DLP_LeadTime> SABRE_DLP_LeadTimes { get; set; }
        public virtual DbSet<SABRE_DLP_LevelCalc> SABRE_DLP_LevelCalcs { get; set; }
        public virtual DbSet<SABRE_DLP_ListPriceBySupplier> SABRE_DLP_ListPriceBySuppliers { get; set; }
        public virtual DbSet<SABRE_DLP_ListPriceReview> SABRE_DLP_ListPriceReviews { get; set; }
        public virtual DbSet<SABRE_DLP_LiveDelivery> SABRE_DLP_LiveDeliveries { get; set; }
        public virtual DbSet<SABRE_DLP_LivePlan> SABRE_DLP_LivePlans { get; set; }
        public virtual DbSet<SABRE_DLP_LivePlan_old2> SABRE_DLP_LivePlan_old2s { get; set; }
        public virtual DbSet<SABRE_DLP_LocationCheck> SABRE_DLP_LocationChecks { get; set; }
        public virtual DbSet<SABRE_DLP_MRP> SABRE_DLP_MRPs { get; set; }
        public virtual DbSet<SABRE_DLP_MRPMakeRecomendation> SABRE_DLP_MRPMakeRecomendations { get; set; }
        public virtual DbSet<SABRE_DLP_MRPReccomendation> SABRE_DLP_MRPReccomendations { get; set; }
        public virtual DbSet<SABRE_DLP_Max_TransactionHistory> SABRE_DLP_Max_TransactionHistories { get; set; }
        public virtual DbSet<SABRE_DLP_ORDERS_KPI> SABRE_DLP_ORDERS_KPIs { get; set; }
        public virtual DbSet<SABRE_DLP_OVERDUEWO_WITHPRJ> SABRE_DLP_OVERDUEWO_WITHPRJs { get; set; }
        public virtual DbSet<SABRE_DLP_OrderLine> SABRE_DLP_OrderLines { get; set; }
        public virtual DbSet<SABRE_DLP_OrderLines_Total> SABRE_DLP_OrderLines_Totals { get; set; }
        public virtual DbSet<SABRE_DLP_OrdersCreated_Total> SABRE_DLP_OrdersCreated_Totals { get; set; }
        public virtual DbSet<SABRE_DLP_OrdersRasied> SABRE_DLP_OrdersRasieds { get; set; }
        public virtual DbSet<SABRE_DLP_OutputDatum> SABRE_DLP_OutputData { get; set; }
        public virtual DbSet<SABRE_DLP_OverduePO> SABRE_DLP_OverduePOs { get; set; }
        public virtual DbSet<SABRE_DLP_OverdueWO_SOR_on_Hold> SABRE_DLP_OverdueWO_SOR_on_Holds { get; set; }
        public virtual DbSet<SABRE_DLP_OverdueWorksOrder> SABRE_DLP_OverdueWorksOrders { get; set; }
        public virtual DbSet<SABRE_DLP_Overdue_Order> SABRE_DLP_Overdue_Orders { get; set; }
        public virtual DbSet<SABRE_DLP_OverstockReport> SABRE_DLP_OverstockReports { get; set; }
        public virtual DbSet<SABRE_DLP_PARTS_TO_SUPPLIER> SABRE_DLP_PARTS_TO_SUPPLIERs { get; set; }
        public virtual DbSet<SABRE_DLP_PBA_SlowStock> SABRE_DLP_PBA_SlowStocks { get; set; }
        public virtual DbSet<SABRE_DLP_PERIOD2> SABRE_DLP_PERIOD2s { get; set; }
        public virtual DbSet<SABRE_DLP_PERIOD3> SABRE_DLP_PERIOD3s { get; set; }
        public virtual DbSet<SABRE_DLP_PERIOD4> SABRE_DLP_PERIOD4s { get; set; }
        public virtual DbSet<SABRE_DLP_PERIOD5> SABRE_DLP_PERIOD5s { get; set; }
        public virtual DbSet<SABRE_DLP_PERIOD6> SABRE_DLP_PERIOD6s { get; set; }
        public virtual DbSet<SABRE_DLP_POPLinesUnitPrice> SABRE_DLP_POPLinesUnitPrices { get; set; }
        public virtual DbSet<SABRE_DLP_PO_Due> SABRE_DLP_PO_Dues { get; set; }
        public virtual DbSet<SABRE_DLP_PO_SCHEDULE> SABRE_DLP_PO_SCHEDULEs { get; set; }
        public virtual DbSet<SABRE_DLP_PartShortages_1> SABRE_DLP_PartShortages_1s { get; set; }
        public virtual DbSet<SABRE_DLP_Part_to_WO> SABRE_DLP_Part_to_WOs { get; set; }
        public virtual DbSet<SABRE_DLP_ProdPlan_Dev> SABRE_DLP_ProdPlan_Devs { get; set; }
        public virtual DbSet<SABRE_DLP_ProductGroupActiveLine> SABRE_DLP_ProductGroupActiveLines { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlanJan2014> SABRE_DLP_ProductionPlanJan2014s { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlanV3> SABRE_DLP_ProductionPlanV3s { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlanV4> SABRE_DLP_ProductionPlanV4s { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlan_CAU> SABRE_DLP_ProductionPlan_CAUs { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlan_Damper> SABRE_DLP_ProductionPlan_Dampers { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlan_Distributor> SABRE_DLP_ProductionPlan_Distributors { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlan_FGDISTRIBUTOR> SABRE_DLP_ProductionPlan_FGDISTRIBUTORs { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlan_FGVALVE> SABRE_DLP_ProductionPlan_FGVALVEs { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlan_OTHERBRAKE> SABRE_DLP_ProductionPlan_OTHERBRAKEs { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlan_Reservoir> SABRE_DLP_ProductionPlan_Reservoirs { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlan_SlackAdjuster> SABRE_DLP_ProductionPlan_SlackAdjusters { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlan_Valf> SABRE_DLP_ProductionPlan_Valves { get; set; }
        public virtual DbSet<SABRE_DLP_ProductionPlan_WithCosting> SABRE_DLP_ProductionPlan_WithCostings { get; set; }
        public virtual DbSet<SABRE_DLP_QtyOnOrder> SABRE_DLP_QtyOnOrders { get; set; }
        public virtual DbSet<SABRE_DLP_Quarantine> SABRE_DLP_Quarantines { get; set; }
        public virtual DbSet<SABRE_DLP_ReorderReport24> SABRE_DLP_ReorderReport24s { get; set; }
        public virtual DbSet<SABRE_DLP_ReorderReportAllWarehouse> SABRE_DLP_ReorderReportAllWarehouses { get; set; }
        public virtual DbSet<SABRE_DLP_ReorderReportConsignment> SABRE_DLP_ReorderReportConsignments { get; set; }
        public virtual DbSet<SABRE_DLP_ReorderReportE> SABRE_DLP_ReorderReportEs { get; set; }
        public virtual DbSet<SABRE_DLP_ReorderReportE_old> SABRE_DLP_ReorderReportE_olds { get; set; }
        public virtual DbSet<SABRE_DLP_ReorderReportModified> SABRE_DLP_ReorderReportModifieds { get; set; }
        public virtual DbSet<SABRE_DLP_ReorderReport_NoSORUsage> SABRE_DLP_ReorderReport_NoSORUsages { get; set; }
        public virtual DbSet<SABRE_DLP_RepFreeStock> SABRE_DLP_RepFreeStocks { get; set; }
        public virtual DbSet<SABRE_DLP_SOPAwaitingInvoice> SABRE_DLP_SOPAwaitingInvoices { get; set; }
        public virtual DbSet<SABRE_DLP_SOPLinesUnitPrice> SABRE_DLP_SOPLinesUnitPrices { get; set; }
        public virtual DbSet<SABRE_DLP_SOR_WO_Qty> SABRE_DLP_SOR_WO_Qtys { get; set; }
        public virtual DbSet<SABRE_DLP_SOR_Without_WO> SABRE_DLP_SOR_Without_WOs { get; set; }
        public virtual DbSet<SABRE_DLP_SUPPLIER_LINE> SABRE_DLP_SUPPLIER_LINEs { get; set; }
        public virtual DbSet<SABRE_DLP_SUPPLIER_ORDER> SABRE_DLP_SUPPLIER_ORDERs { get; set; }
        public virtual DbSet<SABRE_DLP_SabreParts_Supplier_Missmatch> SABRE_DLP_SabreParts_Supplier_Missmatches { get; set; }
        public virtual DbSet<SABRE_DLP_SalesOrderBook_V2> SABRE_DLP_SalesOrderBook_V2s { get; set; }
        public virtual DbSet<SABRE_DLP_SalesOrderLines_KPI> SABRE_DLP_SalesOrderLines_KPIs { get; set; }
        public virtual DbSet<SABRE_DLP_SalesOrdersCosting> SABRE_DLP_SalesOrdersCostings { get; set; }
        public virtual DbSet<SABRE_DLP_SlowMovingStock_2> SABRE_DLP_SlowMovingStock_2s { get; set; }
        public virtual DbSet<SABRE_DLP_SlowStock> SABRE_DLP_SlowStocks { get; set; }
        public virtual DbSet<SABRE_DLP_SlowstockLocation> SABRE_DLP_SlowstockLocations { get; set; }
        public virtual DbSet<SABRE_DLP_SparesPlan> SABRE_DLP_SparesPlans { get; set; }
        public virtual DbSet<SABRE_DLP_StockCal> SABRE_DLP_StockCals { get; set; }
        public virtual DbSet<SABRE_DLP_StockReport_Cabin_4_SS> SABRE_DLP_StockReport_Cabin_4_SSes { get; set; }
        public virtual DbSet<SABRE_DLP_StockReport_GURNEY_WAY> SABRE_DLP_StockReport_GURNEY_WAYs { get; set; }
        public virtual DbSet<SABRE_DLP_Suppler_Delivery> SABRE_DLP_Suppler_Deliverys { get; set; }
        public virtual DbSet<SABRE_DLP_SupplierOverDue_KPI> SABRE_DLP_SupplierOverDue_KPIs { get; set; }
        public virtual DbSet<SABRE_DLP_SupplierReport12MTotal> SABRE_DLP_SupplierReport12MTotals { get; set; }
        public virtual DbSet<SABRE_DLP_SupplierReport12MonthPO> SABRE_DLP_SupplierReport12MonthPOs { get; set; }
        public virtual DbSet<SABRE_DLP_SupplierReportLast12Month> SABRE_DLP_SupplierReportLast12Months { get; set; }
        public virtual DbSet<SABRE_DLP_Supplier_Deliveries_Total> SABRE_DLP_Supplier_Deliveries_Totals { get; set; }
        public virtual DbSet<SABRE_DLP_Supplier_Late> SABRE_DLP_Supplier_Lates { get; set; }
        public virtual DbSet<SABRE_DLP_Supplier_Lates_Total> SABRE_DLP_Supplier_Lates_Totals { get; set; }
        public virtual DbSet<SABRE_DLP_Supplier_Performance_Monitor> SABRE_DLP_Supplier_Performance_Monitors { get; set; }
        public virtual DbSet<SABRE_DLP_Suppliers_Orders_KPI> SABRE_DLP_Suppliers_Orders_KPIs { get; set; }
        public virtual DbSet<SABRE_DLP_Transaction_History> SABRE_DLP_Transaction_Histories { get; set; }
        public virtual DbSet<SABRE_DLP_UnsatisfiedLine> SABRE_DLP_UnsatisfiedLines { get; set; }
        public virtual DbSet<SABRE_DLP_Unspecified> SABRE_DLP_Unspecifieds { get; set; }
        public virtual DbSet<SABRE_DLP_Use_with_stk_qty> SABRE_DLP_Use_with_stk_qties { get; set; }
        public virtual DbSet<SABRE_DLP_VTGDesptach> SABRE_DLP_VTGDesptaches { get; set; }
        public virtual DbSet<SABRE_DLP_VTGLivePlan> SABRE_DLP_VTGLivePlans { get; set; }
        public virtual DbSet<SABRE_DLP_VTG_Download_PT> SABRE_DLP_VTG_Download_PTs { get; set; }
        public virtual DbSet<SABRE_DLP_VTG_Download_PTSum> SABRE_DLP_VTG_Download_PTSums { get; set; }
        public virtual DbSet<SABRE_DLP_VTG_Download_WIPSum> SABRE_DLP_VTG_Download_WIPSums { get; set; }
        public virtual DbSet<SABRE_DLP_VTG_Warehouse> SABRE_DLP_VTG_Warehouses { get; set; }
        public virtual DbSet<SABRE_DLP_VTG_Warehouses_Old> SABRE_DLP_VTG_Warehouses_Olds { get; set; }
        public virtual DbSet<SABRE_DLP_WO_Expedite> SABRE_DLP_WO_Expedites { get; set; }
        public virtual DbSet<SABRE_DLP_WO_SO_NotMatchedEndDate> SABRE_DLP_WO_SO_NotMatchedEndDates { get; set; }
        public virtual DbSet<SABRE_DLP_ZeroMovement> SABRE_DLP_ZeroMovements { get; set; }
        public virtual DbSet<SABRE_DLP_ZeroValueStock> SABRE_DLP_ZeroValueStocks { get; set; }
        public virtual DbSet<SABRE_DLP_vw_24MonthUse> SABRE_DLP_vw_24MonthUses { get; set; }
        public virtual DbSet<SABRE_DLP_vw_36MonthUse> SABRE_DLP_vw_36MonthUses { get; set; }
        public virtual DbSet<SABRE_DLP_vw_60MonthUse> SABRE_DLP_vw_60MonthUses { get; set; }
        public virtual DbSet<SABRE_DLP_vw_StockItemLastINTransfer> SABRE_DLP_vw_StockItemLastINTransfers { get; set; }
        public virtual DbSet<SABRE_ProductionPlan_FGResTank> SABRE_ProductionPlan_FGResTanks { get; set; }
        public virtual DbSet<SABRE_RAIL_DLP_SalesForecastDespatch_Month> SABRE_RAIL_DLP_SalesForecastDespatch_Months { get; set; }
        public virtual DbSet<SiWorksOrder> SiWorksOrders { get; set; }
        public virtual DbSet<SLAccountInformationView> SLAccountInformationViews { get; set; }
        public virtual DbSet<SLAccountMemo> SLAccountMemos { get; set; }
        public virtual DbSet<SLAgePeriodBalanceView> SLAgePeriodBalanceViews { get; set; }
        public virtual DbSet<SLAllocHeaderPostedEntryVw> SLAllocHeaderPostedEntryVws { get; set; }
        public virtual DbSet<SLAllocationHeader> SLAllocationHeaders { get; set; }
        public virtual DbSet<SLAllocationTran> SLAllocationTrans { get; set; }
        public virtual DbSet<SLAllocationType> SLAllocationTypes { get; set; }
        public virtual DbSet<SLAllocationsForInvoiceView> SLAllocationsForInvoiceViews { get; set; }
        public virtual DbSet<SLAnalysisPeriod> SLAnalysisPeriods { get; set; }
        public virtual DbSet<SLCreditNoteInvoiceNumber> SLCreditNoteInvoiceNumbers { get; set; }
        public virtual DbSet<SLCustomerAccount> SLCustomerAccounts { get; set; }
        public virtual DbSet<SLCustomerAccountX> SLCustomerAccountXes { get; set; }
        public virtual DbSet<SLCustomerAlert> SLCustomerAlerts { get; set; }
        public virtual DbSet<SLCustomerCardReference> SLCustomerCardReferences { get; set; }
        public virtual DbSet<SLCustomerContact> SLCustomerContacts { get; set; }
        public virtual DbSet<SLCustomerContactDefaultsVw> SLCustomerContactDefaultsVws { get; set; }
        public virtual DbSet<SLCustomerContactRole> SLCustomerContactRoles { get; set; }
        public virtual DbSet<SLCustomerContactValue> SLCustomerContactValues { get; set; }
        public virtual DbSet<SLCustomerDocument> SLCustomerDocuments { get; set; }
        public virtual DbSet<SLCustomerLocation> SLCustomerLocations { get; set; }
        public virtual DbSet<SLCustomerPeriodValue> SLCustomerPeriodValues { get; set; }
        public virtual DbSet<SLCustomerPriceMapping> SLCustomerPriceMappings { get; set; }
        public virtual DbSet<SLCustomerSyncStatusType> SLCustomerSyncStatusTypes { get; set; }
        public virtual DbSet<SLCustomerTurnoverView> SLCustomerTurnoverViews { get; set; }
        public virtual DbSet<SLCustomerYearValue> SLCustomerYearValues { get; set; }
        public virtual DbSet<SLDateToUseForAgeing> SLDateToUseForAgeings { get; set; }
        public virtual DbSet<SLDocumentMessage> SLDocumentMessages { get; set; }
        public virtual DbSet<SLDocumentMessageUsedFor> SLDocumentMessageUsedFors { get; set; }
        public virtual DbSet<SLFinanceCharge> SLFinanceCharges { get; set; }
        public virtual DbSet<SLHistRevalAllocationTran> SLHistRevalAllocationTrans { get; set; }
        public virtual DbSet<SLHistoricalCustomerTran> SLHistoricalCustomerTrans { get; set; }
        public virtual DbSet<SLInvoicesForOrdersView> SLInvoicesForOrdersViews { get; set; }
        public virtual DbSet<SLLiveAndHistRevAllocTranView> SLLiveAndHistRevAllocTranViews { get; set; }
        public virtual DbSet<SLOfficeType> SLOfficeTypes { get; set; }
        public virtual DbSet<SLPostAndHistCustomerTranView> SLPostAndHistCustomerTranViews { get; set; }
        public virtual DbSet<SLPostedCustomerTran> SLPostedCustomerTrans { get; set; }
        public virtual DbSet<SLReportMessage> SLReportMessages { get; set; }
        public virtual DbSet<SLReportMessageType> SLReportMessageTypes { get; set; }
        public virtual DbSet<SLRevalAllocationTran> SLRevalAllocationTrans { get; set; }
        public virtual DbSet<SLSetting> SLSettings { get; set; }
        public virtual DbSet<SLTotalOverdueBalancesView> SLTotalOverdueBalancesViews { get; set; }
        public virtual DbSet<SLTranMemo> SLTranMemos { get; set; }
        public virtual DbSet<SLTranToShowOnStatement> SLTranToShowOnStatements { get; set; }
        public virtual DbSet<SLTransactionSummary> SLTransactionSummaries { get; set; }
        public virtual DbSet<SOBackToBackPOView> SOBackToBackPOViews { get; set; }
        public virtual DbSet<SOPAdditionalCharge> SOPAdditionalCharges { get; set; }
        public virtual DbSet<SOPAdditionalChargeView> SOPAdditionalChargeViews { get; set; }
        public virtual DbSet<SOPAllocationLine> SOPAllocationLines { get; set; }
        public virtual DbSet<SOPAnalysisCode> SOPAnalysisCodes { get; set; }
        public virtual DbSet<SOPCancelledLine> SOPCancelledLines { get; set; }
        public virtual DbSet<SOPCancelledLineArch> SOPCancelledLineArches { get; set; }
        public virtual DbSet<SOPCreditCISRCText> SOPCreditCISRCTexts { get; set; }
        public virtual DbSet<SOPDespatchLineProfitAnalysis> SOPDespatchLineProfitAnalyses { get; set; }
        public virtual DbSet<SOPDespatchNoteNumber> SOPDespatchNoteNumbers { get; set; }
        public virtual DbSet<SOPDespatchReceipt> SOPDespatchReceipts { get; set; }
        public virtual DbSet<SOPDespatchReceiptLine> SOPDespatchReceiptLines { get; set; }
        public virtual DbSet<SOPDespatchReceiptLineShortfall> SOPDespatchReceiptLineShortfalls { get; set; }
        public virtual DbSet<SOPDespatchReceiptType> SOPDespatchReceiptTypes { get; set; }
        public virtual DbSet<SOPDocDelAddress> SOPDocDelAddresses { get; set; }
        public virtual DbSet<SOPDocDelAddressArch> SOPDocDelAddressArches { get; set; }
        public virtual DbSet<SOPIntrastatVw> SOPIntrastatVws { get; set; }
        public virtual DbSet<SOPInvCredAddress> SOPInvCredAddresses { get; set; }
        public virtual DbSet<SOPInvCredAddressArch> SOPInvCredAddressArches { get; set; }
        public virtual DbSet<SOPInvCredDelAddrArch> SOPInvCredDelAddrArches { get; set; }
        public virtual DbSet<SOPInvCredDelAddress> SOPInvCredDelAddresses { get; set; }
        public virtual DbSet<SOPInvCredForPaymentMethodView> SOPInvCredForPaymentMethodViews { get; set; }
        public virtual DbSet<SOPInvCredNomItemArch> SOPInvCredNomItemArches { get; set; }
        public virtual DbSet<SOPInvCredNominalItem> SOPInvCredNominalItems { get; set; }
        public virtual DbSet<SOPInvCredTaxItem> SOPInvCredTaxItems { get; set; }
        public virtual DbSet<SOPInvCredTaxItemArch> SOPInvCredTaxItemArches { get; set; }
        public virtual DbSet<SOPInvCreditLineArch> SOPInvCreditLineArches { get; set; }
        public virtual DbSet<SOPInvoiceCISRCText> SOPInvoiceCISRCTexts { get; set; }
        public virtual DbSet<SOPInvoiceCredit> SOPInvoiceCredits { get; set; }
        public virtual DbSet<SOPInvoiceCreditArch> SOPInvoiceCreditArches { get; set; }
        public virtual DbSet<SOPInvoiceCreditLine> SOPInvoiceCreditLines { get; set; }
        public virtual DbSet<SOPInvoiceCreditType> SOPInvoiceCreditTypes { get; set; }
        public virtual DbSet<SOPInvoiceLayout> SOPInvoiceLayouts { get; set; }
        public virtual DbSet<SOPMessageLine> SOPMessageLines { get; set; }
        public virtual DbSet<SOPOrdCommentForDspNte> SOPOrdCommentForDspNtes { get; set; }
        public virtual DbSet<SOPOrderEntryType> SOPOrderEntryTypes { get; set; }
        public virtual DbSet<SOPOrderFulfilmentMethod> SOPOrderFulfilmentMethods { get; set; }
        public virtual DbSet<SOPOrderLineProfitAnalysis> SOPOrderLineProfitAnalyses { get; set; }
        public virtual DbSet<SOPOrderLinesDespatchView> SOPOrderLinesDespatchViews { get; set; }
        public virtual DbSet<SOPOrderLinesView> SOPOrderLinesViews { get; set; }
        public virtual DbSet<SOPOrderMemo> SOPOrderMemos { get; set; }
        public virtual DbSet<SOPOrderNumber> SOPOrderNumbers { get; set; }
        public virtual DbSet<SOPOrderProfitAnalysis> SOPOrderProfitAnalyses { get; set; }
        public virtual DbSet<SOPOrderReturn> SOPOrderReturns { get; set; }
        public virtual DbSet<SOPOrderReturnArch> SOPOrderReturnArches { get; set; }
        public virtual DbSet<SOPOrderReturnDocumentLink> SOPOrderReturnDocumentLinks { get; set; }
        public virtual DbSet<SOPOrderReturnLine> SOPOrderReturnLines { get; set; }
        public virtual DbSet<SOPOrderReturnLineArch> SOPOrderReturnLineArches { get; set; }
        public virtual DbSet<SOPOrderReturnLineX> SOPOrderReturnLineXes { get; set; }
        public virtual DbSet<SOPOrderReturnType> SOPOrderReturnTypes { get; set; }
        public virtual DbSet<SOPOrderReturnX> SOPOrderReturnXes { get; set; }
        public virtual DbSet<SOPOrderView> SOPOrderViews { get; set; }
        public virtual DbSet<SOPOrdersCurrentValuesView> SOPOrdersCurrentValuesViews { get; set; }
        public virtual DbSet<SOPOrdersView> SOPOrdersViews { get; set; }
        public virtual DbSet<SOPPartialAllocationType> SOPPartialAllocationTypes { get; set; }
        public virtual DbSet<SOPPayment> SOPPayments { get; set; }
        public virtual DbSet<SOPPaymentArch> SOPPaymentArches { get; set; }
        public virtual DbSet<SOPPaymentInvCredLine> SOPPaymentInvCredLines { get; set; }
        public virtual DbSet<SOPPaymentInvCredLineArch> SOPPaymentInvCredLineArches { get; set; }
        public virtual DbSet<SOPPaymentMethod> SOPPaymentMethods { get; set; }
        public virtual DbSet<SOPPreReceiptAlloc> SOPPreReceiptAllocs { get; set; }
        public virtual DbSet<SOPPreferredItem> SOPPreferredItems { get; set; }
        public virtual DbSet<SOPPrintEUZeroRatedSalesOption> SOPPrintEUZeroRatedSalesOptions { get; set; }
        public virtual DbSet<SOPProductsPurchasedView> SOPProductsPurchasedViews { get; set; }
        public virtual DbSet<SOPProformaNumber> SOPProformaNumbers { get; set; }
        public virtual DbSet<SOPProspectQuoteSettingView> SOPProspectQuoteSettingViews { get; set; }
        public virtual DbSet<SOPQuotationLinesView> SOPQuotationLinesViews { get; set; }
        public virtual DbSet<SOPQuotationView> SOPQuotationViews { get; set; }
        public virtual DbSet<SOPQuotationsView> SOPQuotationsViews { get; set; }
        public virtual DbSet<SOPQuoteNumber> SOPQuoteNumbers { get; set; }
        public virtual DbSet<SOPRCInvoiceOption> SOPRCInvoiceOptions { get; set; }
        public virtual DbSet<SOPRepeatOrderSchedule> SOPRepeatOrderSchedules { get; set; }
        public virtual DbSet<SOPRepeatOrderType> SOPRepeatOrderTypes { get; set; }
        public virtual DbSet<SOPReturnNumber> SOPReturnNumbers { get; set; }
        public virtual DbSet<SOPSetting> SOPSettings { get; set; }
        public virtual DbSet<SOPStandardItemLink> SOPStandardItemLinks { get; set; }
        public virtual DbSet<SOPStandardItemLinkArch> SOPStandardItemLinkArches { get; set; }
        public virtual DbSet<SOPTemplateNumber> SOPTemplateNumbers { get; set; }
        public virtual DbSet<SOPUser> SOPUsers { get; set; }
        public virtual DbSet<SOPUserPermission> SOPUserPermissions { get; set; }
        public virtual DbSet<STItemAlternativesView> STItemAlternativesViews { get; set; }
        public virtual DbSet<STItemDetailsView> STItemDetailsViews { get; set; }
        public virtual DbSet<STItemLocationsView> STItemLocationsViews { get; set; }
        public virtual DbSet<STItemSuppliersView> STItemSuppliersViews { get; set; }
        public virtual DbSet<STKAutoGenerateOptionType> STKAutoGenerateOptionTypes { get; set; }
        public virtual DbSet<STKAutoGenerateSeparator> STKAutoGenerateSeparators { get; set; }
        public virtual DbSet<STKBinItemPrimaryAllocationPriorityView> STKBinItemPrimaryAllocationPriorityViews { get; set; }
        public virtual DbSet<STKCountSheetItemView> STKCountSheetItemViews { get; set; }
        public virtual DbSet<STKDiscrepancyStatus> STKDiscrepancyStatuses { get; set; }
        public virtual DbSet<STKFulfilmentSequenceType> STKFulfilmentSequenceTypes { get; set; }
        public virtual DbSet<STKItemsNotLinkedToPriceBandView> STKItemsNotLinkedToPriceBandViews { get; set; }
        public virtual DbSet<STKLabelPrintingOptionType> STKLabelPrintingOptionTypes { get; set; }
        public virtual DbSet<STKProductStockItemSupplierView> STKProductStockItemSupplierViews { get; set; }
        public virtual DbSet<STKShelfLifeType> STKShelfLifeTypes { get; set; }
        public virtual DbSet<STKStockItemBalancesView> STKStockItemBalancesViews { get; set; }
        public virtual DbSet<STKStockItemView> STKStockItemViews { get; set; }
        public virtual DbSet<STKStockTakeItemView> STKStockTakeItemViews { get; set; }
        public virtual DbSet<STKStocktakeCriteriaTemplate> STKStocktakeCriteriaTemplates { get; set; }
        public virtual DbSet<STKTraceItemBatchAttribute> STKTraceItemBatchAttributes { get; set; }
        public virtual DbSet<STKWorkspaceStockItem> STKWorkspaceStockItems { get; set; }
        public virtual DbSet<STPricesForStockItemView> STPricesForStockItemViews { get; set; }
        public virtual DbSet<SYSAccountMemoType> SYSAccountMemoTypes { get; set; }
        public virtual DbSet<SYSAccountStatus> SYSAccountStatuses { get; set; }
        public virtual DbSet<SYSAccountType> SYSAccountTypes { get; set; }
        public virtual DbSet<SYSAccountingModulePermiss> SYSAccountingModulePermisses { get; set; }
        public virtual DbSet<SYSAccountingPeriod> SYSAccountingPeriods { get; set; }
        public virtual DbSet<SYSAccountingPeriodPermiss> SYSAccountingPeriodPermisses { get; set; }
        public virtual DbSet<SYSAccountingPeriodValidation> SYSAccountingPeriodValidations { get; set; }
        public virtual DbSet<SYSActiveLock> SYSActiveLocks { get; set; }
        public virtual DbSet<SYSAddressContactUse> SYSAddressContactUses { get; set; }
        public virtual DbSet<SYSAgeingPeriod> SYSAgeingPeriods { get; set; }
        public virtual DbSet<SYSAuditLogDetail> SYSAuditLogDetails { get; set; }
        public virtual DbSet<SYSAuditLogHeader> SYSAuditLogHeaders { get; set; }
        public virtual DbSet<SYSAuditLogOperation> SYSAuditLogOperations { get; set; }
        public virtual DbSet<SYSAuditLogType> SYSAuditLogTypes { get; set; }
        public virtual DbSet<SYSAuditSetting> SYSAuditSettings { get; set; }
        public virtual DbSet<SYSAuditTrail> SYSAuditTrails { get; set; }
        public virtual DbSet<SYSAuditTrailEntryType> SYSAuditTrailEntryTypes { get; set; }
        public virtual DbSet<SYSCompany> SYSCompanies { get; set; }
        public virtual DbSet<SYSCompanyContact> SYSCompanyContacts { get; set; }
        public virtual DbSet<SYSCompanyLocation> SYSCompanyLocations { get; set; }
        public virtual DbSet<SYSCompanyLocationType> SYSCompanyLocationTypes { get; set; }
        public virtual DbSet<SYSCondOperatorDescriptor> SYSCondOperatorDescriptors { get; set; }
        public virtual DbSet<SYSCondOperatorType> SYSCondOperatorTypes { get; set; }
        public virtual DbSet<SYSConfigAssistant> SYSConfigAssistants { get; set; }
        public virtual DbSet<SYSContactType> SYSContactTypes { get; set; }
        public virtual DbSet<SYSCorrection> SYSCorrections { get; set; }
        public virtual DbSet<SYSCorrectionTranType> SYSCorrectionTranTypes { get; set; }
        public virtual DbSet<SYSCountryCode> SYSCountryCodes { get; set; }
        public virtual DbSet<SYSCountryCodeTaxMask> SYSCountryCodeTaxMasks { get; set; }
        public virtual DbSet<SYSCreditBureau> SYSCreditBureaus { get; set; }
        public virtual DbSet<SYSCreditPosition> SYSCreditPositions { get; set; }
        public virtual DbSet<SYSCurrency> SYSCurrencies { get; set; }
        public virtual DbSet<SYSCurrencyISOCode> SYSCurrencyISOCodes { get; set; }
        public virtual DbSet<SYSCurrencyTranType> SYSCurrencyTranTypes { get; set; }
        public virtual DbSet<SYSDataKey> SYSDataKeys { get; set; }
        public virtual DbSet<SYSDesktopListFilter> SYSDesktopListFilters { get; set; }
        public virtual DbSet<SYSDisplayField> SYSDisplayFields { get; set; }
        public virtual DbSet<SYSDocCapture> SYSDocCaptures { get; set; }
        public virtual DbSet<SYSDocCaptureType> SYSDocCaptureTypes { get; set; }
        public virtual DbSet<SYSDocStorageSetting> SYSDocStorageSettings { get; set; }
        public virtual DbSet<SYSDocStorageURL> SYSDocStorageURLs { get; set; }
        public virtual DbSet<SYSDocTransmissionMethod> SYSDocTransmissionMethods { get; set; }
        public virtual DbSet<SYSDocumentLayoutVersion> SYSDocumentLayoutVersions { get; set; }
        public virtual DbSet<SYSDocumentType> SYSDocumentTypes { get; set; }
        public virtual DbSet<SYSEmailType> SYSEmailTypes { get; set; }
        public virtual DbSet<SYSExchangeRateAction> SYSExchangeRateActions { get; set; }
        public virtual DbSet<SYSExchangeRateAmendType> SYSExchangeRateAmendTypes { get; set; }
        public virtual DbSet<SYSExchangeRateHistory> SYSExchangeRateHistories { get; set; }
        public virtual DbSet<SYSExchangeRateType> SYSExchangeRateTypes { get; set; }
        public virtual DbSet<SYSExpressionLine> SYSExpressionLines { get; set; }
        public virtual DbSet<SYSFeatureAreaLogging> SYSFeatureAreaLoggings { get; set; }
        public virtual DbSet<SYSFeatureAreaUsage> SYSFeatureAreaUsages { get; set; }
        public virtual DbSet<SYSFieldDescriptor> SYSFieldDescriptors { get; set; }
        public virtual DbSet<SYSFinancialYear> SYSFinancialYears { get; set; }
        public virtual DbSet<SYSFlowState> SYSFlowStates { get; set; }
        public virtual DbSet<SYSImportType> SYSImportTypes { get; set; }
        public virtual DbSet<SYSInformationView> SYSInformationViews { get; set; }
        public virtual DbSet<SYSLockDefinition> SYSLockDefinitions { get; set; }
        public virtual DbSet<SYSLogicalOperatorDescriptor> SYSLogicalOperatorDescriptors { get; set; }
        public virtual DbSet<SYSLogicalOperatorType> SYSLogicalOperatorTypes { get; set; }
        public virtual DbSet<SYSMerchantAccount> SYSMerchantAccounts { get; set; }
        public virtual DbSet<SYSModule> SYSModules { get; set; }
        public virtual DbSet<SYSModuleAccountingPeriod> SYSModuleAccountingPeriods { get; set; }
        public virtual DbSet<SYSModulePostingStatus> SYSModulePostingStatuses { get; set; }
        public virtual DbSet<SYSNominalAuditTrail> SYSNominalAuditTrails { get; set; }
        public virtual DbSet<SYSNotification> SYSNotifications { get; set; }
        public virtual DbSet<SYSNotificationPriorityType> SYSNotificationPriorityTypes { get; set; }
        public virtual DbSet<SYSNotificationStatusType> SYSNotificationStatusTypes { get; set; }
        public virtual DbSet<SYSNotificationUser> SYSNotificationUsers { get; set; }
        public virtual DbSet<SYSOverduePeriod> SYSOverduePeriods { get; set; }
        public virtual DbSet<SYSPaymentTermsBasis> SYSPaymentTermsBases { get; set; }
        public virtual DbSet<SYSPendingEmail> SYSPendingEmails { get; set; }
        public virtual DbSet<SYSPeriodAction> SYSPeriodActions { get; set; }
        public virtual DbSet<SYSPeriodActionLog> SYSPeriodActionLogs { get; set; }
        public virtual DbSet<SYSPeriodActionType> SYSPeriodActionTypes { get; set; }
        public virtual DbSet<SYSPeriodBalancesAccount> SYSPeriodBalancesAccounts { get; set; }
        public virtual DbSet<SYSPeriodBalancesEntry> SYSPeriodBalancesEntries { get; set; }
        public virtual DbSet<SYSPeriodBalancesLedger> SYSPeriodBalancesLedgers { get; set; }
        public virtual DbSet<SYSPeriodExchangeRate> SYSPeriodExchangeRates { get; set; }
        public virtual DbSet<SYSPrintSpoolerNumber> SYSPrintSpoolerNumbers { get; set; }
        public virtual DbSet<SYSProgressDatum> SYSProgressData { get; set; }
        public virtual DbSet<SYSProviderConfiguration> SYSProviderConfigurations { get; set; }
        public virtual DbSet<SYSProviderConfigurationAttribute> SYSProviderConfigurationAttributes { get; set; }
        public virtual DbSet<SYSProviderType> SYSProviderTypes { get; set; }
        public virtual DbSet<SYSProviderTypeAttribute> SYSProviderTypeAttributes { get; set; }
        public virtual DbSet<SYSProviderTypeAttributeType> SYSProviderTypeAttributeTypes { get; set; }
        public virtual DbSet<SYSReportKey> SYSReportKeys { get; set; }
        public virtual DbSet<SYSSearch> SYSSearches { get; set; }
        public virtual DbSet<SYSSearchField> SYSSearchFields { get; set; }
        public virtual DbSet<SYSSemaphore> SYSSemaphores { get; set; }
        public virtual DbSet<SYSSetting> SYSSettings { get; set; }
        public virtual DbSet<SYSSupportLog> SYSSupportLogs { get; set; }
        public virtual DbSet<SYSTaxAdjustment> SYSTaxAdjustments { get; set; }
        public virtual DbSet<SYSTaxAuditTrail> SYSTaxAuditTrails { get; set; }
        public virtual DbSet<SYSTaxECTerm> SYSTaxECTerms { get; set; }
        public virtual DbSet<SYSTaxPeriod> SYSTaxPeriods { get; set; }
        public virtual DbSet<SYSTaxPeriodRateBalance> SYSTaxPeriodRateBalances { get; set; }
        public virtual DbSet<SYSTaxPeriodStatusType> SYSTaxPeriodStatusTypes { get; set; }
        public virtual DbSet<SYSTaxPeriodSubmitStatus> SYSTaxPeriodSubmitStatuses { get; set; }
        public virtual DbSet<SYSTaxRate> SYSTaxRates { get; set; }
        public virtual DbSet<SYSTaxTran> SYSTaxTrans { get; set; }
        public virtual DbSet<SYSTaxTranType> SYSTaxTranTypes { get; set; }
        public virtual DbSet<SYSTerminology> SYSTerminologies { get; set; }
        public virtual DbSet<SYSTraderAnalysisHeading> SYSTraderAnalysisHeadings { get; set; }
        public virtual DbSet<SYSTraderAnalysisValue> SYSTraderAnalysisValues { get; set; }
        public virtual DbSet<SYSTraderContactRole> SYSTraderContactRoles { get; set; }
        public virtual DbSet<SYSTraderGenerateReasonType> SYSTraderGenerateReasonTypes { get; set; }
        public virtual DbSet<SYSTraderLocationType> SYSTraderLocationTypes { get; set; }
        public virtual DbSet<SYSTraderRevalAllocType> SYSTraderRevalAllocTypes { get; set; }
        public virtual DbSet<SYSTraderTranType> SYSTraderTranTypes { get; set; }
        public virtual DbSet<SYSTraderWriteOffEntryType> SYSTraderWriteOffEntryTypes { get; set; }
        public virtual DbSet<SYSTranAnalysisCode> SYSTranAnalysisCodes { get; set; }
        public virtual DbSet<SYSTranDateValidationClass> SYSTranDateValidationClasses { get; set; }
        public virtual DbSet<SYSTranDateValidationTerm> SYSTranDateValidationTerms { get; set; }
        public virtual DbSet<SYSTranDateValidationType> SYSTranDateValidationTypes { get; set; }
        public virtual DbSet<SYSURNPool> SYSURNPools { get; set; }
        public virtual DbSet<SYSUnAllocatedURN> SYSUnAllocatedURNs { get; set; }
        public virtual DbSet<SYSUniqueReferenceNumber> SYSUniqueReferenceNumbers { get; set; }
        public virtual DbSet<SYSUser> SYSUsers { get; set; }
        public virtual DbSet<SYSUserLogin> SYSUserLogins { get; set; }
        public virtual DbSet<SYSUserPermission> SYSUserPermissions { get; set; }
        public virtual DbSet<SabrePLAllocVw> SabrePLAllocVws { get; set; }
        public virtual DbSet<Sabre_BC_Productionplan_Engproj> Sabre_BC_Productionplan_Engprojs { get; set; }
        public virtual DbSet<Sabre_DLP_AClass> Sabre_DLP_AClasses { get; set; }
        public virtual DbSet<Sabre_DLP_Acc> Sabre_DLP_Accs { get; set; }
        public virtual DbSet<Sabre_DLP_Current_Transaction_List> Sabre_DLP_Current_Transaction_Lists { get; set; }
        public virtual DbSet<Sabre_DLP_DownloadReport_KPI_TotalPoReceived> Sabre_DLP_DownloadReport_KPI_TotalPoReceiveds { get; set; }
        public virtual DbSet<Sabre_DLP_DownloadReport_KPI_TotalTransfersToInspection> Sabre_DLP_DownloadReport_KPI_TotalTransfersToInspections { get; set; }
        public virtual DbSet<Sabre_DLP_DownloadReport_Rep> Sabre_DLP_DownloadReport_Reps { get; set; }
        public virtual DbSet<Sabre_DLP_ForcastActual> Sabre_DLP_ForcastActuals { get; set; }
        public virtual DbSet<Sabre_DLP_ProductionPlan> Sabre_DLP_ProductionPlans { get; set; }
        public virtual DbSet<Sabre_DLP_ProductionSchedule2> Sabre_DLP_ProductionSchedule2s { get; set; }
        public virtual DbSet<Sabre_DLP_ReorderReport_Req> Sabre_DLP_ReorderReport_Reqs { get; set; }
        public virtual DbSet<Sabre_DLP_RepFreeStockWD> Sabre_DLP_RepFreeStockWDs { get; set; }
        public virtual DbSet<Sabre_DLP_SLDespatchRole> Sabre_DLP_SLDespatchRoles { get; set; }
        public virtual DbSet<Sabre_DLP_SageLog> Sabre_DLP_SageLogs { get; set; }
        public virtual DbSet<Sabre_DLP_SalesSchedule> Sabre_DLP_SalesSchedules { get; set; }
        public virtual DbSet<Sabre_DLP_StockCalSPart> Sabre_DLP_StockCalSParts { get; set; }
        public virtual DbSet<Sabre_DLP_Stockreport> Sabre_DLP_Stockreports { get; set; }
        public virtual DbSet<Sabre_DLP_SupplierLate> Sabre_DLP_SupplierLates { get; set; }
        public virtual DbSet<Sabre_DLP_SupplierLatesTotal> Sabre_DLP_SupplierLatesTotals { get; set; }
        public virtual DbSet<Sabre_DLP_SupplierMonitor> Sabre_DLP_SupplierMonitors { get; set; }
        public virtual DbSet<Sabre_DLP_VTG_Download_StockSum> Sabre_DLP_VTG_Download_StockSums { get; set; }
        public virtual DbSet<Sabre_DLP_VTG_Download_WIP> Sabre_DLP_VTG_Download_WIPs { get; set; }
        public virtual DbSet<Sabre_DLP_VTG_Download_WarehouseStock> Sabre_DLP_VTG_Download_WarehouseStocks { get; set; }
        public virtual DbSet<Sabre_FactoryCon> Sabre_FactoryCons { get; set; }
        public virtual DbSet<Sabre_Rail_DLP_SalesForcast_Month> Sabre_Rail_DLP_SalesForcast_Months { get; set; }
        public virtual DbSet<SagePaySetting> SagePaySettings { get; set; }
        public virtual DbSet<SagePaymentsSupplierStatus> SagePaymentsSupplierStatuses { get; set; }
        public virtual DbSet<SagePaymentsTransactionStatus> SagePaymentsTransactionStatuses { get; set; }
        public virtual DbSet<SalesForecastHeader> SalesForecastHeaders { get; set; }
        public virtual DbSet<SalesForecastLine> SalesForecastLines { get; set; }
        public virtual DbSet<Salutation> Salutations { get; set; }
        public virtual DbSet<SearchCategory> SearchCategories { get; set; }
        public virtual DbSet<SearchValue> SearchValues { get; set; }
        public virtual DbSet<Setup> Setups { get; set; }
        public virtual DbSet<SfdcCurrentlyProcessing> SfdcCurrentlyProcessings { get; set; }
        public virtual DbSet<SfdcOperationTime> SfdcOperationTimes { get; set; }
        public virtual DbSet<ShowOnPickingListType> ShowOnPickingListTypes { get; set; }
        public virtual DbSet<SourceAnalysisGroup> SourceAnalysisGroups { get; set; }
        public virtual DbSet<SourceAreaType> SourceAreaTypes { get; set; }
        public virtual DbSet<StandardCostVariance> StandardCostVariances { get; set; }
        public virtual DbSet<StgTempMaterial> StgTempMaterials { get; set; }
        public virtual DbSet<StgTempNonStock> StgTempNonStocks { get; set; }
        public virtual DbSet<StgTempOperation> StgTempOperations { get; set; }
        public virtual DbSet<StgTempOtherExpense> StgTempOtherExpenses { get; set; }
        public virtual DbSet<StgTempStage> StgTempStages { get; set; }
        public virtual DbSet<StockHistoryShortfall> StockHistoryShortfalls { get; set; }
        public virtual DbSet<StockItem> StockItems { get; set; }
        public virtual DbSet<StockItemAverageCostHistory> StockItemAverageCostHistories { get; set; }
        public virtual DbSet<StockItemCrossSellItem> StockItemCrossSellItems { get; set; }
        public virtual DbSet<StockItemDiscount> StockItemDiscounts { get; set; }
        public virtual DbSet<StockItemMemo> StockItemMemos { get; set; }
        public virtual DbSet<StockItemNominalCode> StockItemNominalCodes { get; set; }
        public virtual DbSet<StockItemPeriodBalance> StockItemPeriodBalances { get; set; }
        public virtual DbSet<StockItemPrice> StockItemPrices { get; set; }
        public virtual DbSet<StockItemQtyDiscBreak> StockItemQtyDiscBreaks { get; set; }
        public virtual DbSet<StockItemSearchCatVal> StockItemSearchCatVals { get; set; }
        public virtual DbSet<StockItemStandardCostHistory> StockItemStandardCostHistories { get; set; }
        public virtual DbSet<StockItemStatus> StockItemStatuses { get; set; }
        public virtual DbSet<StockItemSupplier> StockItemSuppliers { get; set; }
        public virtual DbSet<StockItemType> StockItemTypes { get; set; }
        public virtual DbSet<StockItemUnit> StockItemUnits { get; set; }
        public virtual DbSet<StockItemUnitUOMType> StockItemUnitUOMTypes { get; set; }
        public virtual DbSet<StockItemX> StockItemXes { get; set; }
        public virtual DbSet<StockPreReceiptAlloc> StockPreReceiptAllocs { get; set; }
        public virtual DbSet<StockRevalueAuditTrail> StockRevalueAuditTrails { get; set; }
        public virtual DbSet<StockSetting> StockSettings { get; set; }
        public virtual DbSet<StockSettingX> StockSettingXes { get; set; }
        public virtual DbSet<Stocktake> Stocktakes { get; set; }
        public virtual DbSet<StocktakeCountSheetItem> StocktakeCountSheetItems { get; set; }
        public virtual DbSet<StocktakeItem> StocktakeItems { get; set; }
        public virtual DbSet<StocktakeLiveBinItem> StocktakeLiveBinItems { get; set; }
        public virtual DbSet<StocktakeSelector> StocktakeSelectors { get; set; }
        public virtual DbSet<StocktakeStatus> StocktakeStatuses { get; set; }
        public virtual DbSet<StocktakeType> StocktakeTypes { get; set; }
        public virtual DbSet<SubContractingDespatch> SubContractingDespatches { get; set; }
        public virtual DbSet<SubContractingPurchaseOrder> SubContractingPurchaseOrders { get; set; }
        public virtual DbSet<SubContractingReceipt> SubContractingReceipts { get; set; }
        public virtual DbSet<SupplierReorderLevel> SupplierReorderLevels { get; set; }
        public virtual DbSet<SyncScope> SyncScopes { get; set; }
        public virtual DbSet<SyncSource> SyncSources { get; set; }
        public virtual DbSet<SysLockThreshold> SysLockThresholds { get; set; }
        public virtual DbSet<TEMActionOnRetrieval> TEMActionOnRetrievals { get; set; }
        public virtual DbSet<TEMCodePage> TEMCodePages { get; set; }
        public virtual DbSet<TEMCustProdMapping> TEMCustProdMappings { get; set; }
        public virtual DbSet<TEMCustomerMapping> TEMCustomerMappings { get; set; }
        public virtual DbSet<TEMEventSource> TEMEventSources { get; set; }
        public virtual DbSet<TEMEventType> TEMEventTypes { get; set; }
        public virtual DbSet<TEMItemUnitMapping> TEMItemUnitMappings { get; set; }
        public virtual DbSet<TEMLocation> TEMLocations { get; set; }
        public virtual DbSet<TEMMessage> TEMMessages { get; set; }
        public virtual DbSet<TEMMessageEvent> TEMMessageEvents { get; set; }
        public virtual DbSet<TEMMessageOrder> TEMMessageOrders { get; set; }
        public virtual DbSet<TEMMessageType> TEMMessageTypes { get; set; }
        public virtual DbSet<TEMOutputOption> TEMOutputOptions { get; set; }
        public virtual DbSet<TEMPriceToleranceBasis> TEMPriceToleranceBases { get; set; }
        public virtual DbSet<TEMSetting> TEMSettings { get; set; }
        public virtual DbSet<TEMStandardTaxCode> TEMStandardTaxCodes { get; set; }
        public virtual DbSet<TEMStatus> TEMStatuses { get; set; }
        public virtual DbSet<TEMStatusMessage> TEMStatusMessages { get; set; }
        public virtual DbSet<TEMSuppProdMapping> TEMSuppProdMappings { get; set; }
        public virtual DbSet<TEMSupplierMapping> TEMSupplierMappings { get; set; }
        public virtual DbSet<TEMTaxCodeMapping> TEMTaxCodeMappings { get; set; }
        public virtual DbSet<TSActivityGroupsVw> TSActivityGroupsVws { get; set; }
        public virtual DbSet<TSActivityItemsVw> TSActivityItemsVws { get; set; }
        public virtual DbSet<TSActivitySearchKey> TSActivitySearchKeys { get; set; }
        public virtual DbSet<TSAuthGroupAuthoriser> TSAuthGroupAuthorisers { get; set; }
        public virtual DbSet<TSAuthGroupMember> TSAuthGroupMembers { get; set; }
        public virtual DbSet<TSAuthorisationGroup> TSAuthorisationGroups { get; set; }
        public virtual DbSet<TSCategoryCompStatusType> TSCategoryCompStatusTypes { get; set; }
        public virtual DbSet<TSCategoryCompType> TSCategoryCompTypes { get; set; }
        public virtual DbSet<TSCategoryComponent> TSCategoryComponents { get; set; }
        public virtual DbSet<TSChargeRate> TSChargeRates { get; set; }
        public virtual DbSet<TSChargeRateType> TSChargeRateTypes { get; set; }
        public virtual DbSet<TSChgRateTypePriceModLink> TSChgRateTypePriceModLinks { get; set; }
        public virtual DbSet<TSClaimRecord> TSClaimRecords { get; set; }
        public virtual DbSet<TSClaimRecordStatusType> TSClaimRecordStatusTypes { get; set; }
        public virtual DbSet<TSClaimSheet> TSClaimSheets { get; set; }
        public virtual DbSet<TSConfigurableTerm> TSConfigurableTerms { get; set; }
        public virtual DbSet<TSCostRate> TSCostRates { get; set; }
        public virtual DbSet<TSCostRateType> TSCostRateTypes { get; set; }
        public virtual DbSet<TSCostRateTypeVw> TSCostRateTypeVws { get; set; }
        public virtual DbSet<TSDayOfWeek> TSDayOfWeeks { get; set; }
        public virtual DbSet<TSExpFinancialsIntegration> TSExpFinancialsIntegrations { get; set; }
        public virtual DbSet<TSExpenseClaimStatusType> TSExpenseClaimStatusTypes { get; set; }
        public virtual DbSet<TSExpenseProjectIntegration> TSExpenseProjectIntegrations { get; set; }
        public virtual DbSet<TSExpensesClientConfig> TSExpensesClientConfigs { get; set; }
        public virtual DbSet<TSExpensesConfiguration> TSExpensesConfigurations { get; set; }
        public virtual DbSet<TSExpensesPostingStatus> TSExpensesPostingStatuses { get; set; }
        public virtual DbSet<TSExpensesPostingStatusType> TSExpensesPostingStatusTypes { get; set; }
        public virtual DbSet<TSExpensesRecordSheetStatus> TSExpensesRecordSheetStatuses { get; set; }
        public virtual DbSet<TSExpensesRecordStatusType> TSExpensesRecordStatusTypes { get; set; }
        public virtual DbSet<TSHumanResource> TSHumanResources { get; set; }
        public virtual DbSet<TSHumanResourceChargeRateLink> TSHumanResourceChargeRateLinks { get; set; }
        public virtual DbSet<TSHumanResourceCostRateLink> TSHumanResourceCostRateLinks { get; set; }
        public virtual DbSet<TSHumanResourcePayRateLink> TSHumanResourcePayRateLinks { get; set; }
        public virtual DbSet<TSPayRate> TSPayRates { get; set; }
        public virtual DbSet<TSPayRateType> TSPayRateTypes { get; set; }
        public virtual DbSet<TSPaymentFrequencyType> TSPaymentFrequencyTypes { get; set; }
        public virtual DbSet<TSPaymentMethod> TSPaymentMethods { get; set; }
        public virtual DbSet<TSPayrollIntegration> TSPayrollIntegrations { get; set; }
        public virtual DbSet<TSPerson> TSPeople { get; set; }
        public virtual DbSet<TSPostingMethodType> TSPostingMethodTypes { get; set; }
        public virtual DbSet<TSProviderAttribute> TSProviderAttributes { get; set; }
        public virtual DbSet<TSReceiptAttachedType> TSReceiptAttachedTypes { get; set; }
        public virtual DbSet<TSResourceChargeRateLink> TSResourceChargeRateLinks { get; set; }
        public virtual DbSet<TSResourceCostRateLink> TSResourceCostRateLinks { get; set; }
        public virtual DbSet<TSResourceHierarchy> TSResourceHierarchies { get; set; }
        public virtual DbSet<TSResourceHierarchyItemType> TSResourceHierarchyItemTypes { get; set; }
        public virtual DbSet<TSResourceHierarchyPerson> TSResourceHierarchyPeople { get; set; }
        public virtual DbSet<TSResourceResourceLink> TSResourceResourceLinks { get; set; }
        public virtual DbSet<TSResourceStatusType> TSResourceStatusTypes { get; set; }
        public virtual DbSet<TSResourceType> TSResourceTypes { get; set; }
        public virtual DbSet<TSSubmissionFrequencyType> TSSubmissionFrequencyTypes { get; set; }
        public virtual DbSet<TSTermExpensesConfigLink> TSTermExpensesConfigLinks { get; set; }
        public virtual DbSet<TSTermTimesheetConfigLink> TSTermTimesheetConfigLinks { get; set; }
        public virtual DbSet<TSTimeFinancialsIntegration> TSTimeFinancialsIntegrations { get; set; }
        public virtual DbSet<TSTimeProjectIntegration> TSTimeProjectIntegrations { get; set; }
        public virtual DbSet<TSTimeRecord> TSTimeRecords { get; set; }
        public virtual DbSet<TSTimeUnitType> TSTimeUnitTypes { get; set; }
        public virtual DbSet<TSTimesheetClientConfig> TSTimesheetClientConfigs { get; set; }
        public virtual DbSet<TSTimesheetConfiguration> TSTimesheetConfigurations { get; set; }
        public virtual DbSet<TSTimesheetPostStatus> TSTimesheetPostStatuses { get; set; }
        public virtual DbSet<TSTimesheetPostStatusType> TSTimesheetPostStatusTypes { get; set; }
        public virtual DbSet<TSTimesheetRecordStatus> TSTimesheetRecordStatuses { get; set; }
        public virtual DbSet<TSTimesheetRecordStatusType> TSTimesheetRecordStatusTypes { get; set; }
        public virtual DbSet<TSUserProfile> TSUserProfiles { get; set; }
        public virtual DbSet<TSUserSearchKey> TSUserSearchKeys { get; set; }
        public virtual DbSet<TSUserStatus> TSUserStatuses { get; set; }
        public virtual DbSet<TSWorkPeriod> TSWorkPeriods { get; set; }
        public virtual DbSet<TermsOfDelivery> TermsOfDeliveries { get; set; }
        public virtual DbSet<TimeUnit> TimeUnits { get; set; }
        public virtual DbSet<TimesheetHeader> TimesheetHeaders { get; set; }
        public virtual DbSet<TimesheetLine> TimesheetLines { get; set; }
        public virtual DbSet<Titan_SLAWKContacts_vw> Titan_SLAWKContacts_vws { get; set; }
        public virtual DbSet<Titan_SLContacts_vw> Titan_SLContacts_vws { get; set; }
        public virtual DbSet<Titan_SLOrderAckContacts_vw> Titan_SLOrderAckContacts_vws { get; set; }
        public virtual DbSet<ToolToolingResource> ToolToolingResources { get; set; }
        public virtual DbSet<ToolToolingResourceActivity> ToolToolingResourceActivities { get; set; }
        public virtual DbSet<ToolToolingResourceActivityType> ToolToolingResourceActivityTypes { get; set; }
        public virtual DbSet<ToolToolingResourceGroup> ToolToolingResourceGroups { get; set; }
        public virtual DbSet<TraceBOMBuildComp> TraceBOMBuildComps { get; set; }
        public virtual DbSet<TraceBOMBuildFinItem> TraceBOMBuildFinItems { get; set; }
        public virtual DbSet<TraceCountSheetItem> TraceCountSheetItems { get; set; }
        public virtual DbSet<TracePOPInvCredLine> TracePOPInvCredLines { get; set; }
        public virtual DbSet<TracePOPRcptRtnLine> TracePOPRcptRtnLines { get; set; }
        public virtual DbSet<TraceSOPDespRcptLine> TraceSOPDespRcptLines { get; set; }
        public virtual DbSet<TraceSOPInvCredLine> TraceSOPInvCredLines { get; set; }
        public virtual DbSet<TraceableAllocationBal> TraceableAllocationBals { get; set; }
        public virtual DbSet<TraceableBinItem> TraceableBinItems { get; set; }
        public virtual DbSet<TraceableItem> TraceableItems { get; set; }
        public virtual DbSet<TraceableItemArch> TraceableItemArches { get; set; }
        public virtual DbSet<TraceableItemStatus> TraceableItemStatuses { get; set; }
        public virtual DbSet<TraceableMovementBal> TraceableMovementBals { get; set; }
        public virtual DbSet<TraceableTransArchive> TraceableTransArchives { get; set; }
        public virtual DbSet<TraceableTransHistory> TraceableTransHistories { get; set; }
        public virtual DbSet<TraceableTransType> TraceableTransTypes { get; set; }
        public virtual DbSet<TraceableType> TraceableTypes { get; set; }
        public virtual DbSet<TransactionArchive> TransactionArchives { get; set; }
        public virtual DbSet<TransactionGroup> TransactionGroups { get; set; }
        public virtual DbSet<TransactionHistory> TransactionHistories { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<UniqueStockItemsWithDiscountView> UniqueStockItemsWithDiscountViews { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UnitOfMeasureType> UnitOfMeasureTypes { get; set; }
        public virtual DbSet<UserDefaultWarehouse> UserDefaultWarehouses { get; set; }
        public virtual DbSet<ValueDiscountBreak> ValueDiscountBreaks { get; set; }
        public virtual DbSet<ViewLookupId> ViewLookupIds { get; set; }
        public virtual DbSet<View_1> View_1s { get; set; }
        public virtual DbSet<WTEProjectItemExpenseFilteredMRUSearchView> WTEProjectItemExpenseFilteredMRUSearchViews { get; set; }
        public virtual DbSet<WTEProjectItemExpenseFilteredSearchView> WTEProjectItemExpenseFilteredSearchViews { get; set; }
        public virtual DbSet<WTEProjectItemExpenseMRUSearchView> WTEProjectItemExpenseMRUSearchViews { get; set; }
        public virtual DbSet<WTEProjectItemExpenseSearchView> WTEProjectItemExpenseSearchViews { get; set; }
        public virtual DbSet<WTEProjectItemSearchCTEView> WTEProjectItemSearchCTEViews { get; set; }
        public virtual DbSet<WTEProjectItemSearchView> WTEProjectItemSearchViews { get; set; }
        public virtual DbSet<WTEProjectItemTimesheetFilteredMRUSearchView> WTEProjectItemTimesheetFilteredMRUSearchViews { get; set; }
        public virtual DbSet<WTEProjectItemTimesheetFilteredSearchView> WTEProjectItemTimesheetFilteredSearchViews { get; set; }
        public virtual DbSet<WTEProjectItemTimesheetMRUSearchView> WTEProjectItemTimesheetMRUSearchViews { get; set; }
        public virtual DbSet<WTEProjectItemTimesheetSearchView> WTEProjectItemTimesheetSearchViews { get; set; }
        public virtual DbSet<Warehouse> Warehouses { get; set; }
        public virtual DbSet<WarehouseItem> WarehouseItems { get; set; }
        public virtual DbSet<WarehouseType> WarehouseTypes { get; set; }
        public virtual DbSet<WopAllocationBalance> WopAllocationBalances { get; set; }
        public virtual DbSet<WopAllocationLine> WopAllocationLines { get; set; }
        public virtual DbSet<WopBomComponentLineLink> WopBomComponentLineLinks { get; set; }
        public virtual DbSet<WopBuild> WopBuilds { get; set; }
        public virtual DbSet<WopBuildComponent> WopBuildComponents { get; set; }
        public virtual DbSet<WopBuildComponentIssueLink> WopBuildComponentIssueLinks { get; set; }
        public virtual DbSet<WopBuildComponentTraceability> WopBuildComponentTraceabilities { get; set; }
        public virtual DbSet<WopBuildProduct> WopBuildProducts { get; set; }
        public virtual DbSet<WopBuildProductNominalPosting> WopBuildProductNominalPostings { get; set; }
        public virtual DbSet<WopBuildTraceableComponent> WopBuildTraceableComponents { get; set; }
        public virtual DbSet<WopBuildTraceableProduct> WopBuildTraceableProducts { get; set; }
        public virtual DbSet<WopComponentLine> WopComponentLines { get; set; }
        public virtual DbSet<WopComponentLineType> WopComponentLineTypes { get; set; }
        public virtual DbSet<WopIssue> WopIssues { get; set; }
        public virtual DbSet<WopIssueShortfall> WopIssueShortfalls { get; set; }
        public virtual DbSet<WopOrder> WopOrders { get; set; }
        public virtual DbSet<WopOrderLink> WopOrderLinks { get; set; }
        public virtual DbSet<WopOrderType> WopOrderTypes { get; set; }
        public virtual DbSet<WopTraceableIssue> WopTraceableIssues { get; set; }
        public virtual DbSet<WorksOrder> WorksOrders { get; set; }
        public virtual DbSet<WorksOrderActualOpTime> WorksOrderActualOpTimes { get; set; }
        public virtual DbSet<WorksOrderAllocIssue> WorksOrderAllocIssues { get; set; }
        public virtual DbSet<WorksOrderAttachedDocument> WorksOrderAttachedDocuments { get; set; }
        public virtual DbSet<WorksOrderFinishedProduct> WorksOrderFinishedProducts { get; set; }
        public virtual DbSet<WorksOrderImage> WorksOrderImages { get; set; }
        public virtual DbSet<WorksOrderOpComponent> WorksOrderOpComponents { get; set; }
        public virtual DbSet<WorksOrderSalesOrder> WorksOrderSalesOrders { get; set; }
        public virtual DbSet<WorksOrderScrap> WorksOrderScraps { get; set; }
        public virtual DbSet<WorksOrderSerialNumber> WorksOrderSerialNumbers { get; set; }
        public virtual DbSet<WorksOrderTracking> WorksOrderTrackings { get; set; }
        public virtual DbSet<Workspaces_ContentPartFilter> Workspaces_ContentPartFilters { get; set; }
        public virtual DbSet<WriteOffCategory> WriteOffCategories { get; set; }
        public virtual DbSet<dtproperty> dtproperties { get; set; }
        public virtual DbSet<salesforecastdetails_sabre> salesforecastdetails_sabres { get; set; }
        public virtual DbSet<vPurchaseAllocDateDiscrep> vPurchaseAllocDateDiscreps { get; set; }
        public virtual DbSet<vSalesAllocDateDiscrep> vSalesAllocDateDiscreps { get; set; }
        public virtual DbSet<vw_AvailableSalesOrderLinesForLinking> vw_AvailableSalesOrderLinesForLinkings { get; set; }
        public virtual DbSet<vw_BomList> vw_BomLists { get; set; }
        public virtual DbSet<vw_DashboardEstTop5Customer> vw_DashboardEstTop5Customers { get; set; }
        public virtual DbSet<vw_DashboardEstTop5Ytd> vw_DashboardEstTop5Ytds { get; set; }
        public virtual DbSet<vw_DashboardEstUnsuccessful> vw_DashboardEstUnsuccessfuls { get; set; }
        public virtual DbSet<vw_DashboardEstValueO> vw_DashboardEstValueOs { get; set; }
        public virtual DbSet<vw_DashboardEstValueSuccessful> vw_DashboardEstValueSuccessfuls { get; set; }
        public virtual DbSet<vw_DashboardPlanDue14DaysExcludedMp> vw_DashboardPlanDue14DaysExcludedMps { get; set; }
        public virtual DbSet<vw_DashboardPlanForFollowUp> vw_DashboardPlanForFollowUps { get; set; }
        public virtual DbSet<vw_DashboardPlanLateRec> vw_DashboardPlanLateRecs { get; set; }
        public virtual DbSet<vw_DashboardPlanTbmOrderedToday> vw_DashboardPlanTbmOrderedTodays { get; set; }
        public virtual DbSet<vw_DashboardWoBeingProcessed> vw_DashboardWoBeingProcesseds { get; set; }
        public virtual DbSet<vw_DashboardWoCreatedLast7Day> vw_DashboardWoCreatedLast7Days { get; set; }
        public virtual DbSet<vw_DashboardWoLateFinisher> vw_DashboardWoLateFinishers { get; set; }
        public virtual DbSet<vw_DashboardWoLateStarter> vw_DashboardWoLateStarters { get; set; }
        public virtual DbSet<vw_DashboardWoTimeBookedLast7Day> vw_DashboardWoTimeBookedLast7Days { get; set; }
        public virtual DbSet<vw_EstTransReport> vw_EstTransReports { get; set; }
        public virtual DbSet<vw_EstimateList> vw_EstimateLists { get; set; }
        public virtual DbSet<vw_JobTransReport> vw_JobTransReports { get; set; }
        public virtual DbSet<vw_MrpRecommendationsWithNeededByDate> vw_MrpRecommendationsWithNeededByDates { get; set; }
        public virtual DbSet<vw_NeededByDate> vw_NeededByDates { get; set; }
        public virtual DbSet<vw_POtoWOtoSO> vw_POtoWOtoSOs { get; set; }
        public virtual DbSet<vw_PlanMpsItem> vw_PlanMpsItems { get; set; }
        public virtual DbSet<vw_PlanMpsItemsExcluded> vw_PlanMpsItemsExcludeds { get; set; }
        public virtual DbSet<vw_PlanMrpDemand> vw_PlanMrpDemands { get; set; }
        public virtual DbSet<vw_PlanMrpException> vw_PlanMrpExceptions { get; set; }
        public virtual DbSet<vw_PlanMrpRecommendation> vw_PlanMrpRecommendations { get; set; }
        public virtual DbSet<vw_PlanMrpReplenishment> vw_PlanMrpReplenishments { get; set; }
        public virtual DbSet<vw_RepAllocationBalance> vw_RepAllocationBalances { get; set; }
        public virtual DbSet<vw_RepAnalysisCode> vw_RepAnalysisCodes { get; set; }
        public virtual DbSet<vw_RepBinItem> vw_RepBinItems { get; set; }
        public virtual DbSet<vw_RepBomComponent> vw_RepBomComponents { get; set; }
        public virtual DbSet<vw_RepBomDrawing> vw_RepBomDrawings { get; set; }
        public virtual DbSet<vw_RepBomHeader> vw_RepBomHeaders { get; set; }
        public virtual DbSet<vw_RepBomOperation> vw_RepBomOperations { get; set; }
        public virtual DbSet<vw_RepBomTransaction> vw_RepBomTransactions { get; set; }
        public virtual DbSet<vw_RepBomWOrderCosting> vw_RepBomWOrderCostings { get; set; }
        public virtual DbSet<vw_RepConformity> vw_RepConformities { get; set; }
        public virtual DbSet<vw_RepConformityItem> vw_RepConformityItems { get; set; }
        public virtual DbSet<vw_RepDrawingRegister> vw_RepDrawingRegisters { get; set; }
        public virtual DbSet<vw_RepDrawingRevision> vw_RepDrawingRevisions { get; set; }
        public virtual DbSet<vw_RepEmployee> vw_RepEmployees { get; set; }
        public virtual DbSet<vw_RepEstDrawing> vw_RepEstDrawings { get; set; }
        public virtual DbSet<vw_RepEstModificationHistory> vw_RepEstModificationHistories { get; set; }
        public virtual DbSet<vw_RepEstQtyBreak> vw_RepEstQtyBreaks { get; set; }
        public virtual DbSet<vw_RepEstStage> vw_RepEstStages { get; set; }
        public virtual DbSet<vw_RepEstTransaction> vw_RepEstTransactions { get; set; }
        public virtual DbSet<vw_RepEstimate> vw_RepEstimates { get; set; }
        public virtual DbSet<vw_RepExpenseType> vw_RepExpenseTypes { get; set; }
        public virtual DbSet<vw_RepIndentedPartsList> vw_RepIndentedPartsLists { get; set; }
        public virtual DbSet<vw_RepJobAllocIssue> vw_RepJobAllocIssues { get; set; }
        public virtual DbSet<vw_RepJobDetailedVariance> vw_RepJobDetailedVariances { get; set; }
        public virtual DbSet<vw_RepJobHeader> vw_RepJobHeaders { get; set; }
        public virtual DbSet<vw_RepJobInvoice> vw_RepJobInvoices { get; set; }
        public virtual DbSet<vw_RepJobOperation> vw_RepJobOperations { get; set; }
        public virtual DbSet<vw_RepJobOperationsActual> vw_RepJobOperationsActuals { get; set; }
        public virtual DbSet<vw_RepJobStage> vw_RepJobStages { get; set; }
        public virtual DbSet<vw_RepJobTransaction> vw_RepJobTransactions { get; set; }
        public virtual DbSet<vw_RepLabourCategory> vw_RepLabourCategories { get; set; }
        public virtual DbSet<vw_RepLabourRegister> vw_RepLabourRegisters { get; set; }
        public virtual DbSet<vw_RepMachineCalibration> vw_RepMachineCalibrations { get; set; }
        public virtual DbSet<vw_RepMachineRegister> vw_RepMachineRegisters { get; set; }
        public virtual DbSet<vw_RepMaximumBuild> vw_RepMaximumBuilds { get; set; }
        public virtual DbSet<vw_RepMfgAllocation> vw_RepMfgAllocations { get; set; }
        public virtual DbSet<vw_RepMfgAllocationBalance> vw_RepMfgAllocationBalances { get; set; }
        public virtual DbSet<vw_RepMfgAllocationLine> vw_RepMfgAllocationLines { get; set; }
        public virtual DbSet<vw_RepNominal> vw_RepNominals { get; set; }
        public virtual DbSet<vw_RepNonChargeableTime> vw_RepNonChargeableTimes { get; set; }
        public virtual DbSet<vw_RepNonChargeableTimeActivity> vw_RepNonChargeableTimeActivities { get; set; }
        public virtual DbSet<vw_RepOperationsRegister> vw_RepOperationsRegisters { get; set; }
        public virtual DbSet<vw_RepPlanMakeForStock> vw_RepPlanMakeForStocks { get; set; }
        public virtual DbSet<vw_RepPlanMpsItem> vw_RepPlanMpsItems { get; set; }
        public virtual DbSet<vw_RepPlanMrpDemand> vw_RepPlanMrpDemands { get; set; }
        public virtual DbSet<vw_RepPlanMrpException> vw_RepPlanMrpExceptions { get; set; }
        public virtual DbSet<vw_RepPlanMrpRecommendation> vw_RepPlanMrpRecommendations { get; set; }
        public virtual DbSet<vw_RepPlanMrpRecommendationsRouting> vw_RepPlanMrpRecommendationsRoutings { get; set; }
        public virtual DbSet<vw_RepPlanMrpRecommendationsTag> vw_RepPlanMrpRecommendationsTags { get; set; }
        public virtual DbSet<vw_RepPlanMrpReplenishment> vw_RepPlanMrpReplenishments { get; set; }
        public virtual DbSet<vw_RepPlanUniqueProduct> vw_RepPlanUniqueProducts { get; set; }
        public virtual DbSet<vw_RepPopOrderReturn> vw_RepPopOrderReturns { get; set; }
        public virtual DbSet<vw_RepPopOrderReturnLine> vw_RepPopOrderReturnLines { get; set; }
        public virtual DbSet<vw_RepProspect> vw_RepProspects { get; set; }
        public virtual DbSet<vw_RepSalesForecastHeader> vw_RepSalesForecastHeaders { get; set; }
        public virtual DbSet<vw_RepSalesForecastLine> vw_RepSalesForecastLines { get; set; }
        public virtual DbSet<vw_RepSfdcCurrentlyProcessing> vw_RepSfdcCurrentlyProcessings { get; set; }
        public virtual DbSet<vw_RepSfdcOperationTime> vw_RepSfdcOperationTimes { get; set; }
        public virtual DbSet<vw_RepSopOrderReturn> vw_RepSopOrderReturns { get; set; }
        public virtual DbSet<vw_RepSopOrderReturnLine> vw_RepSopOrderReturnLines { get; set; }
        public virtual DbSet<vw_RepStockItem> vw_RepStockItems { get; set; }
        public virtual DbSet<vw_RepStockItemSupplier> vw_RepStockItemSuppliers { get; set; }
        public virtual DbSet<vw_RepSubContract> vw_RepSubContracts { get; set; }
        public virtual DbSet<vw_RepSubContractAdviceNote> vw_RepSubContractAdviceNotes { get; set; }
        public virtual DbSet<vw_RepSubContractOperationComponent> vw_RepSubContractOperationComponents { get; set; }
        public virtual DbSet<vw_RepSubstituteTraceableAudit> vw_RepSubstituteTraceableAudits { get; set; }
        public virtual DbSet<vw_RepSupplier> vw_RepSuppliers { get; set; }
        public virtual DbSet<vw_RepTraceableAllocationBalance> vw_RepTraceableAllocationBalances { get; set; }
        public virtual DbSet<vw_RepTraceableBinItem> vw_RepTraceableBinItems { get; set; }
        public virtual DbSet<vw_RepTraceableItem> vw_RepTraceableItems { get; set; }
        public virtual DbSet<vw_RepTrialKitting> vw_RepTrialKittings { get; set; }
        public virtual DbSet<vw_RepWarehouse> vw_RepWarehouses { get; set; }
        public virtual DbSet<vw_RepWipAllCost> vw_RepWipAllCosts { get; set; }
        public virtual DbSet<vw_RepWipMaterial> vw_RepWipMaterials { get; set; }
        public virtual DbSet<vw_RepWorkToHeader> vw_RepWorkToHeaders { get; set; }
        public virtual DbSet<vw_RepWorkToOperation> vw_RepWorkToOperations { get; set; }
        public virtual DbSet<vw_RepWorksOrder> vw_RepWorksOrders { get; set; }
        public virtual DbSet<vw_RepWorksOrderLabel> vw_RepWorksOrderLabels { get; set; }
        public virtual DbSet<vw_RepWorksOrdersAllocIssue> vw_RepWorksOrdersAllocIssues { get; set; }
        public virtual DbSet<vw_RepWorksOrdersOperation> vw_RepWorksOrdersOperations { get; set; }
        public virtual DbSet<vw_RepWorksOrdersOperationsActual> vw_RepWorksOrdersOperationsActuals { get; set; }
        public virtual DbSet<vw_RepWorksOrdersSalesOrder> vw_RepWorksOrdersSalesOrders { get; set; }
        public virtual DbSet<vw_RepWorksOrdersScrap> vw_RepWorksOrdersScraps { get; set; }
        public virtual DbSet<vw_SOtoWOtoPO> vw_SOtoWOtoPOs { get; set; }
        public virtual DbSet<vw_Sabre_Increase_Despatch> vw_Sabre_Increase_Despatches { get; set; }
        public virtual DbSet<vw_SubContractAdviceNote> vw_SubContractAdviceNotes { get; set; }
        public virtual DbSet<vw_SubContractListAdviceNote> vw_SubContractListAdviceNotes { get; set; }
        public virtual DbSet<vw_SubContractListAll> vw_SubContractListAlls { get; set; }
        public virtual DbSet<vw_SubContractListBatch> vw_SubContractListBatches { get; set; }
        public virtual DbSet<vw_SubContractListOneOff> vw_SubContractListOneOffs { get; set; }
        public virtual DbSet<vw_SubContractRaisePurchaseOrder> vw_SubContractRaisePurchaseOrders { get; set; }
        public virtual DbSet<vw_SubContractStockAtSubContractor> vw_SubContractStockAtSubContractors { get; set; }
        public virtual DbSet<vw_WoTotalTimeCost> vw_WoTotalTimeCosts { get; set; }
        public virtual DbSet<vw_WoTreeLinksView> vw_WoTreeLinksViews { get; set; }
        public virtual DbSet<vw_WoWorkInProgress> vw_WoWorkInProgresses { get; set; }
        public virtual DbSet<vw_WoWorkInProgressAllCost> vw_WoWorkInProgressAllCosts { get; set; }
        public virtual DbSet<vw_WorksOrder> vw_WorksOrders { get; set; }
        public virtual DbSet<vw_WorksOrderAllocatedComponentsList> vw_WorksOrderAllocatedComponentsLists { get; set; }
        public virtual DbSet<vw_WorksOrderWithOriginalSalesOrder> vw_WorksOrderWithOriginalSalesOrders { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<Additional_CAU_Assembly>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Additional CAU Assemblies");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AllocationBalance>(entity =>
            {
                entity.HasKey(e => e.AllocationID);

                entity.ToTable("AllocationBalance");

                entity.HasIndex(e => e.BinItemID, "IX_AllocationBalance_BinItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.EntrySourceID, "IX_AllocationBalance_EntrySourceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Reference, "IX_AllocationBalance_Reference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceAreaTypeID, "IX_AllocationBalance_SourceAreaTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AllocationID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderPriority)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.RecipientName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.RecipientReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SecondRef)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.BinItem)
                    .WithMany(p => p.AllocationBalances)
                    .HasForeignKey(d => d.BinItemID)
                    .HasConstraintName("FK_AllocationBalance_BinItem");

                entity.HasOne(d => d.EntrySource)
                    .WithMany(p => p.AllocationBalances)
                    .HasForeignKey(d => d.EntrySourceID)
                    .HasConstraintName("FK_AllocationBalance_EntrySource");

                entity.HasOne(d => d.SourceAreaType)
                    .WithMany(p => p.AllocationBalances)
                    .HasForeignKey(d => d.SourceAreaTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AllocationBalance_SourceAreaType");
            });

            modelBuilder.Entity<AlternativeItem>(entity =>
            {
                entity.HasKey(e => new { e.ItemID, e.ItemAlternativeID });

                entity.ToTable("AlternativeItem");

                entity.HasIndex(e => e.AlternativeItemID, "IX_AlternativeItem_AlternativeItemID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ItemAlternativeID, "IX_AlternativeItem_ItemAlternativeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ItemAlternative)
                    .WithMany(p => p.AlternativeItemItemAlternatives)
                    .HasForeignKey(d => d.ItemAlternativeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlternativeItem_StockItem2");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.AlternativeItemItems)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlternativeItem_StockItem");
            });

            modelBuilder.Entity<AnalysisCode>(entity =>
            {
                entity.ToTable("AnalysisCode");

                entity.Property(e => e.AnalysisCodeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<AnalysisCode1>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_AnalysisPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("AnalysisCodes");

                entity.HasIndex(e => e.Code, "IX_AnalysisCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Code).HasMaxLength(20);
            });

            modelBuilder.Entity<AnalysisCodeMapping>(entity =>
            {
                entity.ToTable("AnalysisCodeMapping");

                entity.HasIndex(e => e.AnalysisCodeID, "IX_AnalysisCodeMapping_AnalysisCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AnalysisCodeMappingID).ValueGeneratedNever();

                entity.Property(e => e.ClassName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FriendlyClassName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FriendlyPropertyName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PropertyName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AnalysisCodeValue>(entity =>
            {
                entity.ToTable("AnalysisCodeValue");

                entity.HasIndex(e => e.AnalysisCodeID, "IX_AnalysisCodeValue_AnalysisCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.AnalysisCodeID, e.Value }, "IX_AnalysisCodeValue_AnalysisCodeID_Value")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AnalysisCodeValueID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.AnalysisCode)
                    .WithMany(p => p.AnalysisCodeValues)
                    .HasForeignKey(d => d.AnalysisCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AnalysisCodeValue_AnalysisCode");
            });

            modelBuilder.Entity<AuditTrailView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AuditTrailView");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Department)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Narrative)
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.NetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TradingNominalAnalysisCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AuditTrailViewOpeningBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AuditTrailViewOpeningBalances");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.BatchReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EntrySourceName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionToBaseExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TransactionType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AuthorisationStatus>(entity =>
            {
                entity.ToTable("AuthorisationStatus");

                entity.Property(e => e.AuthorisationStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Authoriser>(entity =>
            {
                entity.ToTable("Authoriser");

                entity.Property(e => e.AuthoriserID).ValueGeneratedNever();

                entity.Property(e => e.AuthoriserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AuthoriserParent)
                    .WithMany(p => p.InverseAuthoriserParent)
                    .HasForeignKey(d => d.AuthoriserParentID)
                    .HasConstraintName("FK_Authoriser_AuthoriserParentID");

                entity.HasOne(d => d.AuthoriserType)
                    .WithMany(p => p.Authorisers)
                    .HasForeignKey(d => d.AuthoriserTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Authoriser_AuthoriserType");
            });

            modelBuilder.Entity<AuthoriserAlternativeVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AuthoriserAlternativeVw");
            });

            modelBuilder.Entity<AuthoriserType>(entity =>
            {
                entity.ToTable("AuthoriserType");

                entity.Property(e => e.AuthoriserTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BLAmountOrPercentage>(entity =>
            {
                entity.ToTable("BLAmountOrPercentage");

                entity.Property(e => e.BLAmountOrPercentageID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BLBill>(entity =>
            {
                entity.HasKey(e => e.BLBillID)
                    .HasName("PK_BillHeader")
                    .IsClustered(false);

                entity.ToTable("BLBill");

                entity.HasIndex(e => e.BLBillDeliveryAddressID, "IX_BLBill_BLBillDeliveryAddressID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BLBillHeaderStatusID, "IX_BLBill_BLBillHeaderStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BillNumber, "IX_BLBill_BillNumber")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLBillID).ValueGeneratedNever();

                entity.Property(e => e.BillNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EarlySettlementDiscount).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TotalChargesValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalDiscountedNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalGrossValueInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalTax).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.BLBillDeliveryAddress)
                    .WithMany(p => p.BLBills)
                    .HasForeignKey(d => d.BLBillDeliveryAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BillHeader_BLBillingAddress");

                entity.HasOne(d => d.BLBillHeaderStatus)
                    .WithMany(p => p.BLBills)
                    .HasForeignKey(d => d.BLBillHeaderStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BillHeader_BLBillHeaderStatus");
            });

            modelBuilder.Entity<BLBillDeliveryAddress>(entity =>
            {
                entity.ToTable("BLBillDeliveryAddress");

                entity.Property(e => e.BLBillDeliveryAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<BLBillEvent>(entity =>
            {
                entity.HasKey(e => e.BLBillEventID)
                    .IsClustered(false);

                entity.ToTable("BLBillEvent");

                entity.HasIndex(e => new { e.BLEventID, e.BLBillID }, "IX_BLBillEvent_BLEventID_BLBillID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLBillEventID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BLBill)
                    .WithMany(p => p.BLBillEvents)
                    .HasForeignKey(d => d.BLBillID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillEvent_BLBill");
            });

            modelBuilder.Entity<BLBillHeaderStatus>(entity =>
            {
                entity.HasKey(e => e.BLBillHeaderStatusID)
                    .IsClustered(false);

                entity.ToTable("BLBillHeaderStatus");

                entity.HasIndex(e => e.BLBillHeaderStatusTypeID, "IX_BLBillHeaderStatus_BLBillHeaderStatusTypeID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLBillHeaderStatusID).ValueGeneratedNever();

                entity.Property(e => e.Assigner)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BLBillHeaderStatusType)
                    .WithMany(p => p.BLBillHeaderStatuses)
                    .HasForeignKey(d => d.BLBillHeaderStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillHeaderStatus_BLBillHeaderStatusType");
            });

            modelBuilder.Entity<BLBillHeaderStatusType>(entity =>
            {
                entity.ToTable("BLBillHeaderStatusType");

                entity.Property(e => e.BLBillHeaderStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BLBillLine>(entity =>
            {
                entity.HasKey(e => e.BLBillLineID)
                    .IsClustered(false);

                entity.ToTable("BLBillLine");

                entity.HasIndex(e => e.BLBillLineID, "IX_BLBillLine_BLBillID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BLBillLineTypeID, "IX_BLBillLine_BLBillLineTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BLContractID, "IX_BLBillLine_BLContractID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCProjectCostItemID, "IX_BLBillLine_PCProjectCostItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCUnitOfMeasureID, "IX_BLBillLine_PCUnitOfMeasureID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTaxRateID, "IX_BLBillLine_SYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLBillLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PCUnitOfMeasureID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UnitDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.UnitDiscountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.BLAmountOrPercentage)
                    .WithMany(p => p.BLBillLines)
                    .HasForeignKey(d => d.BLAmountOrPercentageID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillLine_BLAmountOrPercentageID");

                entity.HasOne(d => d.BLBill)
                    .WithMany(p => p.BLBillLines)
                    .HasForeignKey(d => d.BLBillID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillLine_BLBill");

                entity.HasOne(d => d.BLBillLineType)
                    .WithMany(p => p.BLBillLines)
                    .HasForeignKey(d => d.BLBillLineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillLine_BLBillLineType");

                entity.HasOne(d => d.BLContract)
                    .WithMany(p => p.BLBillLines)
                    .HasForeignKey(d => d.BLContractID)
                    .HasConstraintName("FK_BLBillLine_BLContract");

                entity.HasOne(d => d.BLDiscountOrSurcharge)
                    .WithMany(p => p.BLBillLines)
                    .HasForeignKey(d => d.BLDiscountOrSurchargeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillLine_BLDiscountOrSurchargeID");

                entity.HasOne(d => d.PCUnitOfMeasure)
                    .WithMany(p => p.BLBillLines)
                    .HasForeignKey(d => d.PCUnitOfMeasureID)
                    .HasConstraintName("FK_BLBillLine_PCUnitOfMeasure");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.BLBillLines)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .HasConstraintName("FK_BLBillLine_SYSTaxRate");
            });

            modelBuilder.Entity<BLBillLineInvoiceCreditLine>(entity =>
            {
                entity.HasKey(e => e.BLBillLineInvoiceCreditLineID)
                    .IsClustered(false);

                entity.ToTable("BLBillLineInvoiceCreditLine");

                entity.HasIndex(e => new { e.BLBillLineID, e.INVInvoiceCreditLineID }, "IX_BLBillLineInvoiceCreditLine_BLBillLineID_INVInvoiceCreditLineID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLBillLineInvoiceCreditLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BLBillLine)
                    .WithMany(p => p.BLBillLineInvoiceCreditLines)
                    .HasForeignKey(d => d.BLBillLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillLineInvoiceCreditLine_BLBillLine");

                entity.HasOne(d => d.INVInvoiceCreditLine)
                    .WithMany(p => p.BLBillLineInvoiceCreditLines)
                    .HasForeignKey(d => d.INVInvoiceCreditLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillLineInvoiceCreditLine_INVInvoiceCreditLine");
            });

            modelBuilder.Entity<BLBillLinePosting>(entity =>
            {
                entity.HasKey(e => e.BLBillLinePostingID)
                    .IsClustered(false);

                entity.ToTable("BLBillLinePosting");

                entity.HasIndex(e => new { e.BLBillLineID, e.PCProjectEntryPostingID }, "IX_BLBillLinePosting_BLBillLineID_PCProjectEntryPostingID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLBillLinePostingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BLBillLine)
                    .WithMany(p => p.BLBillLinePostings)
                    .HasForeignKey(d => d.BLBillLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillLinePosting_BLBillLine");

                entity.HasOne(d => d.PCProjectEntryPosting)
                    .WithMany(p => p.BLBillLinePostings)
                    .HasForeignKey(d => d.PCProjectEntryPostingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillLinePosting_PCProjectEntryPosting");
            });

            modelBuilder.Entity<BLBillLineType>(entity =>
            {
                entity.ToTable("BLBillLineType");

                entity.Property(e => e.BLBillLineTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BLBillTemplate>(entity =>
            {
                entity.HasKey(e => e.BLBillTemplateID)
                    .IsClustered(false);

                entity.ToTable("BLBillTemplate");

                entity.HasIndex(e => e.BLBillTemplateID, "IX_BLBillTemplate_Name")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLBillTemplateID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BLBillTemplateClause>(entity =>
            {
                entity.HasKey(e => e.BLBillTemplateClauseID)
                    .IsClustered(false);

                entity.ToTable("BLBillTemplateClause");

                entity.HasIndex(e => new { e.BLBillTemplateID, e.BLClauseID, e.Sequence }, "IX_BLBillTemplateClause_BLBillTemplateID_BLClauseID_Sequence")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLBillTemplateClauseID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BLBillTemplate)
                    .WithMany(p => p.BLBillTemplateClauses)
                    .HasForeignKey(d => d.BLBillTemplateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillTemplateClause_BLBillTemplate");

                entity.HasOne(d => d.BLClause)
                    .WithMany(p => p.BLBillTemplateClauses)
                    .HasForeignKey(d => d.BLClauseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBillTemplateClause_BLClause");
            });

            modelBuilder.Entity<BLBilledTransaction>(entity =>
            {
                entity.HasKey(e => e.BLBilledTransactionID)
                    .IsClustered(false);

                entity.ToTable("BLBilledTransaction");

                entity.HasIndex(e => e.BLBillLineID, "IX_BLBilledTransaction_BLBillLineID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCProjectEntryPostingID, "IX_BLBilledTransaction_PCProjectEntryPostingID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLBilledTransactionID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Value).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.BLBillLine)
                    .WithMany(p => p.BLBilledTransactions)
                    .HasForeignKey(d => d.BLBillLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBilledTransaction_BLBillLine");

                entity.HasOne(d => d.PCProjectEntryPosting)
                    .WithMany(p => p.BLBilledTransactions)
                    .HasForeignKey(d => d.PCProjectEntryPostingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLBilledTransaction_PCProjectEntryPosting");
            });

            modelBuilder.Entity<BLClause>(entity =>
            {
                entity.ToTable("BLClause");

                entity.Property(e => e.BLClauseID).ValueGeneratedNever();

                entity.Property(e => e.BLClauseTypeKey)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BLDetailOrSummaryType)
                    .WithMany(p => p.BLClauses)
                    .HasForeignKey(d => d.BLDetailOrSummaryTypeID)
                    .HasConstraintName("FK_BLClause_BLDetailOrSummaryType");

                entity.HasOne(d => d.PCCostItem)
                    .WithMany(p => p.BLClauses)
                    .HasForeignKey(d => d.PCCostItemID)
                    .HasConstraintName("FK_BLClause_PCCostItem");

                entity.HasOne(d => d.PCCostItemType)
                    .WithMany(p => p.BLClauses)
                    .HasForeignKey(d => d.PCCostItemTypeID)
                    .HasConstraintName("FK_BLClause_PCCostItemType");
            });

            modelBuilder.Entity<BLClauseAttribute>(entity =>
            {
                entity.HasKey(e => e.BLClauseAttributeID)
                    .IsClustered(false);

                entity.ToTable("BLClauseAttribute");

                entity.HasIndex(e => new { e.BLClauseID, e.Name }, "IX_BLClauseAttribute_BLClauseID_Name")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLClauseAttributeID).ValueGeneratedNever();

                entity.Property(e => e.DataTypeName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.BLClause)
                    .WithMany(p => p.BLClauseAttributes)
                    .HasForeignKey(d => d.BLClauseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLClauseAttribute_BLClause");
            });

            modelBuilder.Entity<BLClauseEvent>(entity =>
            {
                entity.HasKey(e => e.BLClauseEventID)
                    .IsClustered(false);

                entity.ToTable("BLClauseEvent");

                entity.HasIndex(e => new { e.BLEventID, e.BLClauseID }, "IX_BLClauseEvent_BLEventID_BLClauseID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLClauseEventID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BLClause)
                    .WithMany(p => p.BLClauseEvents)
                    .HasForeignKey(d => d.BLClauseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLClauseEvent_BLClause");
            });

            modelBuilder.Entity<BLContract>(entity =>
            {
                entity.HasKey(e => e.BLContractID)
                    .HasName("PK_BillingContract")
                    .IsClustered(false);

                entity.ToTable("BLContract");

                entity.HasIndex(e => new { e.PCProjectItemID, e.SLCustomerID }, "IX_BLContract_PCProjectItemID_SLCustomerID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCUnitOfMeasureID, "IX_BLContract_PCUnitOfMeasureID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BLContractID).ValueGeneratedNever();

                entity.Property(e => e.BillableValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastOutstandingToBillRunDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OutstandingToBill).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PriceQuoted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QuantityBilled).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SalesOrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValueBilled).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.PCUnitOfMeasure)
                    .WithMany(p => p.BLContracts)
                    .HasForeignKey(d => d.PCUnitOfMeasureID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BLContract_PCUnitOfMeasure");
            });

            modelBuilder.Entity<BLDetailOrSummaryType>(entity =>
            {
                entity.ToTable("BLDetailOrSummaryType");

                entity.Property(e => e.BLDetailOrSummaryTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BLDiscountOrSurcharge>(entity =>
            {
                entity.ToTable("BLDiscountOrSurcharge");

                entity.Property(e => e.BLDiscountOrSurchargeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BLNextDraftDocumentNo>(entity =>
            {
                entity.ToTable("BLNextDraftDocumentNo");

                entity.Property(e => e.BLNextDraftDocumentNoID).ValueGeneratedNever();
            });

            modelBuilder.Entity<BOM>(entity =>
            {
                entity.ToTable("BOM");

                entity.HasIndex(e => e.BOMCheckedOutID, "IX_BOM_BOMCheckedOutID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMReasonForHoldID, "IX_BOM_BOMReasonForHoldID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMStatusID, "IX_BOM_BOMStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Code, "IX_BOM_Code")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.StockItemID, e.BOMVersion }, "IX_BOM_StockItemID_BOMVersion")
                    .IsUnique();

                entity.Property(e => e.BOMID).ValueGeneratedNever();

                entity.Property(e => e.AutoOverheadComputation)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AverageRunSizeForBatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.BOMShortName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BOMVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeReference)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Initial Version')")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedByUserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HoldDate).HasColumnType("datetime");

                entity.Property(e => e.LastAmendedByUserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastAmendedOn).HasColumnType("datetime");

                entity.Property(e => e.LastAmendedTime).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OverheadCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PerBatchExpenseCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PerUnitExpenseCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PerUnitMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.BOMCheckedOut)
                    .WithMany(p => p.BOMs)
                    .HasForeignKey(d => d.BOMCheckedOutID)
                    .HasConstraintName("FK_BOM_BOMCheckedOut");

                entity.HasOne(d => d.BOMReasonForHold)
                    .WithMany(p => p.BOMs)
                    .HasForeignKey(d => d.BOMReasonForHoldID)
                    .HasConstraintName("FK_BOM_BOMReasonForHold");

                entity.HasOne(d => d.BOMStatus)
                    .WithMany(p => p.BOMs)
                    .HasForeignKey(d => d.BOMStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOM_BOMStatus");
            });

            modelBuilder.Entity<BOMAllocBalance>(entity =>
            {
                entity.ToTable("BOMAllocBalance");

                entity.HasIndex(e => e.AllocationBalanceID, "IX_BOMAllocBalance_AllocationBalanceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMAllocComponentID, "IX_BOMAllocBalance_BOMAllocComponentID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMAllocBalanceID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BOMAllocComponent)
                    .WithMany(p => p.BOMAllocBalances)
                    .HasForeignKey(d => d.BOMAllocComponentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMAllocBalance_BOMAllocComponent");
            });

            modelBuilder.Entity<BOMAllocComponent>(entity =>
            {
                entity.ToTable("BOMAllocComponent");

                entity.HasIndex(e => e.BOMAllocFinishedItemID, "IX_BOMAllocComponent_BOMAllocFinishedItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMAllocationID, "IX_BOMAllocComponent_BOMAllocationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OriginalStockItem, "IX_BOMAllocComponent_OriginalStockItem")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_BOMAllocComponent_StockItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMAllocComponentID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OriginalQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnallocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UsedQuantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BOMAllocFinishedItem)
                    .WithMany(p => p.BOMAllocComponents)
                    .HasForeignKey(d => d.BOMAllocFinishedItemID)
                    .HasConstraintName("FK_BOMAllocComponent_BOMAllocFinishedItem");

                entity.HasOne(d => d.BOMAllocation)
                    .WithMany(p => p.BOMAllocComponents)
                    .HasForeignKey(d => d.BOMAllocationID)
                    .HasConstraintName("FK_BOMAllocComponent_BOMAllocation");
            });

            modelBuilder.Entity<BOMAllocFinishedItem>(entity =>
            {
                entity.ToTable("BOMAllocFinishedItem");

                entity.HasIndex(e => e.BOMAllocationID, "IX_BOMAllocFinishedItem_BOMAllocationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMID, "IX_BOMAllocFinishedItem_BOMID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IsComponentOfID, "IX_BOMAllocFinishedItem_IsComponentOfID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_BOMAllocFinishedItem_StockItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMAllocFinishedItemID).ValueGeneratedNever();

                entity.Property(e => e.BOMVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityBuild).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityForMake).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityUnallocated).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BOMAllocation)
                    .WithMany(p => p.BOMAllocFinishedItems)
                    .HasForeignKey(d => d.BOMAllocationID)
                    .HasConstraintName("FK_BOMAllocFinishedItem_BOMAllocation");

                entity.HasOne(d => d.BOM)
                    .WithMany(p => p.BOMAllocFinishedItems)
                    .HasForeignKey(d => d.BOMID)
                    .HasConstraintName("FK_BOMAllocFinishedItem_BOM");

                entity.HasOne(d => d.IsComponentOf)
                    .WithMany(p => p.InverseIsComponentOf)
                    .HasForeignKey(d => d.IsComponentOfID)
                    .HasConstraintName("FK_BOMAllocFinishedItem_BOMAllocFinishedItem");
            });

            modelBuilder.Entity<BOMBuild>(entity =>
            {
                entity.ToTable("BOMBuild");

                entity.HasIndex(e => new { e.BOMAllocationName, e.BuildDate }, "IX_BOMBuild_BOMAllocationName_BuildDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMMakeupStockOptionID, "IX_BOMBuild_BOMMakeupStockOptionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMMakeupSubAssOptionID, "IX_BOMBuild_BOMMakeupSubAssOptionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BuildDate, "IX_BOMBuild_BuildDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_BOMBuild_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMBuildID).ValueGeneratedNever();

                entity.Property(e => e.BOMAllocationName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuildDate).HasColumnType("datetime");

                entity.Property(e => e.BuildTime).HasColumnType("datetime");

                entity.Property(e => e.BuiltBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserAllocationReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.BOMMakeupStockOption)
                    .WithMany(p => p.BOMBuilds)
                    .HasForeignKey(d => d.BOMMakeupStockOptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMBuild_BOMMakeupStockOption");

                entity.HasOne(d => d.BOMMakeupSubAssOption)
                    .WithMany(p => p.BOMBuilds)
                    .HasForeignKey(d => d.BOMMakeupSubAssOptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMBuild_BOMMakeupSubAssOption");
            });

            modelBuilder.Entity<BOMBuildComponent>(entity =>
            {
                entity.ToTable("BOMBuildComponent");

                entity.HasIndex(e => e.BOMBuildFinishedItemID, "IX_BOMBuildComponent_BOMBuildFinishedItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMBuildID, "IX_BOMBuildComponent_BOMBuildID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BinItemID, "IX_BOMBuildComponent_BinItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_BOMBuildComponent_StockItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMBuildComponentID).ValueGeneratedNever();

                entity.Property(e => e.CostContribution).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BOMBuildFinishedItem)
                    .WithMany(p => p.BOMBuildComponents)
                    .HasForeignKey(d => d.BOMBuildFinishedItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMBuildComponent_BOMBuildFinishedItem");

                entity.HasOne(d => d.BOMBuild)
                    .WithMany(p => p.BOMBuildComponents)
                    .HasForeignKey(d => d.BOMBuildID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMBuildComponent_BOMBuild");
            });

            modelBuilder.Entity<BOMBuildFinishedItem>(entity =>
            {
                entity.ToTable("BOMBuildFinishedItem");

                entity.HasIndex(e => e.BOMBuildID, "IX_BOMBuildFinishedItem_BOMBuildID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMID, "IX_BOMBuildFinishedItem_BOMID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BinItemID, "IX_BOMBuildFinishedItem_BinItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IsComponentOfID, "IX_BOMBuildFinishedItem_IsComponentOfID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_BOMBuildFinishedItem_StockItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMBuildFinishedItemID).ValueGeneratedNever();

                entity.Property(e => e.BOMShortName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BOMVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CostRollUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BOMBuild)
                    .WithMany(p => p.BOMBuildFinishedItems)
                    .HasForeignKey(d => d.BOMBuildID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMBuildFinishedItem_BOMBuild");

                entity.HasOne(d => d.BOM)
                    .WithMany(p => p.BOMBuildFinishedItems)
                    .HasForeignKey(d => d.BOMID)
                    .HasConstraintName("FK_BOMBuildFinishedItem_BOM");

                entity.HasOne(d => d.IsComponentOf)
                    .WithMany(p => p.InverseIsComponentOf)
                    .HasForeignKey(d => d.IsComponentOfID)
                    .HasConstraintName("FK_BOMBuildFinishedItem_BOMBuildFinishedItem");
            });

            modelBuilder.Entity<BOMCheckedOut>(entity =>
            {
                entity.ToTable("BOMCheckedOut");

                entity.HasIndex(e => e.BOMID, "IX_BOMCheckedOut_BOMID")
                    .IsUnique();

                entity.HasIndex(e => e.BOMReasonForHoldID, "IX_BOMCheckedOut_BOMReasonForHoldID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMStatusID, "IX_BOMCheckedOut_BOMStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_BOMCheckedOut_StockItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMCheckedOutID).ValueGeneratedNever();

                entity.Property(e => e.AverageRunSizeForBatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.BOMShortName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BOMVersion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.ChangeReference)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.CheckedOutByUserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.CheckedOutOn).HasColumnType("datetime");

                entity.Property(e => e.CheckedOutTime).HasColumnType("datetime");

                entity.Property(e => e.CreatedByUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HoldDate).HasColumnType("datetime");

                entity.Property(e => e.LastAmendedByUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastamendedOn).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OverheadCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PerBatchExpenseCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PerUnitExpenseCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PerUnitMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.BOMReasonForHold)
                    .WithMany(p => p.BOMCheckedOuts)
                    .HasForeignKey(d => d.BOMReasonForHoldID)
                    .HasConstraintName("FK_BOMCheckedOut_BOMReasonForHold");

                entity.HasOne(d => d.BOMStatus)
                    .WithMany(p => p.BOMCheckedOuts)
                    .HasForeignKey(d => d.BOMStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMCheckedOut_BOMStatus");
            });

            modelBuilder.Entity<BOMCheckedOutOpComponent>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineUnitQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitofMeasure)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.BOMComponent)
                    .WithMany()
                    .HasForeignKey(d => d.BOMComponentID)
                    .HasConstraintName("FK_BOMCheckedOutOpComponents_BomCheckedOutComponents");
            });

            modelBuilder.Entity<BOMCostItem>(entity =>
            {
                entity.ToTable("BOMCostItem");

                entity.HasIndex(e => e.BOMCostTypeID, "IX_BOMCostItem_BOMCostTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BaseUnitID, "IX_BOMCostItem_BaseUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Name, "IX_BOMCostItem_Name")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMCostItemID).ValueGeneratedNever();

                entity.Property(e => e.ChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OHAllocationRatio)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BOMCostType)
                    .WithMany(p => p.BOMCostItems)
                    .HasForeignKey(d => d.BOMCostTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMCostItem_BOMCostType");

                entity.HasOne(d => d.BaseUnit)
                    .WithMany(p => p.BOMCostItems)
                    .HasForeignKey(d => d.BaseUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMCostItem_BOMUnit");
            });

            modelBuilder.Entity<BOMCostItemUnit>(entity =>
            {
                entity.ToTable("BOMCostItemUnit");

                entity.HasIndex(e => e.BOMCostItemID, "IX_BOMCostItemUnit_BOMCostItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMUnitID, "IX_BOMCostItemUnit_BOMUnitID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMCostItemUnitID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MultipleOfBaseUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BOMCostItem)
                    .WithMany(p => p.BOMCostItemUnits)
                    .HasForeignKey(d => d.BOMCostItemID)
                    .HasConstraintName("FK_BOMCostItemUnit_BOMCostItem");

                entity.HasOne(d => d.BOMUnit)
                    .WithMany(p => p.BOMCostItemUnits)
                    .HasForeignKey(d => d.BOMUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMCostItemUnit_BOMUnit");
            });

            modelBuilder.Entity<BOMCostsBooked>(entity =>
            {
                entity.ToTable("BOMCostsBooked");

                entity.HasIndex(e => e.BOMBuildID, "IX_BOMCostsBooked_BOMBuildID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NominalCodeID, "IX_BOMCostsBooked_NominalCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMCostsBookedID).ValueGeneratedNever();

                entity.Property(e => e.CostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CreditAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DebitAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccount)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BOMBuild)
                    .WithMany(p => p.BOMCostsBookeds)
                    .HasForeignKey(d => d.BOMBuildID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMCostsBooked_BOMBuild");
            });

            modelBuilder.Entity<BOMItemType>(entity =>
            {
                entity.ToTable("BOMItemType");

                entity.Property(e => e.BOMItemTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BOMLine>(entity =>
            {
                entity.ToTable("BOMLine");

                entity.HasIndex(e => e.BOMCostItemID, "IX_BOMLine_BOMCostItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.BOMID, e.BOMLineSequence }, "IX_BOMLine_BOMID_BOMLineSequence")
                    .IsUnique();

                entity.HasIndex(e => e.BOMLineTypeID, "IX_BOMLine_BOMLineTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_BOMLine_StockItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMLineID).ValueGeneratedNever();

                entity.Property(e => e.BomLineComment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.ComponentReferences)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentURL)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.BOMCostItem)
                    .WithMany(p => p.BOMLines)
                    .HasForeignKey(d => d.BOMCostItemID)
                    .HasConstraintName("FK_BOMLine_BOMCostItem");

                entity.HasOne(d => d.BOM)
                    .WithMany(p => p.BOMLines)
                    .HasForeignKey(d => d.BOMID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMLine_BOM");

                entity.HasOne(d => d.BOMLineType)
                    .WithMany(p => p.BOMLines)
                    .HasForeignKey(d => d.BOMLineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMLine_BOMLineType");
            });

            modelBuilder.Entity<BOMLineCheckedOut>(entity =>
            {
                entity.ToTable("BOMLineCheckedOut");

                entity.HasIndex(e => e.BOMID, "IX_BOMLineCheckedOut")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMCheckedOutID, "IX_BOMLineCheckedOut_BOMCheckedOutID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMCostItemID, "IX_BOMLineCheckedOut_BOMCostItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMLineTypeID, "IX_BOMLineCheckedOut_BOMLineTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMLineCheckedOutID).ValueGeneratedNever();

                entity.Property(e => e.BomLineCheckedOutComment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.ComponentReferences)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentURL)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BOMCheckedOut)
                    .WithMany(p => p.BOMLineCheckedOuts)
                    .HasForeignKey(d => d.BOMCheckedOutID)
                    .HasConstraintName("FK_BOMLineCheckedOut_BOMCheckedOut1");

                entity.HasOne(d => d.BOMCostItem)
                    .WithMany(p => p.BOMLineCheckedOuts)
                    .HasForeignKey(d => d.BOMCostItemID)
                    .HasConstraintName("FK_BOMLineCheckedOut_BOMCostItem");

                entity.HasOne(d => d.BOMLineType)
                    .WithMany(p => p.BOMLineCheckedOuts)
                    .HasForeignKey(d => d.BOMLineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMLineCheckedOut_BOMLineType");
            });

            modelBuilder.Entity<BOMLineType>(entity =>
            {
                entity.ToTable("BOMLineType");

                entity.HasIndex(e => e.Name, "IX_BOMLineType")
                    .IsUnique();

                entity.Property(e => e.BOMLineTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BOMMakeupStockOption>(entity =>
            {
                entity.ToTable("BOMMakeupStockOption");

                entity.HasIndex(e => e.Name, "IX_BOMStockOption")
                    .IsUnique();

                entity.Property(e => e.BOMMakeupStockOptionID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<BOMMakeupSubAssOption>(entity =>
            {
                entity.ToTable("BOMMakeupSubAssOption");

                entity.HasIndex(e => e.Name, "IX_BOMSubAssOption")
                    .IsUnique();

                entity.Property(e => e.BOMMakeupSubAssOptionID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<BOMOpComponent>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineUnitQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitofMeasure)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.BOMComponent)
                    .WithMany()
                    .HasForeignKey(d => d.BOMComponentID)
                    .HasConstraintName("FK_BOMOpComponents_BomComponents");
            });

            modelBuilder.Entity<BOMStatusType>(entity =>
            {
                entity.ToTable("BOMStatusType");

                entity.HasIndex(e => e.Name, "IX_BOMStatus")
                    .IsUnique();

                entity.Property(e => e.BOMStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BOMUnit>(entity =>
            {
                entity.ToTable("BOMUnit");

                entity.HasIndex(e => e.Name, "IX_BOMUnit")
                    .IsUnique();

                entity.Property(e => e.BOMUnitID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MultipleOfBaseUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BOMVersionsOpComponent>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineUnitQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitofMeasure)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.BOMComponent)
                    .WithMany()
                    .HasForeignKey(d => d.BOMComponentID)
                    .HasConstraintName("FK_BOMVersionsOpComponents_BomVersionsComponents");
            });

            modelBuilder.Entity<BackToBackStatus>(entity =>
            {
                entity.ToTable("BackToBackStatus");

                entity.Property(e => e.BackToBackStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BalancePeriod>(entity =>
            {
                entity.ToTable("BalancePeriod");

                entity.Property(e => e.BalancePeriodID).ValueGeneratedNever();

                entity.Property(e => e.BalancePeriodName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PeriodClosingDate).HasColumnType("datetime");

                entity.Property(e => e.PeriodOpeningDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<BinItem>(entity =>
            {
                entity.ToTable("BinItem");

                entity.HasIndex(e => e.BinName, "IX_BinItem_BinName")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ItemID, "IX_BinItem_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.WarehouseItemID, e.BinName }, "IX_BinItem_WarehouseItemID_BinName")
                    .IsUnique();

                entity.Property(e => e.BinItemID).ValueGeneratedNever();

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateOfLastStockCount).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastCostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OpeningBalanceDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocatedBOM).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedSOP).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UnconfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.BinItems)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BinItem_StockItem");

                entity.HasOne(d => d.WarehouseItem)
                    .WithMany(p => p.BinItems)
                    .HasForeignKey(d => d.WarehouseItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BinItem_WarehouseItem");
            });

            modelBuilder.Entity<BomAllocation>(entity =>
            {
                entity.ToTable("BomAllocation");

                entity.HasIndex(e => e.BomAllocationStatusID, "IX_BomAllocation_BomAllocationStatusID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomAllocationID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AllocationDateTime).HasColumnType("datetime");

                entity.Property(e => e.AllocationNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AllocationReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BomAllocationStatus)
                    .WithMany(p => p.BomAllocations)
                    .HasForeignKey(d => d.BomAllocationStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomAllocation_BomAllocationStatus");
            });

            modelBuilder.Entity<BomAllocationConsolidatedComponentView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BomAllocationConsolidatedComponentView");

                entity.Property(e => e.ComponentLineTypeName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityAllocated).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.QuantityRequired).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.QuantityShort).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockItemProperties)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomAllocationFinishedItemView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BomAllocationFinishedItemView");

                entity.Property(e => e.BuildPackageReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OriginalQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityOutstanding).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.ReferenceVersion)
                    .IsRequired()
                    .HasMaxLength(82)
                    .IsUnicode(false);

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomAllocationStatus>(entity =>
            {
                entity.ToTable("BomAllocationStatus");

                entity.Property(e => e.BomAllocationStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomAllocationWarehouse>(entity =>
            {
                entity.ToTable("BomAllocationWarehouse");

                entity.HasIndex(e => e.BomAllocationID, "IX_BomAllocationWarehouse_BomAllocationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomAllocationWarehouseID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.BomAllocation)
                    .WithMany(p => p.BomAllocationWarehouses)
                    .HasForeignKey(d => d.BomAllocationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomAllocationWarehouse_BomAllocation");
            });

            modelBuilder.Entity<BomAllocationWopOrderLink>(entity =>
            {
                entity.ToTable("BomAllocationWopOrderLink");

                entity.HasIndex(e => e.BomAllocationID, "IX_BomAllocationWopOrderLink_BomAllocationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopOrderID, "IX_BomAllocationWopOrderLink_WopOrderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomAllocationWopOrderLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BomAllocation)
                    .WithMany(p => p.BomAllocationWopOrderLinks)
                    .HasForeignKey(d => d.BomAllocationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomAllocationBuiltItem_BomAllocation");

                entity.HasOne(d => d.WopOrder)
                    .WithMany(p => p.BomAllocationWopOrderLinks)
                    .HasForeignKey(d => d.WopOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomAllocationBuiltItem_WopOrder");
            });

            modelBuilder.Entity<BomAttachedDocument>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BomAttDocsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_BomAttDocsHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.FileName).HasMaxLength(255);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomAttachedDocuments)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BomAttachedDocuments_BomHeaders");
            });

            modelBuilder.Entity<BomBuildPackage>(entity =>
            {
                entity.ToTable("BomBuildPackage");

                entity.HasIndex(e => e.BomBuildPackageTypeID, "IX_BomBuildPackage_BomBuildPackageTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomRecordID, "IX_BomBuildPackage_BomRecordID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.LatestBomCostSessionID, "IX_BomBuildPackage_LatestBomCostSessionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomBuildPackageID).ValueGeneratedNever();

                entity.Property(e => e.CreatedByUserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultBuildQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DefaultCostingQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LastCostedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedByUserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ManufacturingInstructions)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MarkupPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OverheadCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.BomBuildPackageType)
                    .WithMany(p => p.BomBuildPackages)
                    .HasForeignKey(d => d.BomBuildPackageTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomBuildPackage_BomBuildPackageType");

                entity.HasOne(d => d.BomRecord)
                    .WithMany(p => p.BomBuildPackages)
                    .HasForeignKey(d => d.BomRecordID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomBuildPackage_BomRecord");
            });

            modelBuilder.Entity<BomBuildPackageType>(entity =>
            {
                entity.ToTable("BomBuildPackageType");

                entity.Property(e => e.BomBuildPackageTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomBuildProduct>(entity =>
            {
                entity.ToTable("BomBuildProduct");

                entity.HasIndex(e => e.BomRecordID, "IX_BomBuildProduct_BomRecordID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MseStockItemID, "IX_BomBuildProduct_MseStockItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomBuildProductID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.BomRecord)
                    .WithMany(p => p.BomBuildProducts)
                    .HasForeignKey(d => d.BomRecordID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomBuildProduct_BomRecord");

                entity.HasOne(d => d.MseStockItem)
                    .WithMany(p => p.BomBuildProducts)
                    .HasForeignKey(d => d.MseStockItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomBuildProduct_MseStockItem");
            });

            modelBuilder.Entity<BomBuildSession>(entity =>
            {
                entity.ToTable("BomBuildSession");

                entity.HasIndex(e => e.BomAllocationID, "IX_BomBuildSession_BomAllocationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomBuildSessionStatusID, "IX_BomBuildSession_BomBuildSessionStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomBuildSessionTypeID, "IX_BomBuildSession_BomBuildSessionTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomBuildSessionID).ValueGeneratedNever();

                entity.Property(e => e.AllocationNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AllocationReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomBuildSessionStatusID).HasDefaultValueSql("((2))");

                entity.Property(e => e.BuildDateTime).HasColumnType("datetime");

                entity.Property(e => e.BuildNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuildReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BuiltBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BomBuildSessionNavigation)
                    .WithOne(p => p.BomBuildSession)
                    .HasForeignKey<BomBuildSession>(d => d.BomBuildSessionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomBuildSession_BomAllocation");

                entity.HasOne(d => d.BomBuildSessionStatus)
                    .WithMany(p => p.BomBuildSessions)
                    .HasForeignKey(d => d.BomBuildSessionStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomBuildSession_BomBuildSessionStatus");

                entity.HasOne(d => d.BomBuildSessionType)
                    .WithMany(p => p.BomBuildSessions)
                    .HasForeignKey(d => d.BomBuildSessionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomBuildSession_BomBuildSessionType");
            });

            modelBuilder.Entity<BomBuildSessionStatus>(entity =>
            {
                entity.ToTable("BomBuildSessionStatus");

                entity.Property(e => e.BomBuildSessionStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomBuildSessionType>(entity =>
            {
                entity.ToTable("BomBuildSessionType");

                entity.Property(e => e.BomBuildSessionTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomCheckedOutAttachedDocument>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BOMCheckedOutAttDocsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_BOMCheckedOutAttDocsHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.FileName).HasMaxLength(255);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomCheckedOutAttachedDocuments)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BOMCheckedOutAttachedDocuments_BOMCheckedOutHeaders");
            });

            modelBuilder.Entity<BomCheckedOutComponent>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BOMCheckedOutCompsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_BOMCheckedOutCompsHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence }, "IX_BOMCheckedOutCompsHeaderID+Sequence")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.StockCode }, "IX_BOMCheckedOutCompsHeaderID+StockCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockCode, "IX_BOMCheckedOutCompsStockCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.StockCode, e.Sequence }, "IX_BOMCheckedOutCompsStockCode+Sequence")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Sequence, e.StockCode }, "IX_Seq+StockCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BinLocation)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineUnitQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Location)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SubstitutePart)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UnitofMeasure)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UseHeaderDefaultScrap)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomCheckedOutComponents)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BOMCheckedOutComponents_BOMCheckedOutHeaders");
            });

            modelBuilder.Entity<BomCheckedOutDrawing>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BOMCheckedOutDrawingsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_BOMCheckedOutDrawingsHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomCheckedOutDrawings)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BOMCheckedOutDrawings_BOMCheckedOutHeaders");
            });

            modelBuilder.Entity<BomCheckedOutHeader>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BOMCheckedOutHeadersPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.BomReference, "IX_BOMCheckedOutHeadersBOMCheckedOutRef")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BomReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Carton).HasColumnType("ntext");

                entity.Property(e => e.CartonPer).HasColumnType("ntext");

                entity.Property(e => e.CheckedOutBy).HasMaxLength(50);

                entity.Property(e => e.CompOpTimeStamp)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CostPcnt)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Custom_1)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#1");

                entity.Property(e => e.Custom_10)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#10");

                entity.Property(e => e.Custom_2)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#2");

                entity.Property(e => e.Custom_3)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#3");

                entity.Property(e => e.Custom_4)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#4");

                entity.Property(e => e.Custom_5)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#5");

                entity.Property(e => e.Custom_6)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#6");

                entity.Property(e => e.Custom_7)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#7");

                entity.Property(e => e.Custom_8)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#8");

                entity.Property(e => e.Custom_9)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#9");

                entity.Property(e => e.DefaultQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Entered).HasColumnType("datetime");

                entity.Property(e => e.ImageForWoDocs).HasMaxLength(255);

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastCosted).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.MachineRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSet).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Per).HasColumnType("ntext");

                entity.Property(e => e.QtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Revision)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Standard).HasColumnType("ntext");

                entity.Property(e => e.StandardMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContract).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SuggestedSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Timestamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TopLevel)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalLabourOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMachineOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMatOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalOverheads).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");

                entity.Property(e => e.Weight).HasColumnType("ntext");
            });

            modelBuilder.Entity<BomCheckedOutImage>(entity =>
            {
                entity.ToTable("BomCheckedOutImage");

                entity.Property(e => e.Picture).HasColumnType("image");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomCheckedOutImages)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BOMCheckedOutImage_BOMCheckedOutHeaders");
            });

            modelBuilder.Entity<BomCheckedOutOperation>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BOMCheckedOutOpsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.HeaderID, e.ProcessReference }, "IX_BOMCheckedOutOpsHeader+Process")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence, e.ProcessReference }, "IX_BOMCheckedOutOpsHeader+Seq+Process")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence }, "IX_BOMCheckedOutOpsHeader+Sequence")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_BOMCheckedOutOpsHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DelayHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelayMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupHrs).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople)
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LabourReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Overlap).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RunTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.RunTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5To).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContLeadTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubContractProcess_).HasColumnName("SubContractProcess?");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomCheckedOutOperations)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BOMCheckedOutOperations_BOMCheckedOutHeaders1");
            });

            modelBuilder.Entity<BomComponent>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BomCompsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_BomCompsHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence }, "IX_BomCompsHeaderID+Sequence")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.StockCode }, "IX_BomCompsHeaderID+StockCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockCode, "IX_BomCompsStockCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.StockCode, e.Sequence }, "IX_BomCompsStockCode+Sequence")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Sequence, e.StockCode }, "IX_Seq+StockCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BinLocation)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineUnitQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Location)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SubstitutePart)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UnitofMeasure)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UseHeaderDefaultScrap)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomComponents)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BomComponents_BomHeaders");
            });

            modelBuilder.Entity<BomComponentLine>(entity =>
            {
                entity.ToTable("BomComponentLine");

                entity.HasIndex(e => e.BomBuildPackageID, "IX_BomComponentLine_BomBuildPackageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomComponentLineTypeID, "IX_BomComponentLine_BomComponentLineTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomRecordID, "IX_BomComponentLine_BomRecordID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockCode, "IX_BomComponentLine_StockCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemUnitID, "IX_BomComponentLine_StockItemUnitID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomComponentLineID).ValueGeneratedNever();

                entity.Property(e => e.BomCommentLine)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Consumed)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Instructions)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.Quantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.ScrapPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SequenceNumber)
                    .HasColumnType("decimal(15, 6)")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.BomBuildPackage)
                    .WithMany(p => p.BomComponentLines)
                    .HasForeignKey(d => d.BomBuildPackageID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMComponentLine_BomBuildPackage");

                entity.HasOne(d => d.BomComponentLineType)
                    .WithMany(p => p.BomComponentLines)
                    .HasForeignKey(d => d.BomComponentLineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomComponentLine_BomComponentLineType");
            });

            modelBuilder.Entity<BomComponentLineType>(entity =>
            {
                entity.ToTable("BomComponentLineType");

                entity.Property(e => e.BomComponentLineTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomComponentReference>(entity =>
            {
                entity.ToTable("BomComponentReference");

                entity.HasIndex(e => e.BomComponentLineID, "IX_BomComponentReference_BomComponentLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomComponentReferenceID).ValueGeneratedNever();

                entity.Property(e => e.ComponentReference)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BomComponentLine)
                    .WithMany(p => p.BomComponentReferences)
                    .HasForeignKey(d => d.BomComponentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomComponentReference_BOMComponentLine");
            });

            modelBuilder.Entity<BomCost>(entity =>
            {
                entity.ToTable("BomCost");

                entity.HasIndex(e => e.BomCostSessionID, "IX_BomCost_BomCostSessionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomCostTypeID, "IX_BomCost_BomCostTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_BomCost_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MsmCostHeadingTypeID, "IX_BomCost_MsmCostHeadingTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SubassemblyCostSessionID, "IX_BomCost_SubassemblyCostSessionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomCostID).ValueGeneratedNever();

                entity.Property(e => e.Consumed)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CostHeadingName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ForeignCurrencyName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ForeignCurrencySymbol)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.MarginPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Markup).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.MarkupPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OperationDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OperationReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Overhead).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OverheadPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Profit).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockQuantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Units)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.BomCostSession)
                    .WithMany(p => p.BomCosts)
                    .HasForeignKey(d => d.BomCostSessionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomCost_BomCostSession");

                entity.HasOne(d => d.BomCostType)
                    .WithMany(p => p.BomCosts)
                    .HasForeignKey(d => d.BomCostTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomCost_BomCostType");

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.BomCosts)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .HasConstraintName("FK_BomCost_MsmCostHeading");

                entity.HasOne(d => d.MsmCostHeadingType)
                    .WithMany(p => p.BomCosts)
                    .HasForeignKey(d => d.MsmCostHeadingTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomCost_MsmCostHeadingType");

                entity.HasOne(d => d.OpOperationPhase)
                    .WithMany(p => p.BomCosts)
                    .HasForeignKey(d => d.OpOperationPhaseID)
                    .HasConstraintName("FK_BomCost_OpOperationPhase");
            });

            modelBuilder.Entity<BomCostSession>(entity =>
            {
                entity.ToTable("BomCostSession");

                entity.HasIndex(e => e.BomBuildPackageID, "IX_BomCostSession_BomBuildPackageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomBuildPackageTypeID, "IX_BomCostSession_BomBuildPackageTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomRecordID, "IX_BomCostSession_BomRecordID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomVersionStatusID, "IX_BomCostSession_BomVersionStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CheckedOutBomBuildPackageID, "IX_BomCostSession_CheckedOutBomBuildPackageID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomCostSessionID).ValueGeneratedNever();

                entity.Property(e => e.AccountsSellingPrice).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AverageMarginPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AverageMarkup).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CalculatedUnitCost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CostedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostingFamilyGuid)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CostingLog)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCosted).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.QtyCosted).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SuggestedSellingPrice).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalCostIncludingOverheads).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalMarkup).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalOverheads).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalSalesValue).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.UnitProfit).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.UserRevisionNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.BomBuildPackage)
                    .WithMany(p => p.BomCostSessions)
                    .HasForeignKey(d => d.BomBuildPackageID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomCostSession_BomBuildPackage");

                entity.HasOne(d => d.BomBuildPackageType)
                    .WithMany(p => p.BomCostSessions)
                    .HasForeignKey(d => d.BomBuildPackageTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomCostSession_BomBuildPackageType");

                entity.HasOne(d => d.BomRecord)
                    .WithMany(p => p.BomCostSessions)
                    .HasForeignKey(d => d.BomRecordID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomCostSession_BomRecord");

                entity.HasOne(d => d.BomVersionStatus)
                    .WithMany(p => p.BomCostSessions)
                    .HasForeignKey(d => d.BomVersionStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomCostSession_BomVersionStatus");
            });

            modelBuilder.Entity<BomCostSessionTotal>(entity =>
            {
                entity.ToTable("BomCostSessionTotal");

                entity.HasIndex(e => e.BomCostSessionID, "IX_BomCostSessionTotal_BomCostSessionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_BomCostSessionTotal_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MsmCostHeadingTypeID, "IX_BomCostSessionTotal_MsmCostHeadingTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomCostSessionTotalID).ValueGeneratedNever();

                entity.Property(e => e.CostHeadingName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalCostIncludingOverheads).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalMarkup).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalOverheads).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalSalesValue).HasColumnType("decimal(18, 6)");

                entity.HasOne(d => d.BomCostSession)
                    .WithMany(p => p.BomCostSessionTotals)
                    .HasForeignKey(d => d.BomCostSessionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomCostSessionTotal_BomCostSession");

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.BomCostSessionTotals)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomCostSessionTotal_MsmCostHeading");

                entity.HasOne(d => d.MsmCostHeadingType)
                    .WithMany(p => p.BomCostSessionTotals)
                    .HasForeignKey(d => d.MsmCostHeadingTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomCostSessionTotal_MsmCostHeadingType");
            });

            modelBuilder.Entity<BomCostType>(entity =>
            {
                entity.ToTable("BomCostType");

                entity.Property(e => e.BomCostTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomCustomField>(entity =>
            {
                entity.ToTable("BomCustomField");

                entity.Property(e => e.BomCustomFieldID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FieldValue)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BomDrawing>(entity =>
            {
                entity.ToTable("BomDrawing");

                entity.HasIndex(e => e.BomRecordID, "IX_BomDrawing_BomRecordID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DrawDrawingID, "IX_BomDrawing_DrawDrawingID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomDrawingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BomRecord)
                    .WithMany(p => p.BomDrawings)
                    .HasForeignKey(d => d.BomRecordID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomDrawing_BomRecord");

                entity.HasOne(d => d.DrawDrawing)
                    .WithMany(p => p.BomDrawings)
                    .HasForeignKey(d => d.DrawDrawingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomDrawing_DrawDrawing");
            });

            modelBuilder.Entity<BomDrawing1>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BomDrawingsPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("BomDrawings");

                entity.HasIndex(e => e.HeaderID, "IX_BomDrawingsHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomDrawing1s)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BomDrawings_BomHeaders");
            });

            modelBuilder.Entity<BomFinishedProduct>(entity =>
            {
                entity.Property(e => e.CostPcnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.HoldQuantity).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomFinishedProducts)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BomFinishedProducts_BomHeaders");
            });

            modelBuilder.Entity<BomGroup>(entity =>
            {
                entity.ToTable("BomGroup");

                entity.Property(e => e.BomGroupID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomGroupLink>(entity =>
            {
                entity.ToTable("BomGroupLink");

                entity.HasIndex(e => e.BomBuildPackageID, "IX_BomGroupLink_BomBuildPackageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomGroupID, "IX_BomGroupLink_BomGroupID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomGroupLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BomBuildPackage)
                    .WithMany(p => p.BomGroupLinks)
                    .HasForeignKey(d => d.BomBuildPackageID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomGroupLink_BomBuildPackage");

                entity.HasOne(d => d.BomGroup)
                    .WithMany(p => p.BomGroupLinks)
                    .HasForeignKey(d => d.BomGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomGroupLink_BomGroup");
            });

            modelBuilder.Entity<BomHeader>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BomHeadersPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.BomReference, "IX_BomHeadersBomRef")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BomReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Carton).HasColumnType("ntext");

                entity.Property(e => e.CartonPer).HasColumnType("ntext");

                entity.Property(e => e.CompOpTimeStamp)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CostPcnt)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Custom_1)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#1");

                entity.Property(e => e.Custom_10)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#10");

                entity.Property(e => e.Custom_2)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#2");

                entity.Property(e => e.Custom_3)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#3");

                entity.Property(e => e.Custom_4)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#4");

                entity.Property(e => e.Custom_5)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#5");

                entity.Property(e => e.Custom_6)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#6");

                entity.Property(e => e.Custom_7)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#7");

                entity.Property(e => e.Custom_8)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#8");

                entity.Property(e => e.Custom_9)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#9");

                entity.Property(e => e.DefaultQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Entered).HasColumnType("datetime");

                entity.Property(e => e.ImageForWoDocs).HasMaxLength(255);

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastCosted).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.MachineRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSet).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Per).HasColumnType("ntext");

                entity.Property(e => e.QtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Revision)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Standard).HasColumnType("ntext");

                entity.Property(e => e.StandardMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContract).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SuggestedSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Timestamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TopLevel)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalLabourOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMachineOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMatOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalOverheads).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");

                entity.Property(e => e.Weight).HasColumnType("ntext");
            });

            modelBuilder.Entity<BomHistory>(entity =>
            {
                entity.ToTable("BomHistory");

                entity.HasIndex(e => e.BomHistoryTypeID, "IX_BomHistory_BomHistoryTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomRecordID, "IX_BomHistory_BomRecordID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomHistoryID).ValueGeneratedNever();

                entity.Property(e => e.BomDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BomFamilyIdentifier)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.BomHistoryType)
                    .WithMany(p => p.BomHistories)
                    .HasForeignKey(d => d.BomHistoryTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomHistory_BomHistoryType");
            });

            modelBuilder.Entity<BomHistoryType>(entity =>
            {
                entity.ToTable("BomHistoryType");

                entity.Property(e => e.BomHistoryTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomImage>(entity =>
            {
                entity.HasKey(e => e.BomRecordID);

                entity.ToTable("BomImage");

                entity.HasIndex(e => e.BomRecordID, "IX_BomImage_BomRecordID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomRecordID).ValueGeneratedNever();

                entity.Property(e => e.Picture)
                    .IsRequired()
                    .HasColumnType("image");

                entity.HasOne(d => d.BomRecord)
                    .WithOne(p => p.BomImage)
                    .HasForeignKey<BomImage>(d => d.BomRecordID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomImage_BomRecord");
            });

            modelBuilder.Entity<BomNote>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Notes).HasColumnType("ntext");
            });

            modelBuilder.Entity<BomOperation>(entity =>
            {
                entity.HasKey(e => e.BomOperationID)
                    .IsClustered(false);

                entity.ToTable("BomOperation");

                entity.HasIndex(e => e.BomOperationLineID, "IX_BomOperation_BomOperationLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomOperationID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OverlapPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OverlapQuantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityPerRun).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.BomOperationLine)
                    .WithMany(p => p.BomOperations)
                    .HasForeignKey(d => d.BomOperationLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomOperation_BomOperationLine");
            });

            modelBuilder.Entity<BomOperation1>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BomOpsPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("BomOperations");

                entity.HasIndex(e => new { e.HeaderID, e.ProcessReference }, "IX_BomOpsHeader+Process")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence, e.ProcessReference }, "IX_BomOpsHeader+Seq+Process")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence }, "IX_BomOpsHeader+Sequence")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_BomOpsHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DelayHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelayMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupHrs).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople)
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LabourReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Overlap).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RunTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.RunTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5To).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContLeadTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubContractProcess_).HasColumnName("SubContractProcess?");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomOperation1s)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BomOperations_BomHeaders1");
            });

            modelBuilder.Entity<BomOperationComponent>(entity =>
            {
                entity.ToTable("BomOperationComponent");

                entity.HasIndex(e => e.BomComponentLineID, "IX_BomOperationComponent_BomComponentLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomOperationLineID, "IX_BomOperationComponent_BomOperationLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomOperationComponentID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BomComponentLine)
                    .WithMany(p => p.BomOperationComponents)
                    .HasForeignKey(d => d.BomComponentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomOperationComponent_BomComponentLine");

                entity.HasOne(d => d.BomOperationLine)
                    .WithMany(p => p.BomOperationComponents)
                    .HasForeignKey(d => d.BomOperationLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomOperationComponent_BomOperationLine");
            });

            modelBuilder.Entity<BomOperationLine>(entity =>
            {
                entity.ToTable("BomOperationLine");

                entity.HasIndex(e => e.BomBuildPackageID, "IX_BomOperationLine_BomBuildPackageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomOperationLineTypeID, "IX_BomOperationLine_BomOperationLineTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OpOperationID, "IX_BomOperationLine_OpOperationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomOperationLineID).ValueGeneratedNever();

                entity.Property(e => e.BomCommentLine)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.SequenceNumber)
                    .HasColumnType("decimal(15, 6)")
                    .HasDefaultValueSql("((2))");

                entity.HasOne(d => d.BomBuildPackage)
                    .WithMany(p => p.BomOperationLines)
                    .HasForeignKey(d => d.BomBuildPackageID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomOperationLine_BomBuildPackage");

                entity.HasOne(d => d.BomOperationLineType)
                    .WithMany(p => p.BomOperationLines)
                    .HasForeignKey(d => d.BomOperationLineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomOperationLine_BomOperationLineType");
            });

            modelBuilder.Entity<BomOperationLineType>(entity =>
            {
                entity.ToTable("BomOperationLineType");

                entity.Property(e => e.BomOperationLineTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomOperationResource>(entity =>
            {
                entity.ToTable("BomOperationResource");

                entity.HasIndex(e => e.BomOperationID, "IX_BomOperationResource_BomOperationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OpOperationPhaseID, "IX_BomOperationResource_OpOperationPhaseID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OpOperationResourceTypeID, "IX_BomOperationResource_OpOperationResourceTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomOperationResourceID).ValueGeneratedNever();

                entity.Property(e => e.CostQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.CostRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FixedLengthQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ManningLevel)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SequenceNumber).HasColumnType("decimal(12, 5)");

                entity.HasOne(d => d.BomOperation)
                    .WithMany(p => p.BomOperationResources)
                    .HasForeignKey(d => d.BomOperationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomOperationResource_BomOperation");

                entity.HasOne(d => d.OpOperationPhase)
                    .WithMany(p => p.BomOperationResources)
                    .HasForeignKey(d => d.OpOperationPhaseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomOperationResource_OpOperationPhase");

                entity.HasOne(d => d.OpOperationResourceType)
                    .WithMany(p => p.BomOperationResources)
                    .HasForeignKey(d => d.OpOperationResourceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomOperationResource_OpOperationResourceType");
            });

            modelBuilder.Entity<BomOperationSubcontractQuantityBreak>(entity =>
            {
                entity.ToTable("BomOperationSubcontractQuantityBreak");

                entity.HasIndex(e => e.BomOperationSubcontractSupplierID, "IX_BomOperationSubcontractQuantityBreak_BomOperationSubcontractSupplierID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomOperationSubcontractQuantityBreakID).ValueGeneratedNever();

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityFrom)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityTo)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.BomOperationSubcontractSupplier)
                    .WithMany(p => p.BomOperationSubcontractQuantityBreaks)
                    .HasForeignKey(d => d.BomOperationSubcontractSupplierID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomOperationSubcontractQuantityBreak_BomOperationSubcontractQuantityBreak");
            });

            modelBuilder.Entity<BomOperationSubcontractSupplier>(entity =>
            {
                entity.ToTable("BomOperationSubcontractSupplier");

                entity.HasIndex(e => e.BomOperationID, "IX_BomOperationSubcontractSupplier_BomOperationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_BomOperationSubcontractSupplier_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomOperationSubcontractSupplierID).ValueGeneratedNever();

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderReference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.BomOperation)
                    .WithMany(p => p.BomOperationSubcontractSuppliers)
                    .HasForeignKey(d => d.BomOperationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomOperationSubcontractSupplier_BomOperation");

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.BomOperationSubcontractSuppliers)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomOperationSubcontractSupplier_MsmCostHeading");
            });

            modelBuilder.Entity<BomReasonForHold>(entity =>
            {
                entity.ToTable("BomReasonForHold");

                entity.HasIndex(e => e.Code, "IX_BomReasonForHold_Code")
                    .IsUnique();

                entity.Property(e => e.BomReasonForHoldId).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");
            });

            modelBuilder.Entity<BomRecord>(entity =>
            {
                entity.ToTable("BomRecord");

                entity.HasIndex(e => e.BomReasonForHoldID, "IX_BomRecord_BomReasonForHoldID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomVersionStatusID, "IX_BomRecord_BomVersionStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomVersionStatusID, "IX_BomRecord_BomVersionStatusID_Plus")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CheckedOutBomRecordID, "IX_BomRecord_CheckedOutBomRecordID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomRecordID).ValueGeneratedNever();

                entity.Property(e => e.AnalysisCode1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode10)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode11)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode12)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode13)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode14)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode15)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode16)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode17)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode18)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode19)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode20)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode5)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode6)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode7)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode8)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode9)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BomFamilyIdentifier)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeReference)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CheckedOutBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CheckedOutDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedByUserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EffectiveFromDate).HasColumnType("datetime");

                entity.Property(e => e.EffectiveToDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedByUserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OnHoldDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.QualityStandard)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserRevisionNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.BomReasonForHold)
                    .WithMany(p => p.BomRecords)
                    .HasForeignKey(d => d.BomReasonForHoldID)
                    .HasConstraintName("FK_BomRecord_BOMReasonForHold");

                entity.HasOne(d => d.BomVersionStatus)
                    .WithMany(p => p.BomRecords)
                    .HasForeignKey(d => d.BomVersionStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BomRecord_BomVersionStatus");
            });

            modelBuilder.Entity<BomRevisionHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BomRevisionHistory");

                entity.Property(e => e.BuiltStockItemReference).HasMaxLength(50);

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Revision).HasMaxLength(50);

                entity.Property(e => e.UserID).HasMaxLength(50);
            });

            modelBuilder.Entity<BomSetting>(entity =>
            {
                entity.ToTable("BomSetting");

                entity.Property(e => e.BomSettingID).ValueGeneratedNever();

                entity.Property(e => e.BuildRoundingNominalAccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuildRoundingNominalAccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuildRoundingNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ComponentSequenceInterval)
                    .HasColumnType("decimal(15, 6)")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.ComponentSequenceStart)
                    .HasColumnType("decimal(15, 6)")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.CostAnalysisColourPalette).HasDefaultValueSql("((12))");

                entity.Property(e => e.CostAnalysisIncludeOverheadsInDistribution)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CostAnalysisShowUnitCostIncludingOverheads)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultBuildQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DefaultCostQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.HierarchySeparator)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OperationSequenceInterval)
                    .HasColumnType("decimal(15, 6)")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.OperationSequenceStart)
                    .HasColumnType("decimal(15, 6)")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.PrintConsolidatedPickingList)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PromptWhenStockHasZeroCosts)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PromptWhenZeroStockLevels)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumberIncrement).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.WopNumberPrefix)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomVersionStatus>(entity =>
            {
                entity.ToTable("BomVersionStatus");

                entity.Property(e => e.BomVersionStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BomVersionsAttachedDocument>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BOMVersionsAttDocsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_BOMVersionsAttDocsHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.FileName).HasMaxLength(255);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomVersionsAttachedDocuments)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BOMVersionsAttachedDocuments_BOMVersionsHeaders");
            });

            modelBuilder.Entity<BomVersionsComponent>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BOMVersionsCompsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_BOMVersionsCompsHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence }, "IX_BOMVersionsCompsHeaderID+Sequence")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.StockCode }, "IX_BOMVersionsCompsHeaderID+StockCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockCode, "IX_BOMVersionsCompsStockCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.StockCode, e.Sequence }, "IX_BOMVersionsCompsStockCode+Sequence")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Sequence, e.StockCode }, "IX_Seq+StockCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BinLocation)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineUnitQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Location)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SubstitutePart)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UnitofMeasure)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UseHeaderDefaultScrap)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomVersionsComponents)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BOMVersionsComponents_BOMVersionsHeaders");
            });

            modelBuilder.Entity<BomVersionsDrawing>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BOMVersionsDrawingsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_BOMVersionsDrawingsHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomVersionsDrawings)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BOMVersionsDrawings_BOMVersionsHeaders");
            });

            modelBuilder.Entity<BomVersionsHeader>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BOMVersionsHeadersPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.BomReference, "IX_BOMVersionsHeadersBOMVersionsRef")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BomReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Carton).HasColumnType("ntext");

                entity.Property(e => e.CartonPer).HasColumnType("ntext");

                entity.Property(e => e.CompOpTimeStamp)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CostPcnt)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Custom_1)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#1");

                entity.Property(e => e.Custom_10)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#10");

                entity.Property(e => e.Custom_2)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#2");

                entity.Property(e => e.Custom_3)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#3");

                entity.Property(e => e.Custom_4)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#4");

                entity.Property(e => e.Custom_5)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#5");

                entity.Property(e => e.Custom_6)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#6");

                entity.Property(e => e.Custom_7)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#7");

                entity.Property(e => e.Custom_8)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#8");

                entity.Property(e => e.Custom_9)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#9");

                entity.Property(e => e.DefaultQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Entered).HasColumnType("datetime");

                entity.Property(e => e.ImageForWoDocs).HasMaxLength(255);

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastCosted).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.MachineRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSet).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Per).HasColumnType("ntext");

                entity.Property(e => e.QtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Revision)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Standard).HasColumnType("ntext");

                entity.Property(e => e.StandardMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContract).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SuggestedSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Timestamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TopLevel)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalLabourOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMachineOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMatOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalOverheads).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");

                entity.Property(e => e.Weight).HasColumnType("ntext");
            });

            modelBuilder.Entity<BomVersionsImage>(entity =>
            {
                entity.ToTable("BomVersionsImage");

                entity.Property(e => e.Picture).HasColumnType("image");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomVersionsImages)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BOMVersionsImage_BOMVersionsHeaders");
            });

            modelBuilder.Entity<BomVersionsOperation>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_BOMVersionsOpsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.HeaderID, e.ProcessReference }, "IX_BOMVersionsOpsHeader+Process")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence, e.ProcessReference }, "IX_BOMVersionsOpsHeader+Seq+Process")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence }, "IX_BOMVersionsOpsHeader+Sequence")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_BOMVersionsOpsHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DelayHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelayMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupHrs).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople)
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LabourReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Overlap).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RunTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.RunTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5To).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContLeadTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubContractProcess_).HasColumnName("SubContractProcess?");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.BomVersionsOperations)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BOMVersionsOperations_BOMVersionsHeaders1");
            });

            modelBuilder.Entity<BuildSessionActualNominalPosting>(entity =>
            {
                entity.ToTable("BuildSessionActualNominalPosting");

                entity.Property(e => e.BuildSessionActualNominalPostingID).ValueGeneratedNever();

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BomBuildSession)
                    .WithMany(p => p.BuildSessionActualNominalPostings)
                    .HasForeignKey(d => d.BomBuildSessionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuildSessionActualNominalPosting_BomBuildSession");
            });

            modelBuilder.Entity<CBAccount>(entity =>
            {
                entity.HasKey(e => e.CBAccountID)
                    .IsClustered(false);

                entity.ToTable("CBAccount");

                entity.HasIndex(e => e.AccountCode, "IX_CBAccount_AccountCode")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.AccountSYSCurrencyID, "IX_CBAccount_AccountSYSCurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBAccountTypeID, "IX_CBAccount_CBAccountTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBAccountID).ValueGeneratedNever();

                entity.Property(e => e.AccountCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AccountDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BICNumber)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankAccountHolderName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BankAccountNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BankAccountNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BankAccountNominalNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.BankChargesNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BankChargesNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BankChargesNominalNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.BankCloudDisabledDateTime).HasColumnType("datetime");

                entity.Property(e => e.BankSortCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentBalanceInAccntCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CurrentBalanceInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ElectronicBank)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeDiffNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeDiffNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeDiffNominalNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IBANNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.LastStatementDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OverdraftLimit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StatementBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StatusChangedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatusChangedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.AccountSYSCurrency)
                    .WithMany(p => p.CBAccounts)
                    .HasForeignKey(d => d.AccountSYSCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBAccount_SYSCurrency");

                entity.HasOne(d => d.CBAccountType)
                    .WithMany(p => p.CBAccounts)
                    .HasForeignKey(d => d.CBAccountTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBAccount_CBAccountType");

                entity.HasOne(d => d.CBBankFeedAccount)
                    .WithMany(p => p.CBAccounts)
                    .HasForeignKey(d => d.CBBankFeedAccountID)
                    .HasConstraintName("FK_CBAccount_CBBankFeedAccountID");

                entity.HasOne(d => d.SYSAccountStatus)
                    .WithMany(p => p.CBAccounts)
                    .HasForeignKey(d => d.SYSAccountStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBAccount_SYSAccountStatus");
            });

            modelBuilder.Entity<CBAccountContact>(entity =>
            {
                entity.HasKey(e => e.CBAccountContactID)
                    .IsClustered(false);

                entity.ToTable("CBAccountContact");

                entity.HasIndex(e => e.CBAccountID, "IX_CBAccountContact_CBAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBAccountContactID).ValueGeneratedNever();

                entity.Property(e => e.ContactAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.CBAccountContacts)
                    .HasForeignKey(d => d.CBAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBAccountContact_CBAccount");
            });

            modelBuilder.Entity<CBAccountLocationType>(entity =>
            {
                entity.ToTable("CBAccountLocationType");

                entity.Property(e => e.CBAccountLocationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBAccountMemo>(entity =>
            {
                entity.HasKey(e => e.CBAccountMemoID)
                    .IsClustered(false);

                entity.ToTable("CBAccountMemo");

                entity.HasIndex(e => e.CBAccountID, "IX_CBAccountMemo_CBAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBAccountMemoID).ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MemoCreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MemoText)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TimeAndDateMemoCreated).HasColumnType("datetime");

                entity.Property(e => e.TimeAndDateMemoLastUpdated).HasColumnType("datetime");

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.CBAccountMemos)
                    .HasForeignKey(d => d.CBAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBAccountMemo_CBAccount");
            });

            modelBuilder.Entity<CBAccountType>(entity =>
            {
                entity.ToTable("CBAccountType");

                entity.Property(e => e.CBAccountTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBBankFeedAccount>(entity =>
            {
                entity.ToTable("CBBankFeedAccount");

                entity.Property(e => e.CBBankFeedAccountID).ValueGeneratedNever();

                entity.Property(e => e.AccountGuid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(69)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastDownloadDateTime).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SiteAccountGuid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBBankFeedAccountPosting>(entity =>
            {
                entity.HasKey(e => e.CBBankFeedAccountPostingID)
                    .IsClustered(false);

                entity.ToTable("CBBankFeedAccountPosting");

                entity.HasIndex(e => e.CBBankFeedTransactionID, "IX_CBBankFeedAccountPosting_CBBankFeedTransactionID")
                    .IsClustered();

                entity.Property(e => e.CBBankFeedAccountPostingID).ValueGeneratedNever();

                entity.Property(e => e.AccountantNarrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CBBankFeedTransaction)
                    .WithMany(p => p.CBBankFeedAccountPostings)
                    .HasForeignKey(d => d.CBBankFeedTransactionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBBankFeedAccountPosting_CBBankFeedTransaction");
            });

            modelBuilder.Entity<CBBankFeedPostingInstruction>(entity =>
            {
                entity.HasKey(e => e.CBBankFeedPostingInstructionID)
                    .IsClustered(false);

                entity.ToTable("CBBankFeedPostingInstruction");

                entity.HasIndex(e => e.CBBankFeedAccountPostingID, "IX_CBBankFeedPostingInstruction_CBBankFeedAccountPostingID")
                    .IsClustered();

                entity.Property(e => e.CBBankFeedPostingInstructionID).ValueGeneratedNever();

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CBBankFeedAccountPosting)
                    .WithMany(p => p.CBBankFeedPostingInstructions)
                    .HasForeignKey(d => d.CBBankFeedAccountPostingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBBankFeedPostingInstruction_CBBankFeedAccountPosting");
            });

            modelBuilder.Entity<CBBankFeedProcessStatus>(entity =>
            {
                entity.ToTable("CBBankFeedProcessStatus");

                entity.Property(e => e.CBBankFeedProcessStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBBankFeedReconciliationStatus>(entity =>
            {
                entity.ToTable("CBBankFeedReconciliationStatus");

                entity.Property(e => e.CBBankFeedReconciliationStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBBankFeedTransaction>(entity =>
            {
                entity.HasKey(e => e.CBBankFeedTransactionID)
                    .IsClustered(false);

                entity.ToTable("CBBankFeedTransaction");

                entity.HasIndex(e => e.CBAccountID, "IX_CBBankFeedTransaction_CBAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBBankFeedTransactionID).ValueGeneratedNever();

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(720)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PayeeAccountNumber)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PayeeSortCode)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostingCode)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostingDate).HasColumnType("datetime");

                entity.Property(e => e.PostingErrorMessage)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostingName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostingType)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RuleName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SageBankFeedTransactionType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TransactionGuid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionStatus)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.CBBankFeedTransactions)
                    .HasForeignKey(d => d.CBAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBBankFeedTransaction_CBAccount");

                entity.HasOne(d => d.CBBankFeedProcessStatus)
                    .WithMany(p => p.CBBankFeedTransactions)
                    .HasForeignKey(d => d.CBBankFeedProcessStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBBankFeedTransaction_CBBankFeedProcessStatusID");

                entity.HasOne(d => d.CBBankFeedReconciliationStatus)
                    .WithMany(p => p.CBBankFeedTransactions)
                    .HasForeignKey(d => d.CBBankFeedReconciliationStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBBankFeedTransaction_CBBankFeedReconciliationStatus");

                entity.HasOne(d => d.CBBankFeedTransactionType)
                    .WithMany(p => p.CBBankFeedTransactions)
                    .HasForeignKey(d => d.CBBankFeedTransactionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBBankFeedTransaction_CBBankFeedTransactionType");
            });

            modelBuilder.Entity<CBBankFeedTransactionType>(entity =>
            {
                entity.ToTable("CBBankFeedTransactionType");

                entity.Property(e => e.CBBankFeedTransactionTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBBankLocation>(entity =>
            {
                entity.HasKey(e => e.CBBankLocationID)
                    .IsClustered(false);

                entity.ToTable("CBBankLocation");

                entity.HasIndex(e => e.CBAccountID, "IX_CBBankLocation_CBAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBAccountLocationTypeID, "IX_CBBankLocation_CBAccountLocationTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBBankLocationID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.CBBankLocations)
                    .HasForeignKey(d => d.CBAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBBankLocation_CBAccount");

                entity.HasOne(d => d.CBAccountLocationType)
                    .WithMany(p => p.CBBankLocations)
                    .HasForeignKey(d => d.CBAccountLocationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBBankLocation_CBAccountLocationType");
            });

            modelBuilder.Entity<CBBankStatement>(entity =>
            {
                entity.HasKey(e => e.CBBankStatementID)
                    .IsClustered(false);

                entity.ToTable("CBBankStatement");

                entity.HasIndex(e => e.CBAccountID, "IX_CBBankStatement_CBAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBBankStatementID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StatementCBAccountBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StatementClosingBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StatementDate).HasColumnType("datetime");

                entity.Property(e => e.StatementOpeningBalance).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.CBBankStatements)
                    .HasForeignKey(d => d.CBAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBBankStatement_CBAccount");
            });

            modelBuilder.Entity<CBCloudBankAccount>(entity =>
            {
                entity.HasKey(e => e.CBCloudBankAccountID)
                    .IsClustered(false);

                entity.ToTable("CBCloudBankAccount");

                entity.HasIndex(e => e.CBAccountID, "IX_CBCloudBankAccount_CBAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBCloudBankAccountID).ValueGeneratedNever();

                entity.Property(e => e.BankCloudBankAccountID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastTransactionDownloadDateTime).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.CBCloudBankAccounts)
                    .HasForeignKey(d => d.CBAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBCloudBankAccount_CBAccount");
            });

            modelBuilder.Entity<CBDirectDebitDocumentType>(entity =>
            {
                entity.ToTable("CBDirectDebitDocumentType");

                entity.Property(e => e.CBDirectDebitDocumentTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBDirectDebitTran>(entity =>
            {
                entity.HasKey(e => e.CBDirectDebitTranID)
                    .HasName("PK_CBDirectDebitTransaction")
                    .IsClustered(false);

                entity.ToTable("CBDirectDebitTran");

                entity.HasIndex(e => e.CBAccountID, "IX_CBDirectDebitTransaction_CBAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBDirectDebitDocumentTypeID, "IX_CBDirectDebitTransaction_CBDirectDebitDocumentTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBDirectDebitTranTypeID, "IX_CBDirectDebitTransaction_CBDirectDebitTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBPaymentFrequencyID, "IX_CBDirectDebitTransaction_CBPaymentFrequencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLNominalAccountID, "IX_CBDirectDebitTransaction_NLNominalAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_CBDirectDebitTransaction_PLSupplierAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_CBDirectDebitTransaction_SLCustomerAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTaxRateID, "IX_CBDirectDebitTransaction_SYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBDirectDebitTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpenseAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FirstPaymentDate).HasColumnType("datetime");

                entity.Property(e => e.FirstPaymentValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FirstTaxPaymentValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LastPaymentMadeDate).HasColumnType("datetime");

                entity.Property(e => e.LastPaymentValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LastTaxPaymentValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NominalExpenseCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalExpenseDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RegularPaymentValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RegularTaxPaymentValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxOfPaymentsMade).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotalTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValueOfPaymentsMade).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.CBDirectDebitTrans)
                    .HasForeignKey(d => d.CBAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBDirectDebitTransaction_CBAccount");

                entity.HasOne(d => d.CBDirectDebitDocumentType)
                    .WithMany(p => p.CBDirectDebitTrans)
                    .HasForeignKey(d => d.CBDirectDebitDocumentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBDirectDebitTransaction_CBDirectDebitDocumentType");

                entity.HasOne(d => d.CBDirectDebitTranType)
                    .WithMany(p => p.CBDirectDebitTrans)
                    .HasForeignKey(d => d.CBDirectDebitTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBDirectDebitTransaction_CBDirectDebitTransactionType");

                entity.HasOne(d => d.CBPaymentFrequency)
                    .WithMany(p => p.CBDirectDebitTrans)
                    .HasForeignKey(d => d.CBPaymentFrequencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBDirectDebitTransaction_CBPaymentFrequency");

                entity.HasOne(d => d.NLNominalAccount)
                    .WithMany(p => p.CBDirectDebitTrans)
                    .HasForeignKey(d => d.NLNominalAccountID)
                    .HasConstraintName("FK_CBDirectDebitTransaction_NLNominalAccount");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.CBDirectDebitTrans)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .HasConstraintName("FK_CBDirectDebitTransaction_PLSupplierAccount");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.CBDirectDebitTrans)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .HasConstraintName("FK_CBDirectDebitTransaction_SLCustomerAccount");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.CBDirectDebitTrans)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .HasConstraintName("FK_CBDirectDebitTransaction_SYSTaxRate");
            });

            modelBuilder.Entity<CBDirectDebitTranType>(entity =>
            {
                entity.ToTable("CBDirectDebitTranType");

                entity.Property(e => e.CBDirectDebitTranTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBDraftBankStatement>(entity =>
            {
                entity.ToTable("CBDraftBankStatement");

                entity.Property(e => e.CBDraftBankStatementID).ValueGeneratedNever();

                entity.Property(e => e.OpeningBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectedClosingBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StatementDate).HasColumnType("datetime");

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.CBDraftBankStatements)
                    .HasForeignKey(d => d.CBAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBDraftBankStatement_CBAccount");
            });

            modelBuilder.Entity<CBDraftStatementPostTranLink>(entity =>
            {
                entity.ToTable("CBDraftStatementPostTranLink");

                entity.HasIndex(e => e.CBPostedAccountTranID, "IX_CBPostedAccountTranID")
                    .IsUnique();

                entity.Property(e => e.CBDraftStatementPostTranLinkID).ValueGeneratedNever();

                entity.Property(e => e.DraftStatementValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CBDraftBankStatement)
                    .WithMany(p => p.CBDraftStatementPostTranLinks)
                    .HasForeignKey(d => d.CBDraftBankStatementID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBDraftStatementPostTranLink_CBDraftBankStatement");

                entity.HasOne(d => d.CBPostedAccountTran)
                    .WithOne(p => p.CBDraftStatementPostTranLink)
                    .HasForeignKey<CBDraftStatementPostTranLink>(d => d.CBPostedAccountTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBDraftStatementPostTranLink_CBPostedAccountTran");
            });

            modelBuilder.Entity<CBGroupHistCustomerTran>(entity =>
            {
                entity.ToTable("CBGroupHistCustomerTran");

                entity.HasIndex(e => e.CBPostedAccountTranID, "IX_CBGroupHistCustomerTran_CBPostedAccountTranID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLHistoricalCustomerTranID, "IX_CBGroupHistCustomerTran_SLHistoricalCustomerTranID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBGroupHistCustomerTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CBPostedAccountTran)
                    .WithMany(p => p.CBGroupHistCustomerTrans)
                    .HasForeignKey(d => d.CBPostedAccountTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBGroupHistCustomerTran_CBPostedAccountTran");

                entity.HasOne(d => d.SLHistoricalCustomerTran)
                    .WithMany(p => p.CBGroupHistCustomerTrans)
                    .HasForeignKey(d => d.SLHistoricalCustomerTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBGroupPostedCustomerTran_SLHistoricalCustomerTran");
            });

            modelBuilder.Entity<CBGroupHistSupplierTran>(entity =>
            {
                entity.ToTable("CBGroupHistSupplierTran");

                entity.HasIndex(e => e.CBPostedAccountTranID, "IX_CBGroupHistSupplierTran_CBPostedAccountTranID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLHistoricalSupplierTranID, "IX_CBGroupHistSupplierTran_PLHistoricalSupplierTranID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBGroupHistSupplierTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CBPostedAccountTran)
                    .WithMany(p => p.CBGroupHistSupplierTrans)
                    .HasForeignKey(d => d.CBPostedAccountTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBGroupHistSupplierTran_CBPostedAccountTran");

                entity.HasOne(d => d.PLHistoricalSupplierTran)
                    .WithMany(p => p.CBGroupHistSupplierTrans)
                    .HasForeignKey(d => d.PLHistoricalSupplierTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBGroupPostedCustomerTran_PLHistoricalSupplierTran");
            });

            modelBuilder.Entity<CBGroupPostedCustomerTran>(entity =>
            {
                entity.ToTable("CBGroupPostedCustomerTran");

                entity.HasIndex(e => e.CBPostedAccountTranID, "IX_CBGroupPostedCustomerTran_CBPostedAccountTranID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLPostedCustomerTranID, "IX_CBGroupPostedCustomerTran_SLPostedCustomerTranID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBGroupPostedCustomerTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CBPostedAccountTran)
                    .WithMany(p => p.CBGroupPostedCustomerTrans)
                    .HasForeignKey(d => d.CBPostedAccountTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBGroupPostedCustomerTran_CBPostedAccountTran");

                entity.HasOne(d => d.SLPostedCustomerTran)
                    .WithMany(p => p.CBGroupPostedCustomerTrans)
                    .HasForeignKey(d => d.SLPostedCustomerTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBGroupPostedCustomerTran_SLPostedCustomerTran");
            });

            modelBuilder.Entity<CBGroupPostedSupplierTran>(entity =>
            {
                entity.ToTable("CBGroupPostedSupplierTran");

                entity.HasIndex(e => e.CBPostedAccountTranID, "IX_CBGroupPostedSupplierTran_CBPostedAccountTranID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLPostedSupplierTranID, "IX_CBGroupPostedSupplierTran_PLPostedSupplierTranID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBGroupPostedSupplierTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CBPostedAccountTran)
                    .WithMany(p => p.CBGroupPostedSupplierTrans)
                    .HasForeignKey(d => d.CBPostedAccountTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBGroupPostedSupplierTran_CBPostedAccountTran");

                entity.HasOne(d => d.PLPostedSupplierTran)
                    .WithMany(p => p.CBGroupPostedSupplierTrans)
                    .HasForeignKey(d => d.PLPostedSupplierTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBGroupPostedSupplierTran_PLPostedSupplierTran");
            });

            modelBuilder.Entity<CBPaymentCloudProvider>(entity =>
            {
                entity.ToTable("CBPaymentCloudProvider");

                entity.Property(e => e.CBPaymentCloudProviderID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ServiceProviderAccountKey)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ServiceProviderKey)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CBPaymentCloudProviderBank>(entity =>
            {
                entity.ToTable("CBPaymentCloudProviderBank");

                entity.Property(e => e.CBPaymentCloudProviderBankID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ServiceProviderAccountKey)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CBPaymentCloudProvider)
                    .WithMany(p => p.CBPaymentCloudProviderBanks)
                    .HasForeignKey(d => d.CBPaymentCloudProviderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBPaymentCloudProviderBank_CBPaymentCloudProvider");

                entity.HasOne(d => d.ProviderBankAccount)
                    .WithMany(p => p.CBPaymentCloudProviderBanks)
                    .HasForeignKey(d => d.ProviderBankAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBPaymentCloudProviderBank_ProviderBankAccount");
            });

            modelBuilder.Entity<CBPaymentCloudTran>(entity =>
            {
                entity.ToTable("CBPaymentCloudTran");

                entity.HasIndex(e => e.PaymentSubmissionID, "IX_CBPaymentCloudTran_PaymentSubmissionID")
                    .IsUnique();

                entity.Property(e => e.CBPaymentCloudTranID).ValueGeneratedNever();

                entity.Property(e => e.ConversionRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fee).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentSubmissionID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RelatedPaymentSubmissionID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ServiceProviderAccountKey)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubmissionDate).HasColumnType("datetime");

                entity.HasOne(d => d.CBPaymentCloudTranStatusType)
                    .WithMany(p => p.CBPaymentCloudTrans)
                    .HasForeignKey(d => d.CBPaymentCloudTranStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBPaymentCloudTran_CBPaymentCloudTranStatusType");

                entity.HasOne(d => d.CBPaymentCloudTranType)
                    .WithMany(p => p.CBPaymentCloudTrans)
                    .HasForeignKey(d => d.CBPaymentCloudTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBPaymentCloudTran_CBPaymentCloudTranType");
            });

            modelBuilder.Entity<CBPaymentCloudTranStatusType>(entity =>
            {
                entity.ToTable("CBPaymentCloudTranStatusType");

                entity.Property(e => e.CBPaymentCloudTranStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBPaymentCloudTranType>(entity =>
            {
                entity.ToTable("CBPaymentCloudTranType");

                entity.Property(e => e.CBPaymentCloudTranTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBPaymentFrequency>(entity =>
            {
                entity.ToTable("CBPaymentFrequency");

                entity.Property(e => e.CBPaymentFrequencyID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBPendAccountTran>(entity =>
            {
                entity.HasKey(e => e.CBPendAccountTranID)
                    .HasName("PK_CBPendingAccountTransaction")
                    .IsClustered(false);

                entity.ToTable("CBPendAccountTran");

                entity.HasIndex(e => new { e.UniqueReferenceNumber, e.TransactionDate }, "IX_CBPendAccountTran_URN_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBAccountID, "IX_CBPendingAccountTransaction_CBAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBDirectDebitTranID, "IX_CBPendingAccountTransaction_CBDirectDebitTransactionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBTranTypeID, "IX_CBPendingAccountTransaction_CBTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBPendAccountTranID, "IX_CBPendingAccountTransaction_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBPendAccountTranID).ValueGeneratedNever();

                entity.Property(e => e.ChequeDescription)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChequeDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ChequeToAccountExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChequeToBaseCurrExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChequeValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastStatementDate).HasColumnType("datetime");

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalOrTraderAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StatementValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.CBPendAccountTrans)
                    .HasForeignKey(d => d.CBAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBPendingAccountTransaction_CBAccount");

                entity.HasOne(d => d.CBDirectDebitTran)
                    .WithMany(p => p.CBPendAccountTrans)
                    .HasForeignKey(d => d.CBDirectDebitTranID)
                    .HasConstraintName("FK_CBPendingAccountTransaction_CBDirectDebitTransaction");

                entity.HasOne(d => d.CBTranType)
                    .WithMany(p => p.CBPendAccountTrans)
                    .HasForeignKey(d => d.CBTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBPendingAccountTransaction_CBTransactionType");

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.CBPendAccountTrans)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_CBPendAccountTran_NominalAccountingPeriod");
            });

            modelBuilder.Entity<CBPostedAccountTran>(entity =>
            {
                entity.HasKey(e => e.CBPostedAccountTranID)
                    .HasName("PK_CBPostedAccountTransaction")
                    .IsClustered(false);

                entity.ToTable("CBPostedAccountTran");

                entity.HasIndex(e => e.TransactionDate, "IX_CBPostedAccountTran_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.UniqueReferenceNumber, e.TransactionDate }, "IX_CBPostedAccountTran_URN_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBAccountID, "IX_CBPostedAccountTransaction_CBAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBDirectDebitTranID, "IX_CBPostedAccountTransaction_CBDirectDebitTransactionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBTranTypeID, "IX_CBPostedAccountTransaction_CBTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ChequeSYSCurrencyID, "IX_CBPostedAccountTransaction_ChequeSYSCurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_CBPostedAccountTransaction_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBPostedAccountTranID).ValueGeneratedNever();

                entity.Property(e => e.ChequeDescription)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChequeDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ChequeToAccountExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChequeToBaseCurrExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChequeValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastStatementDate).HasColumnType("datetime");

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalOrTraderAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.QueryReason)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SagePaymentsIdentifier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StatementValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.CBPostedAccountTrans)
                    .HasForeignKey(d => d.CBAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBPostedAccountTransaction_CBAccount");

                entity.HasOne(d => d.CBDirectDebitTran)
                    .WithMany(p => p.CBPostedAccountTrans)
                    .HasForeignKey(d => d.CBDirectDebitTranID)
                    .HasConstraintName("FK_CBPostedAccountTransaction_CBDirectDebitTransaction");

                entity.HasOne(d => d.CBTranType)
                    .WithMany(p => p.CBPostedAccountTrans)
                    .HasForeignKey(d => d.CBTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBPostedAccountTransaction_CBTransactionType");

                entity.HasOne(d => d.ChequeSYSCurrency)
                    .WithMany(p => p.CBPostedAccountTrans)
                    .HasForeignKey(d => d.ChequeSYSCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBPostedAccountTransaction_SYSCurrency");

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.CBPostedAccountTrans)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_CBPostedAccountTran_NominalAccountingPeriod");

                entity.HasOne(d => d.SYSCorrectionTranType)
                    .WithMany(p => p.CBPostedAccountTrans)
                    .HasForeignKey(d => d.SYSCorrectionTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBPostedAccountTran_SYSCorrectionTranType");

                entity.HasOne(d => d.SagePaymentsTransactionStatus)
                    .WithMany(p => p.CBPostedAccountTrans)
                    .HasForeignKey(d => d.SagePaymentsTransactionStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBPostedAccountTran_SagePaymentsTransactionStatus");
            });

            modelBuilder.Entity<CBProjectItemSearchView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CBProjectItemSearchView");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectTitle)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBSetting>(entity =>
            {
                entity.ToTable("CBSetting");

                entity.HasIndex(e => e.DefaultCBAccountID, "IX_CBSetting_DefaultCBAccountID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CBSettingID).ValueGeneratedNever();

                entity.HasOne(d => d.DefaultCBAccount)
                    .WithMany(p => p.CBSettings)
                    .HasForeignKey(d => d.DefaultCBAccountID)
                    .HasConstraintName("FK_CBSetting_CBAccount");
            });

            modelBuilder.Entity<CBShortTermCashProjectionAccount>(entity =>
            {
                entity.ToTable("CBShortTermCashProjectionAccount");

                entity.Property(e => e.CBShortTermCashProjectionAccountID).ValueGeneratedNever();

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.CBShortTermCashProjectionAccounts)
                    .HasForeignKey(d => d.CBAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBShortTermCashProjectionAccount_CBAccount");

                entity.HasOne(d => d.CBShortTermCashProjectionHeader)
                    .WithMany(p => p.CBShortTermCashProjectionAccounts)
                    .HasForeignKey(d => d.CBShortTermCashProjectionHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBShortTermCashProjectionAccount_CBShortTermCashProjectionHeader");
            });

            modelBuilder.Entity<CBShortTermCashProjectionDateType>(entity =>
            {
                entity.ToTable("CBShortTermCashProjectionDateType");

                entity.Property(e => e.CBShortTermCashProjectionDateTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CBShortTermCashProjectionHeader>(entity =>
            {
                entity.ToTable("CBShortTermCashProjectionHeader");

                entity.Property(e => e.CBShortTermCashProjectionHeaderID).ValueGeneratedNever();

                entity.Property(e => e.BookBalanceForSelectedAccounts).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.HasOne(d => d.CBShortTermCashProjectionDateType)
                    .WithMany(p => p.CBShortTermCashProjectionHeaders)
                    .HasForeignKey(d => d.CBShortTermCashProjectionDateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBShortTermCashProjectionHeader_CBShortTermCashProjectionDateType");
            });

            modelBuilder.Entity<CBShortTermCashProjectionTran>(entity =>
            {
                entity.ToTable("CBShortTermCashProjectionTran");

                entity.Property(e => e.CBShortTermCashProjectionTranID).ValueGeneratedNever();

                entity.Property(e => e.AccountName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Details)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ForecastDate).HasColumnType("datetime");

                entity.Property(e => e.Payment).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QueryCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Receipt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBDirectDebitTran)
                    .WithMany(p => p.CBShortTermCashProjectionTrans)
                    .HasForeignKey(d => d.CBDirectDebitTranID)
                    .HasConstraintName("FK_CBShortTermCashProjectionTran_CBDirectDebitTran");

                entity.HasOne(d => d.CBShortTermCashProjectionHeader)
                    .WithMany(p => p.CBShortTermCashProjectionTrans)
                    .HasForeignKey(d => d.CBShortTermCashProjectionHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CBShortTermCashProjectionTran_CBShortTermCashProjectionHeader");

                entity.HasOne(d => d.PLPostedSupplierTran)
                    .WithMany(p => p.CBShortTermCashProjectionTrans)
                    .HasForeignKey(d => d.PLPostedSupplierTranID)
                    .HasConstraintName("FK_CBShortTermCashProjectionTran_PLPostedSupplierTran");

                entity.HasOne(d => d.SLPostedCustomerTran)
                    .WithMany(p => p.CBShortTermCashProjectionTrans)
                    .HasForeignKey(d => d.SLPostedCustomerTranID)
                    .HasConstraintName("FK_CBShortTermCashProjectionTran_SLPostedCustomerTran");
            });

            modelBuilder.Entity<CBTranType>(entity =>
            {
                entity.ToTable("CBTranType");

                entity.Property(e => e.CBTranTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<COMPANY>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("COMPANY");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AdviceNotePrefix)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.AdvicePrefix).HasMaxLength(10);

                entity.Property(e => e.AllowableVariance).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AutoUpdDateTime).HasColumnType("datetime");

                entity.Property(e => e.AutoUpdUser).HasMaxLength(30);

                entity.Property(e => e.BackupTool).HasColumnType("ntext");

                entity.Property(e => e.BackupUncPath).HasColumnType("ntext");

                entity.Property(e => e.BomCustomLabel_1)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#1");

                entity.Property(e => e.BomCustomLabel_10)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#10");

                entity.Property(e => e.BomCustomLabel_2)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#2");

                entity.Property(e => e.BomCustomLabel_3)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#3");

                entity.Property(e => e.BomCustomLabel_4)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#4");

                entity.Property(e => e.BomCustomLabel_5)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#5");

                entity.Property(e => e.BomCustomLabel_6)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#6");

                entity.Property(e => e.BomCustomLabel_7)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#7");

                entity.Property(e => e.BomCustomLabel_8)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#8");

                entity.Property(e => e.BomCustomLabel_9)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#9");

                entity.Property(e => e.CItMessConfirmation).HasMaxLength(30);

                entity.Property(e => e.CItMessEmpNotFound).HasMaxLength(30);

                entity.Property(e => e.CItMessEnterOpRef).HasMaxLength(30);

                entity.Property(e => e.CItMessEnterOpTime).HasMaxLength(30);

                entity.Property(e => e.CItMessEnterQty).HasMaxLength(30);

                entity.Property(e => e.CItMessEnterStageRef).HasMaxLength(30);

                entity.Property(e => e.CItMessEnterWOrder).HasMaxLength(30);

                entity.Property(e => e.CItMessLogoff).HasMaxLength(30);

                entity.Property(e => e.CItMessLogon).HasMaxLength(30);

                entity.Property(e => e.CItMessOpNotFound).HasMaxLength(30);

                entity.Property(e => e.CItMessStgNotFound).HasMaxLength(30);

                entity.Property(e => e.CItMessWOrderNotFound).HasMaxLength(30);

                entity.Property(e => e.CartonLabel).HasMaxLength(20);

                entity.Property(e => e.CertPrefix)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ChangePassword).HasMaxLength(30);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CondensedAddress).HasMaxLength(500);

                entity.Property(e => e.ConformityMessage).HasColumnType("ntext");

                entity.Property(e => e.CosCredit).HasMaxLength(8);

                entity.Property(e => e.CosDebit).HasMaxLength(8);

                entity.Property(e => e.CostingBaseQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DelNotePrefix).HasMaxLength(10);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.EstAnalysis_1)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#1");

                entity.Property(e => e.EstAnalysis_2)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#2");

                entity.Property(e => e.EstAnalysis_3)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#3");

                entity.Property(e => e.EstAnalysis_4)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#4");

                entity.Property(e => e.EstAnalysis_5)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#5");

                entity.Property(e => e.EstBomStgDescription)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.EstBomStgReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.EstFastDefaultStageDesc)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.EstFastDefaultStageRef)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.EstimatePrefix).HasMaxLength(10);

                entity.Property(e => e.FaxNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FriEnd).HasColumnType("datetime");

                entity.Property(e => e.FriStart).HasColumnType("datetime");

                entity.Property(e => e.GRNPrefix).HasMaxLength(10);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.InternetProgram).HasColumnType("ntext");

                entity.Property(e => e.JobPrefix).HasMaxLength(10);

                entity.Property(e => e.LabCredit).HasMaxLength(8);

                entity.Property(e => e.LabDebit).HasMaxLength(8);

                entity.Property(e => e.LabourCredit).HasMaxLength(8);

                entity.Property(e => e.LabourDebit).HasMaxLength(8);

                entity.Property(e => e.LabourMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastFileMaintDate).HasColumnType("datetime");

                entity.Property(e => e.LastFileMaintUser).HasMaxLength(30);

                entity.Property(e => e.LunchEnd).HasColumnType("datetime");

                entity.Property(e => e.LunchStart).HasColumnType("datetime");

                entity.Property(e => e.MachCredit).HasMaxLength(8);

                entity.Property(e => e.MachDebit).HasMaxLength(8);

                entity.Property(e => e.MachineMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MonEnd).HasColumnType("datetime");

                entity.Property(e => e.MonStart).HasColumnType("datetime");

                entity.Property(e => e.MpsLastReadDemand).HasColumnType("datetime");

                entity.Property(e => e.MpsLastRun).HasColumnType("datetime");

                entity.Property(e => e.MpsLastRunBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MpsLastRunIncrementPeriod)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.MrpLastRun).HasColumnType("datetime");

                entity.Property(e => e.MrpLastRunBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MrpUsageLevelsUpdated).HasColumnType("datetime");

                entity.Property(e => e.NSCredit).HasMaxLength(8);

                entity.Property(e => e.NSDebit).HasMaxLength(8);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NonStockMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NotCostedSince).HasColumnType("datetime");

                entity.Property(e => e.NotesLabel_1)
                    .HasMaxLength(20)
                    .HasColumnName("NotesLabel#1");

                entity.Property(e => e.NotesLabel_2)
                    .HasMaxLength(20)
                    .HasColumnName("NotesLabel#2");

                entity.Property(e => e.NotesLabel_3)
                    .HasMaxLength(20)
                    .HasColumnName("NotesLabel#3");

                entity.Property(e => e.ODBCName).HasMaxLength(50);

                entity.Property(e => e.OECredit).HasMaxLength(8);

                entity.Property(e => e.OEDebit).HasMaxLength(8);

                entity.Property(e => e.OHeadCredit).HasMaxLength(8);

                entity.Property(e => e.OHeadDebit).HasMaxLength(8);

                entity.Property(e => e.OHeadRecoveryPcnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpeningGRNNumber).HasMaxLength(30);

                entity.Property(e => e.OtherMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlanPrefix).HasMaxLength(10);

                entity.Property(e => e.PostSItoLine50).HasMaxLength(2);

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.QtyCalcLabelInput)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.QtyCalcLabel_1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("QtyCalcLabel#1");

                entity.Property(e => e.QtyCalcLabel_2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("QtyCalcLabel#2");

                entity.Property(e => e.QtyCalcLabel_3)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("QtyCalcLabel#3");

                entity.Property(e => e.QtyCalcLabel_4)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("QtyCalcLabel#4");

                entity.Property(e => e.QtyCalcLabel_5)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("QtyCalcLabel#5");

                entity.Property(e => e.QtyCalcOperator_1).HasColumnName("QtyCalcOperator#1");

                entity.Property(e => e.QtyCalcOperator_2).HasColumnName("QtyCalcOperator#2");

                entity.Property(e => e.QtyCalcOperator_3).HasColumnName("QtyCalcOperator#3");

                entity.Property(e => e.QtyCalcOperator_4).HasColumnName("QtyCalcOperator#4");

                entity.Property(e => e.QtyCalcOperator_5).HasColumnName("QtyCalcOperator#5");

                entity.Property(e => e.QtyCalcPercent_1).HasColumnName("QtyCalcPercent#1");

                entity.Property(e => e.QtyCalcPercent_2).HasColumnName("QtyCalcPercent#2");

                entity.Property(e => e.QtyCalcPercent_3).HasColumnName("QtyCalcPercent#3");

                entity.Property(e => e.QtyCalcPercent_4).HasColumnName("QtyCalcPercent#4");

                entity.Property(e => e.QtyCalcPercent_5).HasColumnName("QtyCalcPercent#5");

                entity.Property(e => e.QtyCalcValue_1)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("QtyCalcValue#1");

                entity.Property(e => e.QtyCalcValue_2)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("QtyCalcValue#2");

                entity.Property(e => e.QtyCalcValue_3)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("QtyCalcValue#3");

                entity.Property(e => e.QtyCalcValue_4)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("QtyCalcValue#4");

                entity.Property(e => e.QtyCalcValue_5)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("QtyCalcValue#5");

                entity.Property(e => e.RetnNomCode).HasMaxLength(8);

                entity.Property(e => e.ReturnsNotePrefix)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SICredit).HasMaxLength(8);

                entity.Property(e => e.SIDebit).HasMaxLength(8);

                entity.Property(e => e.SatEnd).HasColumnType("datetime");

                entity.Property(e => e.SatStart).HasColumnType("datetime");

                entity.Property(e => e.SchemaLastChange).HasColumnType("datetime");

                entity.Property(e => e.SchemaLastRun).HasColumnType("datetime");

                entity.Property(e => e.SchemaLastRunComputer)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SchemaLastRunUser)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SetupCredit).HasMaxLength(8);

                entity.Property(e => e.SetupDebit).HasMaxLength(8);

                entity.Property(e => e.SetupMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StockProjectionLastRun).HasColumnType("datetime");

                entity.Property(e => e.SubContractCredit).HasMaxLength(8);

                entity.Property(e => e.SubContractDebit).HasMaxLength(8);

                entity.Property(e => e.SubContractMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SunEnd).HasColumnType("datetime");

                entity.Property(e => e.SunStart).HasColumnType("datetime");

                entity.Property(e => e.TelephoneNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ThurEnd).HasColumnType("datetime");

                entity.Property(e => e.ThurStart).HasColumnType("datetime");

                entity.Property(e => e.TimeFence_1).HasColumnName("TimeFence#1");

                entity.Property(e => e.TimeFence_2).HasColumnName("TimeFence#2");

                entity.Property(e => e.ToolingCredit).HasMaxLength(8);

                entity.Property(e => e.ToolingDebit).HasMaxLength(8);

                entity.Property(e => e.ToolingMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TueEnd).HasColumnType("datetime");

                entity.Property(e => e.TueStart).HasColumnType("datetime");

                entity.Property(e => e.VatRegNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Version).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.WOPrefix).HasMaxLength(10);

                entity.Property(e => e.WebAddress).HasColumnType("ntext");

                entity.Property(e => e.WedEnd).HasColumnType("datetime");

                entity.Property(e => e.WedStart).HasColumnType("datetime");

                entity.Property(e => e.WeightLabel).HasMaxLength(20);

                entity.Property(e => e.WipCredit).HasMaxLength(8);

                entity.Property(e => e.WipDebit).HasMaxLength(8);

                entity.Property(e => e.WoPassword).HasMaxLength(30);
            });

            modelBuilder.Entity<CPAllocationTran>(entity =>
            {
                entity.ToTable("CPAllocationTran");

                entity.Property(e => e.CPAllocationTranID).ValueGeneratedNever();

                entity.HasOne(d => d.PaymentCPTran)
                    .WithMany(p => p.CPAllocationTranPaymentCPTrans)
                    .HasForeignKey(d => d.PaymentCPTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CPAllocationTran_CPTran_P");

                entity.HasOne(d => d.RefundCPTran)
                    .WithMany(p => p.CPAllocationTranRefundCPTrans)
                    .HasForeignKey(d => d.RefundCPTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CPAllocationTran_CPTran_R");
            });

            modelBuilder.Entity<CPCardProcessorTranType>(entity =>
            {
                entity.ToTable("CPCardProcessorTranType");

                entity.Property(e => e.CPCardProcessorTranTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CPEntityCPTran>(entity =>
            {
                entity.ToTable("CPEntityCPTran");

                entity.Property(e => e.CPEntityCPTranID).ValueGeneratedNever();

                entity.HasOne(d => d.CPLinkedDescriptor)
                    .WithMany(p => p.CPEntityCPTrans)
                    .HasForeignKey(d => d.CPLinkedDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CPEntityCPTran_CPLinkedDescriptor");

                entity.HasOne(d => d.CPTran)
                    .WithMany(p => p.CPEntityCPTrans)
                    .HasForeignKey(d => d.CPTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CPEntityCPTran_CPTran");
            });

            modelBuilder.Entity<CPLinkedDescriptor>(entity =>
            {
                entity.ToTable("CPLinkedDescriptor");

                entity.Property(e => e.CPLinkedDescriptorID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CPTran>(entity =>
            {
                entity.ToTable("CPTran");

                entity.Property(e => e.CPTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AuthNumber)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.CPCardProcessor)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CardProcessorTranCode)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.CardType)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyISOCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityKey)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TranCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.User)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Value).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CPCardProcessorTranType)
                    .WithMany(p => p.CPTrans)
                    .HasForeignKey(d => d.CPCardProcessorTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CPTran_CPCardProcessorTranType");
            });

            modelBuilder.Entity<CRMConfigurationType>(entity =>
            {
                entity.ToTable("CRMConfigurationType");

                entity.Property(e => e.CRMConfigurationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CRMIntegrationSetting>(entity =>
            {
                entity.ToTable("CRMIntegrationSetting");

                entity.Property(e => e.CRMIntegrationSettingID).ValueGeneratedNever();

                entity.Property(e => e.CRMENBUGatewayURL)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CRMIntegrationSyncDate).HasColumnType("datetime");

                entity.Property(e => e.CRMMetaDataVersion)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CRMPassword)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CRMUsername)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CRMWebServiceURL)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CRMConfigurationType)
                    .WithMany(p => p.CRMIntegrationSettings)
                    .HasForeignKey(d => d.CRMConfigurationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CRMIntegrationSetting_CRMConfigurationType");

                entity.HasOne(d => d.CRMIntegrationSyncDateType)
                    .WithMany(p => p.CRMIntegrationSettings)
                    .HasForeignKey(d => d.CRMIntegrationSyncDateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CRMIntegrationSetting_CRMIntegrationSyncDateType");

                entity.HasOne(d => d.CRMIntegrationType)
                    .WithMany(p => p.CRMIntegrationSettings)
                    .HasForeignKey(d => d.CRMIntegrationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CRMIntegrationSetting_CRMIntegrationType");
            });

            modelBuilder.Entity<CRMIntegrationSyncDateType>(entity =>
            {
                entity.ToTable("CRMIntegrationSyncDateType");

                entity.Property(e => e.CRMIntegrationSyncDateTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CRMIntegrationType>(entity =>
            {
                entity.ToTable("CRMIntegrationType");

                entity.Property(e => e.CRMIntegrationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CSNinja_SLContacts_vw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSNinja_SLContacts_vw");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactRoleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultEmail)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultFax)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultMobile)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultTelephone)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultWebsite)
                    .HasMaxLength(227)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Calendar>(entity =>
            {
                entity.HasKey(e => e.CalendarID)
                    .HasName("PK__Calendar__53CFDBAC6F8C0EF1")
                    .IsClustered(false);

                entity.ToTable("Calendar");

                entity.HasIndex(e => e.dt, "IX_Calendar_dt")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.HolidayDescription).HasMaxLength(30);

                entity.Property(e => e.ShowPeriodAs).HasMaxLength(30);

                entity.Property(e => e.dayname).HasMaxLength(9);

                entity.Property(e => e.dt).HasColumnType("smalldatetime");

                entity.Property(e => e.monthname).HasMaxLength(9);
            });

            modelBuilder.Entity<CashAcctInvAddressArch>(entity =>
            {
                entity.HasKey(e => e.CashAcctInvoiceAddressID);

                entity.ToTable("CashAcctInvAddressArch");

                entity.HasIndex(e => e.SOPOrderReturnID, "IX_CashAcctInvAddressArch_SOPOrderReturnID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CashAcctInvoiceAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithOne(p => p.CashAcctInvAddressArch)
                    .HasForeignKey<CashAcctInvAddressArch>(d => d.SOPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CashAcctInvAddressArch_SOPOrderReturnArch");
            });

            modelBuilder.Entity<CashAcctInvoiceAddress>(entity =>
            {
                entity.ToTable("CashAcctInvoiceAddress");

                entity.HasIndex(e => e.SOPOrderReturnID, "IX_CashAcctInvoiceAddress_SOPOrderReturnID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CashAcctInvoiceAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithOne(p => p.CashAcctInvoiceAddress)
                    .HasForeignKey<CashAcctInvoiceAddress>(d => d.SOPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CashAcctInvoiceAddress_SOPOrderReturn");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_CatPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.Reference, "IX_CatReference")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Credit)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Debit)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<CategoryRate>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_CatRatePrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_CatRateHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Credit)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Debit)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.CategoryRates)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_CategoryRates_Categories");
            });

            modelBuilder.Entity<ConfigurableName>(entity =>
            {
                entity.ToTable("ConfigurableName");

                entity.HasIndex(e => e.ConfiguredName, "IX_ConfigurableName")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ConfigurableNameID).ValueGeneratedNever();

                entity.Property(e => e.ConfiguredName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ConfirmationIntentType>(entity =>
            {
                entity.ToTable("ConfirmationIntentType");

                entity.Property(e => e.ConfirmationIntentTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Conformity>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_ConfPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("Conformity");

                entity.HasIndex(e => e.Reference, "IX_ConfReference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SONumber, "IX_ConfSoNumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AgreedConcessions).HasColumnType("ntext");

                entity.Property(e => e.CertificateDate).HasColumnType("datetime");

                entity.Property(e => e.ConditionOnDespatch).HasColumnType("ntext");

                entity.Property(e => e.CustOrdNumber).HasMaxLength(30);

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.CustomerRef).HasMaxLength(8);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DescriptionOfComponents).HasColumnType("ntext");

                entity.Property(e => e.DrawingNumber).HasMaxLength(30);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.PODate).HasColumnType("datetime");

                entity.Property(e => e.PONumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductCode).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.SONumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.Specification).HasColumnType("ntext");

                entity.Property(e => e.WODate).HasColumnType("datetime");

                entity.Property(e => e.WONumber).HasMaxLength(30);
            });

            modelBuilder.Entity<ConformitySalesOrderItem>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_ConfSoPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_ConfSoHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.SONumber }, "IX_ConfSoHeaderID+SONumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Comment_1)
                    .HasMaxLength(60)
                    .HasColumnName("Comment#1");

                entity.Property(e => e.Comment_2)
                    .HasMaxLength(60)
                    .HasColumnName("Comment#2");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProductCode).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SONumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.Units).HasMaxLength(10);

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.ConformitySalesOrderItems)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ConformitySalesOrderItems_FK00");
            });

            modelBuilder.Entity<CostingMethod>(entity =>
            {
                entity.ToTable("CostingMethod");

                entity.Property(e => e.CostingMethodID).ValueGeneratedNever();

                entity.Property(e => e.CostingMethodName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Counter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Counter");

                entity.HasIndex(e => e.CounterID, "CounterCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CounterName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CustDeliveryAddress>(entity =>
            {
                entity.ToTable("CustDeliveryAddress");

                entity.HasIndex(e => e.CountryCodeID, "IX_CustDeliveryAddress_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CustomerID, e.Description }, "IX_CustDeliveryAddress_CustomerID_Description")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCodeID, "IX_CustDeliveryAddress_TaxCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CustDeliveryAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.AddressCountryCode)
                    .WithMany(p => p.CustDeliveryAddressAddressCountryCodes)
                    .HasForeignKey(d => d.AddressCountryCodeID)
                    .HasConstraintName("FK_CustDeliveryAddress_AddressCountryCodeID");

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.CustDeliveryAddressCountryCodes)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_CustDeliveryAddress_SYSCountryCode");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustDeliveryAddresses)
                    .HasForeignKey(d => d.CustomerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustDeliveryAddress_SLCustomerAccount");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.CustDeliveryAddresses)
                    .HasForeignKey(d => d.TaxCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustDeliveryAddress_SYSTaxRate");
            });

            modelBuilder.Entity<CustProdGroupDiscount>(entity =>
            {
                entity.HasKey(e => new { e.CustomerDiscountGroupID, e.ProductGroupDiscountID });

                entity.ToTable("CustProdGroupDiscount");

                entity.HasIndex(e => e.CustProdGroupDiscountID, "IX_CustProdGroupDiscount")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProductGroupDiscountID, "IX_CustProdGroupDiscount_ProductGroupDiscountID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CustomerDiscountGroup)
                    .WithMany(p => p.CustProdGroupDiscounts)
                    .HasForeignKey(d => d.CustomerDiscountGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustProdGroupDiscount_CustomerDiscountGroup");

                entity.HasOne(d => d.ProductGroupDiscount)
                    .WithMany(p => p.CustProdGroupDiscounts)
                    .HasForeignKey(d => d.ProductGroupDiscountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustProdGroupDiscount_ProductGroupDiscount");
            });

            modelBuilder.Entity<CustStockItemDiscount>(entity =>
            {
                entity.HasKey(e => new { e.CustomerDiscountGroupID, e.StockItemDiscountID });

                entity.ToTable("CustStockItemDiscount");

                entity.HasIndex(e => e.CustStockItemDiscountID, "IX_CustStockItemDiscount")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemDiscountID, "IX_CustStockItemDiscount_StockItemDiscountID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CustomerDiscountGroup)
                    .WithMany(p => p.CustStockItemDiscounts)
                    .HasForeignKey(d => d.CustomerDiscountGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustStockItemDiscount_CustomerDiscountGroup");

                entity.HasOne(d => d.StockItemDiscount)
                    .WithMany(p => p.CustStockItemDiscounts)
                    .HasForeignKey(d => d.StockItemDiscountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustStockItemDiscount_StockItemDiscount");
            });

            modelBuilder.Entity<CustomerDiscountGroup>(entity =>
            {
                entity.ToTable("CustomerDiscountGroup");

                entity.HasIndex(e => e.Name, "IX_CustomerDiscountGroup")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CustomerDiscountGroupID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsSingleCustomerGroup).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CustomerType>(entity =>
            {
                entity.ToTable("CustomerType");

                entity.Property(e => e.CustomerTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DLP_SABRE_INSPECTION_WAREHOUSE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DLP_SABRE_INSPECTION_WAREHOUSE");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Poporders).IsRequired();

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 3 Month");
            });

            modelBuilder.Entity<DLP_stklvl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DSAuditTrailView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DSAuditTrailView");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.BatchReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CCCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CreditYearToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Currency)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DebitYearToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Department)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.EntrySourceName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinancialYearStartDate).HasColumnType("datetime");

                entity.Property(e => e.GoodsValueInDocumentCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LastStatementDate).HasColumnType("datetime");

                entity.Property(e => e.NLAccName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NLAccNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NLAccRepCatCode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.NLAccRepCatDesc)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NLAccRepTypeName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.NominalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TradingNominalAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionToBaseExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TransactionType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DefaultPricingSourceType>(entity =>
            {
                entity.ToTable("DefaultPricingSourceType");

                entity.Property(e => e.DefaultPricingSourceTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DeleteLog>(entity =>
            {
                entity.ToTable("DeleteLog");

                entity.HasIndex(e => e.EntityName, "IX_DeleteLog")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DeleteLogID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EntityName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ForeignID)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ParentKey)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentOpLock)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<DeprecatedObject>(entity =>
            {
                entity.HasKey(e => e.AutoID);

                entity.Property(e => e.DateAdded)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<DeprecationScript>(entity =>
            {
                entity.HasKey(e => e.AutoID);

                entity.Property(e => e.DateRun)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<DiscountType>(entity =>
            {
                entity.ToTable("DiscountType");

                entity.Property(e => e.DiscountTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DocumentPrintStatus>(entity =>
            {
                entity.ToTable("DocumentPrintStatus");

                entity.Property(e => e.DocumentPrintStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DocumentProcessStatus>(entity =>
            {
                entity.ToTable("DocumentProcessStatus");

                entity.Property(e => e.DocumentProcessStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DocumentStatus>(entity =>
            {
                entity.ToTable("DocumentStatus");

                entity.Property(e => e.DocumentStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DrawDrawing>(entity =>
            {
                entity.ToTable("DrawDrawing");

                entity.Property(e => e.DrawDrawingID).ValueGeneratedNever();

                entity.Property(e => e.Author)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DesignPackage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EffectiveFromDate).HasColumnType("datetime");

                entity.Property(e => e.EffectiveToDate).HasColumnType("datetime");

                entity.Property(e => e.IndexNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDateTime).HasColumnType("datetime");

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MediaType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockDescription)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserRevisionNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DrawDrawingCommentHistory>(entity =>
            {
                entity.ToTable("DrawDrawingCommentHistory");

                entity.HasIndex(e => e.DrawDrawingID, "IX_DrawDrawingCommentHistory_DrawDrawingID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DrawDrawingCommentHistoryID).ValueGeneratedNever();

                entity.Property(e => e.CommentDateTime).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserRevisionNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.DrawDrawing)
                    .WithMany(p => p.DrawDrawingCommentHistories)
                    .HasForeignKey(d => d.DrawDrawingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DrawDrawingCommentHistory_DrawDrawing");
            });

            modelBuilder.Entity<DrawingAttachedDocument>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_DrawAttDocPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_DrawAttDocHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.FileName).HasMaxLength(255);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.DrawingAttachedDocuments)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("AttachedDocuments_FK00");
            });

            modelBuilder.Entity<DrawingRegister>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_DrawPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("DrawingRegister");

                entity.HasIndex(e => e.Reference, "IX_DrawRef")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockCode, "IX_DrawStockCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Author).HasMaxLength(30);

                entity.Property(e => e.CustomerCode).HasMaxLength(8);

                entity.Property(e => e.CustomerName).HasMaxLength(60);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DesignPackage).HasColumnType("ntext");

                entity.Property(e => e.DiskNumber).HasMaxLength(10);

                entity.Property(e => e.DiskType).HasMaxLength(10);

                entity.Property(e => e.Location).HasColumnType("ntext");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Revision).HasColumnType("ntext");

                entity.Property(e => e.RevisionNumber).HasMaxLength(30);

                entity.Property(e => e.StockCode).HasMaxLength(30);

                entity.Property(e => e.StockDescription).HasMaxLength(60);

                entity.Property(e => e.Title).HasColumnType("ntext");

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<DrawingRevision>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_DrawRevPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_DrawRevHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Revision).HasColumnType("ntext");

                entity.Property(e => e.RevisionDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasMaxLength(30);

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.DrawingRevisions)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("Revisions_FK00");
            });

            modelBuilder.Entity<DuplicatedSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EDUFundType>(entity =>
            {
                entity.ToTable("EDUFundType");

                entity.Property(e => e.EDUFundTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<EDULocalEducationAuthority>(entity =>
            {
                entity.ToTable("EDULocalEducationAuthority");

                entity.Property(e => e.EDULocalEducationAuthorityID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<EDUSchoolType>(entity =>
            {
                entity.ToTable("EDUSchoolType");

                entity.Property(e => e.EDUSchoolTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_EmpPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.ClockNumber, "IX_EmpClockNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.EmployeeNumber, "IX_EmpEmployeeNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Surname, e.FirstName }, "IX_EmpSurname+FirstName")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Address)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CategoryDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CategoryReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ClockNumber).HasMaxLength(50);

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Credit)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Debit)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Department).HasMaxLength(30);

                entity.Property(e => e.EMailAddress)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmpFinish).HasColumnType("datetime");

                entity.Property(e => e.EmpStart).HasColumnType("datetime");

                entity.Property(e => e.EmployeeNumber)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FaxAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FaxCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(227)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FaxPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FaxSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Initials)
                    .HasMaxLength(5)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MobileAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MobileCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(227)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MobilePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MobileSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NatInsNumber)
                    .HasMaxLength(15)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Surname)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TelNumber)
                    .HasMaxLength(227)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TelephoneAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TelephoneCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TelephonePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TelephoneSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Title)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.WebAddress)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.WorksNumber)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<EmployeeRate>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_EmpRatePrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_EmpRateHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Credit)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Debit)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.EmployeeRates)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("EmployeeRates_FK00");
            });

            modelBuilder.Entity<EntrySource>(entity =>
            {
                entity.ToTable("EntrySource");

                entity.Property(e => e.EntrySourceID).ValueGeneratedNever();

                entity.Property(e => e.EntrySourceName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EstAttachedDocument>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_EstAttPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_EstAttHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.FileName).HasMaxLength(255);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.EstAttachedDocuments)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("EstAttachedDocuments_FK00");
            });

            modelBuilder.Entity<EstDrawing>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_EstDrawPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_EstDrawHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.EstDrawings)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("EstDrawings_FK00");
            });

            modelBuilder.Entity<EstMaterial>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_EstMatPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.EstID, "IX_EstMatEstID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_EstMatHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EstID).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineUnitQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.SupplierAccRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfSale)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.EstMaterials)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("EstMaterials_FK00");
            });

            modelBuilder.Entity<EstModificationHistory>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_EstModPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("EstModificationHistory");

                entity.HasIndex(e => e.HeaderID, "IX_EstModHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Reason).HasColumnType("ntext");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.EstModificationHistories)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("EstModificationHistory_FK00");
            });

            modelBuilder.Entity<EstNonStock>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_EstNonStkPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("EstNonStock");

                entity.HasIndex(e => e.EstID, "IX_EstNonStkEstID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_EstNonStkHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Delivered).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EstID).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LeadTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SupplierAccRef).HasMaxLength(8);

                entity.Property(e => e.SupplierRef).HasMaxLength(30);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfSale)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.EstNonStocks)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("EstNonStock_FK00");
            });

            modelBuilder.Entity<EstOpComponent>(entity =>
            {
                entity.HasIndex(e => e.ComponentID, "IX_EstOpComponents_ComponentID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OperationID, "IX_EstOpComponents_OperationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StageID, "IX_EstOpComponents_StageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemUnitID, "IX_EstOpComponents_StockItemUnitID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineUnitQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitofMeasure)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Component)
                    .WithMany(p => p.EstOpComponents)
                    .HasForeignKey(d => d.ComponentID)
                    .HasConstraintName("FK_EstOpComponents_EstMaterials");
            });

            modelBuilder.Entity<EstOperation>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_EstOpPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.EstID, "IX_EstOpEstID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.ProcessReference }, "IX_EstOpHeader+Process")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence }, "IX_EstOpHeader+Sequence")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_EstOpHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CalcLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcSubContractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DelayHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelayMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.EstID).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupHrs).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LabourReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.NumberPieces).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Overlap).HasDefaultValueSql("((0))");

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RunTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.RunTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContLeadTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubContractProcess_).HasColumnName("SubContractProcess?");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.EstOperations)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("EstOperations_FK00");
            });

            modelBuilder.Entity<EstOtherExpense>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_EstOthExpPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.EstID, "IX_EstOthExpEstID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_EstOthExpHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstID).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TypeDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TypeReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UnitOfSale)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.EstOtherExpenses)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("EstOtherExpenses_FK00");
            });

            modelBuilder.Entity<EstQtyBreak>(entity =>
            {
                entity.HasIndex(e => e.Active, "IX_EstQtyBreaks_Active")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemUnitID, "IX_EstQtyBreaks_StockItemUnitID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Margin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Markup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfSale)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UnitSellingPrice).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.EstQtyBreaks)
                    .HasForeignKey(d => d.HeaderID)
                    .HasConstraintName("FK_EstQtyBreaks_Estimates");
            });

            modelBuilder.Entity<EstStage>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_EstStagePrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.HeaderID, e.Reference }, "IX_EstStageHeader+Ref")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_EstStageHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobNumber).HasMaxLength(30);

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.NumberPieces).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OHeadRecoveryAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.SetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.SubContractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.EstStages)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("EstStages_FK00");
            });

            modelBuilder.Entity<Estimate>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_EstPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.AccountRef, "IX_EstAccountRef")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.JobID, "IX_EstJobID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Reference, "IX_EstReference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SalesOrderNumber, "IX_EstSalesOrderNumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AccountName)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AddressCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompOpTimeStamp)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Contact)
                    .HasMaxLength(235)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CopiedFrom).HasMaxLength(30);

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CurrencyExchangeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CurrencySymbol)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustRefNumber).HasMaxLength(50);

                entity.Property(e => e.Custom_1)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#1");

                entity.Property(e => e.Custom_2)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#2");

                entity.Property(e => e.Custom_3)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#3");

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EstAnalysis_1)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#1");

                entity.Property(e => e.EstAnalysis_2)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#2");

                entity.Property(e => e.EstAnalysis_3)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#3");

                entity.Property(e => e.EstAnalysis_4)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#4");

                entity.Property(e => e.EstAnalysis_5)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#5");

                entity.Property(e => e.FinProdCode).HasMaxLength(30);

                entity.Property(e => e.FinProdDesc).HasMaxLength(60);

                entity.Property(e => e.FinQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.FollowUpDate).HasColumnType("datetime");

                entity.Property(e => e.ImageForWoDocs).HasMaxLength(255);

                entity.Property(e => e.ItemNoDecPlaces).HasDefaultValueSql("((2))");

                entity.Property(e => e.JobID).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobNumber).HasMaxLength(30);

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.MachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.NumberPieces).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OHeadRecoveryAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OverallDiscAmnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OverallDiscPcnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProspectRecNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReCostedBy)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ReCostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SalesOrderNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesperson)
                    .HasMaxLength(235)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SalespersonFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalespersonLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalespersonMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalespersonPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SiteAddressCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddress_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("SiteAddress#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddress_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("SiteAddress#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddress_3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("SiteAddress#3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddress_4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("SiteAddress#4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddress_5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("SiteAddress#5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SubContractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.AddressCountry)
                    .WithMany(p => p.EstimateAddressCountries)
                    .HasForeignKey(d => d.AddressCountryID)
                    .HasConstraintName("FK_Estimates_AddressCountryID");

                entity.HasOne(d => d.ContactSalutation)
                    .WithMany(p => p.EstimateContactSalutations)
                    .HasForeignKey(d => d.ContactSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Estimates_ContactSalutationID");

                entity.HasOne(d => d.SalespersonSalutation)
                    .WithMany(p => p.EstimateSalespersonSalutations)
                    .HasForeignKey(d => d.SalespersonSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Estimates_SalespersonSalutationID");

                entity.HasOne(d => d.SiteAddressCountry)
                    .WithMany(p => p.EstimateSiteAddressCountries)
                    .HasForeignKey(d => d.SiteAddressCountryID)
                    .HasConstraintName("FK_Estimates_SiteAddressCountryID");
            });

            modelBuilder.Entity<EventLog>(entity =>
            {
                entity.ToTable("EventLog");

                entity.HasIndex(e => e.EventLogTypeID, "IX_EventLog_EventLogTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.EventLogID).ValueGeneratedNever();

                entity.Property(e => e.Area)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfEvent).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TimeOfEvent).HasColumnType("datetime");

                entity.HasOne(d => d.EventLogType)
                    .WithMany(p => p.EventLogs)
                    .HasForeignKey(d => d.EventLogTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventLog_EventLogType");
            });

            modelBuilder.Entity<EventLogType>(entity =>
            {
                entity.ToTable("EventLogType");

                entity.Property(e => e.EventLogTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ExpenseType>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_ExpTypePrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.Reference, "IX_ExpTypeReference")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Credit).HasMaxLength(8);

                entity.Property(e => e.Debit).HasMaxLength(8);

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UnitOfSale)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<ExtensionVersion>(entity =>
            {
                entity.HasKey(e => e.Name);

                entity.ToTable("ExtensionVersion");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FAAsset>(entity =>
            {
                entity.ToTable("FAAsset");

                entity.HasIndex(e => e.AssetNumber, "IX_FAAsset_AssetNumber")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.FAAssetID).ValueGeneratedNever();

                entity.Property(e => e.AcquiredDate).HasColumnType("datetime");

                entity.Property(e => e.Analysis1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Analysis2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Analysis3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AssetNumber)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BSDepreciationAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BSDepreciationAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BSDepreciationAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DepreciationPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.DisposedDate).HasColumnType("datetime");

                entity.Property(e => e.InitialValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LastDepreciationDate).HasColumnType("datetime");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Manager)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NetBookBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PLDepreciationAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PLDepreciationAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PLDepreciationAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ResidualBalance).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.FADepreciationMethod)
                    .WithMany(p => p.FAAssets)
                    .HasForeignKey(d => d.FADepreciationMethodID)
                    .HasConstraintName("FK_FAAsset_FADepreciationMethod");
            });

            modelBuilder.Entity<FAAssetTransactionType>(entity =>
            {
                entity.ToTable("FAAssetTransactionType");

                entity.Property(e => e.FAAssetTransactionTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TransactionTypeName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FADepreciationMethod>(entity =>
            {
                entity.ToTable("FADepreciationMethod");

                entity.Property(e => e.FADepreciationMethodID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DepreciationMethodName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<FADepreciationTran>(entity =>
            {
                entity.ToTable("FADepreciationTran");

                entity.Property(e => e.FADepreciationTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OldValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostingValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.FAAsset)
                    .WithMany(p => p.FADepreciationTrans)
                    .HasForeignKey(d => d.FAAssetID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FADepreciationTran_FAAsset");

                entity.HasOne(d => d.FAAssetTransactionType)
                    .WithMany(p => p.FADepreciationTrans)
                    .HasForeignKey(d => d.FAAssetTransactionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FADepreciationTran_FAAssetTransactionType");

                entity.HasOne(d => d.SYSAccountingPeriod)
                    .WithMany(p => p.FADepreciationTrans)
                    .HasForeignKey(d => d.SYSAccountingPeriodID)
                    .HasConstraintName("FK_FADepreciationTran_SYSAccountingPeriod");
            });

            modelBuilder.Entity<FAFixedAssetAnalysisVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FAFixedAssetAnalysisVw");

                entity.Property(e => e.Analysis1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FAFixedAssetListVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FAFixedAssetListVw");

                entity.Property(e => e.AcquiredDate).HasColumnType("datetime");

                entity.Property(e => e.Analysis1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Analysis2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Analysis3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AssetNumber)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BSDepreciationAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BSDepreciationAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BSDepreciationAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.DepreciationPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.DisposalPosted).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.DisposedDate).HasColumnType("datetime");

                entity.Property(e => e.InitialValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LastDepreciationDate).HasColumnType("datetime");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Manager)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NetBookBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PLDepreciationAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PLDepreciationAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PLDepreciationAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ResidualBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalDepreciationPosted).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<FAFixedAssetLocationVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FAFixedAssetLocationVw");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FAFixedAssetManagerVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FAFixedAssetManagerVw");

                entity.Property(e => e.Manager)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Forecast>(entity =>
            {
                entity.ToTable("Forecast");

                entity.Property(e => e.ForecastID).ValueGeneratedNever();

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LinkedFilename)
                    .IsRequired()
                    .HasMaxLength(202)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasMaxLength(1002)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ForecastEntry>(entity =>
            {
                entity.ToTable("ForecastEntry");

                entity.Property(e => e.ForecastEntryID).ValueGeneratedNever();

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.ForecastQuantity).HasColumnType("decimal(20, 2)");

                entity.HasOne(d => d.ForecastProductLine)
                    .WithMany(p => p.ForecastEntries)
                    .HasForeignKey(d => d.ForecastProductLineID)
                    .HasConstraintName("FK_ForecastProductLine_ForecastProductLineID_ForecastEntry_ForecastProductLineID");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.ForecastEntries)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .HasConstraintName("FK_SLCustomerAccount_SLCustomerAccountID_ForecastEntry_SLCustomerAccountID");
            });

            modelBuilder.Entity<ForecastPLMonthlyBucket>(entity =>
            {
                entity.ToTable("ForecastPLMonthlyBucket");

                entity.Property(e => e.ForecastPLMonthlyBucketID).ValueGeneratedNever();

                entity.Property(e => e.Monthname)
                    .IsRequired()
                    .HasMaxLength(66)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SummedAdjust).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.SummedQuantity).HasColumnType("decimal(20, 2)");

                entity.HasOne(d => d.ForecastProductLine)
                    .WithMany(p => p.ForecastPLMonthlyBuckets)
                    .HasForeignKey(d => d.ForecastProductLineID)
                    .HasConstraintName("FK_ForecastProductLine_ForecastProductLineID_ForecastPLMonthlyBucket_ForecastProductLineID");
            });

            modelBuilder.Entity<ForecastPLWeeklyBucket>(entity =>
            {
                entity.ToTable("ForecastPLWeeklyBucket");

                entity.Property(e => e.ForecastPLWeeklyBucketID).ValueGeneratedNever();

                entity.Property(e => e.SummedAdjust).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.SummedQuantity).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.Week).HasDefaultValueSql("('0')");

                entity.Property(e => e.WeekStartDate).HasColumnType("datetime");

                entity.HasOne(d => d.ForecastProductLine)
                    .WithMany(p => p.ForecastPLWeeklyBuckets)
                    .HasForeignKey(d => d.ForecastProductLineID)
                    .HasConstraintName("FK_ForecastProductLine_ForecastProductLineID_ForecastPLWeeklyBucket_ForecastProductLineID");
            });

            modelBuilder.Entity<ForecastProdCustMonthBucket>(entity =>
            {
                entity.ToTable("ForecastProdCustMonthBucket");

                entity.Property(e => e.ForecastProdCustMonthBucketID).ValueGeneratedNever();

                entity.Property(e => e.Monthname)
                    .IsRequired()
                    .HasMaxLength(66)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SummedAdjust).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.SummedQuantity).HasColumnType("decimal(20, 2)");

                entity.HasOne(d => d.ForecastProductLine)
                    .WithMany(p => p.ForecastProdCustMonthBuckets)
                    .HasForeignKey(d => d.ForecastProductLineID)
                    .HasConstraintName("FK_ForecastProductLine_ForecastProductLineID_ForecastProdCustMonthBucket_ForecastProductLineID");
            });

            modelBuilder.Entity<ForecastProdCustWeekBucket>(entity =>
            {
                entity.ToTable("ForecastProdCustWeekBucket");

                entity.Property(e => e.ForecastProdCustWeekBucketID).ValueGeneratedNever();

                entity.Property(e => e.SummedAdjust).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.SummedQuantity).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.WeekStartDate).HasColumnType("datetime");

                entity.HasOne(d => d.ForecastProductLine)
                    .WithMany(p => p.ForecastProdCustWeekBuckets)
                    .HasForeignKey(d => d.ForecastProductLineID)
                    .HasConstraintName("FK_ForecastProductLine_ForecastProductLineID_ForecastProdCustWeekBucket_ForecastProductLineID");
            });

            modelBuilder.Entity<ForecastProductLine>(entity =>
            {
                entity.ToTable("ForecastProductLine");

                entity.Property(e => e.ForecastProductLineID).ValueGeneratedNever();

                entity.HasOne(d => d.Forecast)
                    .WithMany(p => p.ForecastProductLines)
                    .HasForeignKey(d => d.ForecastID)
                    .HasConstraintName("FK_Forecast_ForecastID_ForecastProductLine_ForecastID");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ForecastProductLines)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_StockItem_ItemID_ForecastProductLine_ItemID");
            });

            modelBuilder.Entity<ForecastSetting>(entity =>
            {
                entity.ToTable("ForecastSetting");

                entity.Property(e => e.ForecastSettingID).ValueGeneratedNever();

                entity.Property(e => e.CustomerColumnHeading)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FileBasePath)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ImportWorksheetName)
                    .IsRequired()
                    .HasMaxLength(66)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockCodeColumnHeading)
                    .IsRequired()
                    .HasMaxLength(22)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WarehouseColumnHeading)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.DefaultWarehouse)
                    .WithMany(p => p.ForecastSettings)
                    .HasForeignKey(d => d.DefaultWarehouseID)
                    .HasConstraintName("FK_Warehouse_WarehouseID_ForecastSetting_DefaultWarehouseID");
            });

            modelBuilder.Entity<GDPRContactCheckView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GDPRContactCheckView");

                entity.Property(e => e.ContactName).HasMaxLength(4000);

                entity.Property(e => e.EntityContactTitle)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.EntityFirstTitle)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EntityFirstValue).HasMaxLength(255);

                entity.Property(e => e.EntitySecondTitle)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.EntityType)
                    .IsRequired()
                    .HasMaxLength(29)
                    .IsUnicode(false);

                entity.Property(e => e.SYSModuleName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GpSetting>(entity =>
            {
                entity.ToTable("GpSetting");

                entity.Property(e => e.GpSettingID).ValueGeneratedNever();
            });

            modelBuilder.Entity<IJNCREASE_WebsiteDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IJNCREASE_WebsiteData");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Product Code");

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");
            });

            modelBuilder.Entity<INCREASE_Average_WO_Cost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Average_WO_Costs");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Labour).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Machine).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Materials).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Number_WOs).HasColumnName("Number WOs");

                entity.Property(e => e.Subcontract).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Sum_Qty).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Tooling).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Unit_Cost)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("Unit Cost");
            });

            modelBuilder.Entity<INCREASE_BOMOP_EstTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_BOMOP_EstTimes");

                entity.Property(e => e.Operation_Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Operation Reference");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Total_Mins)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Total Mins");
            });

            modelBuilder.Entity<INCREASE_BomCostLabour>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_BomCostLabour");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Labour_Cost).HasColumnType("decimal(38, 21)");
            });

            modelBuilder.Entity<INCREASE_BomCostMachine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_BomCostMachine");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Machine_Cost).HasColumnType("decimal(38, 21)");
            });

            modelBuilder.Entity<INCREASE_BomCostMaterial>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_BomCostMaterials");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Materials_Cost).HasColumnType("decimal(38, 21)");
            });

            modelBuilder.Entity<INCREASE_BomCostSubcontract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_BomCostSubcontract");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Subcontract_Cost).HasColumnType("decimal(38, 21)");
            });

            modelBuilder.Entity<INCREASE_BomCostTooling>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_BomCostTooling");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tooling_Cost).HasColumnType("decimal(38, 21)");
            });

            modelBuilder.Entity<INCREASE_BomHeader_StockItem>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accrued_receipts___account_number).HasColumnName("Accrued receipts - account number");

                entity.Property(e => e.Accrued_receipts___cost_centre)
                    .IsUnicode(false)
                    .HasColumnName("Accrued receipts - cost centre");

                entity.Property(e => e.Accrued_receipts___department)
                    .IsUnicode(false)
                    .HasColumnName("Accrued receipts - department");

                entity.Property(e => e.Alternative_item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Alternative item");

                entity.Property(e => e.Alternative_item_name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("Alternative item name");

                entity.Property(e => e.Asset_of_stock___account_number).HasColumnName("Asset of stock - account number");

                entity.Property(e => e.Asset_of_stock___cost_centre)
                    .IsUnicode(false)
                    .HasColumnName("Asset of stock - cost centre");

                entity.Property(e => e.Asset_of_stock___department)
                    .IsUnicode(false)
                    .HasColumnName("Asset of stock - department");

                entity.Property(e => e.Commodity_code)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Commodity code");

                entity.Property(e => e.Issues___account_number).HasColumnName("Issues - account number");

                entity.Property(e => e.Issues___cost_centre)
                    .IsUnicode(false)
                    .HasColumnName("Issues - cost centre");

                entity.Property(e => e.Issues___department)
                    .IsUnicode(false)
                    .HasColumnName("Issues - department");

                entity.Property(e => e.Manufacturer_s_name)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Manufacturer's name");

                entity.Property(e => e.Manufacturer_s_part_number)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Manufacturer's part number");

                entity.Property(e => e.Net_mass).HasColumnName("Net mass");

                entity.Property(e => e.Product_group)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product group");

                entity.Property(e => e.Revenue___account_number).HasColumnName("Revenue - account number");

                entity.Property(e => e.Revenue___cost_centre)
                    .IsUnicode(false)
                    .HasColumnName("Revenue - cost centre");

                entity.Property(e => e.Revenue___department)
                    .IsUnicode(false)
                    .HasColumnName("Revenue - department");

                entity.Property(e => e.Stock_item_code)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("Stock item code");

                entity.Property(e => e.Stock_item_description)
                    .HasMaxLength(405)
                    .IsUnicode(false)
                    .HasColumnName("Stock item description");

                entity.Property(e => e.Stock_item_name)
                    .HasMaxLength(43)
                    .IsUnicode(false)
                    .HasColumnName("Stock item name");

                entity.Property(e => e.Stock_take_days).HasColumnName("Stock take days");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier_lead_time).HasColumnName("Supplier lead time");

                entity.Property(e => e.Supplier_lead_time_unit)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Supplier lead time unit");

                entity.Property(e => e.Supplier_minimum_quantity).HasColumnName("Supplier minimum quantity");

                entity.Property(e => e.Supplier_part_number)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Supplier part number");

                entity.Property(e => e.Supplier_usual_order_quantity).HasColumnName("Supplier usual order quantity");

                entity.Property(e => e.Tax_code).HasColumnName("Tax code");
            });

            modelBuilder.Entity<INCREASE_BomMachineOp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.MachineChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription).HasMaxLength(60);

                entity.Property(e => e.MachineReference).HasMaxLength(30);

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);
            });

            modelBuilder.Entity<INCREASE_Bom_Cost1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Bom_Cost1");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CostHeadingName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QtyCosted).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<INCREASE_BookRepairablesInView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_BookRepairablesInView");

                entity.Property(e => e.Acc__Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc. Name");

                entity.Property(e => e.Acc__No)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Acc. No");

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Customer_Order_No_)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Customer Order No.");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.Issued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Other_Information)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Other Information");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Sabre_Order_No_)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sabre Order No.");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.Works_Order_No)
                    .HasMaxLength(30)
                    .HasColumnName("Works Order No");
            });

            modelBuilder.Entity<INCREASE_Build_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Build_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_Clean_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Clean_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_Code_Bin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Code_Bins");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INCREASE_ComponentTreatment_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ComponentTreatment_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_DateRepsRecvd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INCREASE_DateRepsRecvd");

                entity.Property(e => e.DateRepsRecvd)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INCREASE_Delivery_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Delivery_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_Despatch2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Despatch2");

                entity.Property(e => e.Cust_Acc)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Cust Acc");

                entity.Property(e => e.Cust_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Cust Name");

                entity.Property(e => e.Desp_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Desp Date");

                entity.Property(e => e.Desp_Quantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Desp Quantity");

                entity.Property(e => e.GRN_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GRN Number");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Line_Number).HasColumnName("Line Number");

                entity.Property(e => e.Line_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Line Qty");

                entity.Property(e => e.Product_Group)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Promised_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Date");

                entity.Property(e => e.Requested_Del_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Requested Del Date");

                entity.Property(e => e.SO_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("SO Date");

                entity.Property(e => e.SO_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Number");

                entity.Property(e => e.SO_Picking_list_Comment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasColumnName("SO Picking list Comment");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Stock_Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Stock Description");
            });

            modelBuilder.Entity<INCREASE_Despatch_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Despatch_View");

                entity.Property(e => e.Cust_Acc)
                    .IsUnicode(false)
                    .HasColumnName("Cust Acc");

                entity.Property(e => e.Cust_Name)
                    .IsUnicode(false)
                    .HasColumnName("Cust Name");

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Date_Reps_Recv_d)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Recv'd");

                entity.Property(e => e.Desp_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Desp Date");

                entity.Property(e => e.Desp_Quantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Desp Quantity");

                entity.Property(e => e.GRN_Number)
                    .IsUnicode(false)
                    .HasColumnName("GRN Number");

                entity.Property(e => e.InvoiceCreditNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Line_Number).HasColumnName("Line Number");

                entity.Property(e => e.Line_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Line Qty");

                entity.Property(e => e.Product_Group)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Promised_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Date");

                entity.Property(e => e.Requested_Del_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Requested Del Date");

                entity.Property(e => e.SO_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("SO Date");

                entity.Property(e => e.SO_Number)
                    .IsUnicode(false)
                    .HasColumnName("SO Number");

                entity.Property(e => e.Stock_Code)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Stock_Description)
                    .IsUnicode(false)
                    .HasColumnName("Stock Description");

                entity.Property(e => e.WO_Project_Number)
                    .HasMaxLength(50)
                    .HasColumnName("WO Project Number");

                entity.Property(e => e.WorksOrderNumber).IsUnicode(false);
            });

            modelBuilder.Entity<INCREASE_Despatch_View_OLD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Despatch_View_OLD");

                entity.Property(e => e.Cust_Acc)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Cust Acc");

                entity.Property(e => e.Cust_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Cust Name");

                entity.Property(e => e.Desp_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Desp Date");

                entity.Property(e => e.Desp_Quantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Desp Quantity");

                entity.Property(e => e.GRN_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GRN Number");

                entity.Property(e => e.Line_Number).HasColumnName("Line Number");

                entity.Property(e => e.Line_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Line Qty");

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Promised_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Date");

                entity.Property(e => e.Requested_Del_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Requested Del Date");

                entity.Property(e => e.SO_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("SO Date");

                entity.Property(e => e.SO_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Number");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Stock_Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Stock Description");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<INCREASE_Despatch_View_OLD_20170213>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Despatch_View_OLD_20170213");

                entity.Property(e => e.Cust_Acc)
                    .IsUnicode(false)
                    .HasColumnName("Cust Acc");

                entity.Property(e => e.Cust_Name)
                    .IsUnicode(false)
                    .HasColumnName("Cust Name");

                entity.Property(e => e.Date_Reps_Recv_d)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Date Reps Recv'd");

                entity.Property(e => e.Desp_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Desp Date");

                entity.Property(e => e.Desp_Quantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Desp Quantity");

                entity.Property(e => e.GRN_Number)
                    .IsUnicode(false)
                    .HasColumnName("GRN Number");

                entity.Property(e => e.Line_Number).HasColumnName("Line Number");

                entity.Property(e => e.Line_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Line Qty");

                entity.Property(e => e.Product_Group)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Promised_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Date");

                entity.Property(e => e.Requested_Del_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Requested Del Date");

                entity.Property(e => e.SO_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("SO Date");

                entity.Property(e => e.SO_Number)
                    .IsUnicode(false)
                    .HasColumnName("SO Number");

                entity.Property(e => e.Stock_Code)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Stock_Description)
                    .IsUnicode(false)
                    .HasColumnName("Stock Description");

                entity.Property(e => e.WorksOrderNumber).IsUnicode(false);
            });

            modelBuilder.Entity<INCREASE_Dismantle_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Dismantle_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_Est_Bom_Cost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Est_Bom_Cost");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Labour_Cost).HasColumnType("decimal(38, 21)");

                entity.Property(e => e.Machine_Cost).HasColumnType("decimal(38, 21)");

                entity.Property(e => e.Materials_Cost).HasColumnType("decimal(38, 21)");

                entity.Property(e => e.QtyCosted).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Subcontract_Cost).HasColumnType("decimal(38, 21)");

                entity.Property(e => e.Tooling_Cost).HasColumnType("decimal(38, 21)");

                entity.Property(e => e.Total_Est_Cost).HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<INCREASE_Est_vs_Actual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Est_vs_Actual");

                entity.Property(e => e.Act_Labour).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Act_Machine).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Act_Materials).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Act_Subcontract).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Act_Tooling).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Act_Unit_Cost).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Est_Labour).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Est_Machine).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Est_Materials).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Est_Subcontract).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Est_Tooling).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Number_WOs).HasColumnName("Number WOs");

                entity.Property(e => e.QtyCosted).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Sum_Qty).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Total_Est_Cost).HasColumnType("numeric(19, 4)");
            });

            modelBuilder.Entity<INCREASE_Final_Assembly_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Final_Assembly_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_GRNsWithEnteredDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_GRNsWithEnteredDates");

                entity.Property(e => e.Date_Entered)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Entered");

                entity.Property(e => e.Entered_By)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Entered By");

                entity.Property(e => e.GRN_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("GRN Date");

                entity.Property(e => e.GRN_No_)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("GRN No.");

                entity.Property(e => e.Order_No_)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Order No.");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");
            });

            modelBuilder.Entity<INCREASE_Inspect_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Inspect_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_IssuedCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_IssuedCosts");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.IssueCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyFinished).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<INCREASE_JanSale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_JanSales");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InvoicedGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedTaxValue).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<INCREASE_LatestBomCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_LatestBomCost");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CostHeadingName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QtyCosted).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<INCREASE_LatestCostSession>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_LatestCostSession");
            });

            modelBuilder.Entity<INCREASE_LinkedSalesOrdersCurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_LinkedSalesOrdersCurrent");

                entity.Property(e => e.CustomerDocumentNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DestinationItem).HasMaxLength(100);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<INCREASE_Location>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.F1).HasMaxLength(255);

                entity.Property(e => e.F2).HasMaxLength(255);

                entity.Property(e => e.F3).HasMaxLength(255);
            });

            modelBuilder.Entity<INCREASE_MonthlySal_vs_MatCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_MonthlySal_vs_MatCost");

                entity.Property(e => e.Invoice_Month).HasColumnName("Invoice Month");

                entity.Property(e => e.Invoice_Year).HasColumnName("Invoice Year");

                entity.Property(e => e.Material_Costs)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("Material Costs");

                entity.Property(e => e.Product_Group)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Sales_Price)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("Sales Price");
            });

            modelBuilder.Entity<INCREASE_ORIGINALSalesSchedule2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ORIGINALSalesSchedule2");

                entity.Property(e => e.BR_Cat_No_)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BR Cat No.");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Customer_Document_No_)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Customer Document No.");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .IsUnicode(false)
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Description)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Despatch Date");

                entity.Property(e => e.Despatch_Note_No_)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Despatch Note No.");

                entity.Property(e => e.Despatched).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.On_Site)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("On Site");

                entity.Property(e => e.Order_Qty)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Order Qty");

                entity.Property(e => e.Our_Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Our Stock Code");

                entity.Property(e => e.Outstanding_Qty)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Outstanding Qty");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Promised_Delivery_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Delivery Date");

                entity.Property(e => e.Qty_Completed)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Qty Completed");

                entity.Property(e => e.Requested_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Requested Date");

                entity.Property(e => e.Sabre_Order_No)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sabre Order No");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Works_Order_No_)
                    .HasMaxLength(30)
                    .HasColumnName("Works Order No.");
            });

            modelBuilder.Entity<INCREASE_OperationNumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_OperationNumbers");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_PaintCompleted_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_PaintCompleted_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_PaintPrep_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_PaintPrep_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_Paint_Component_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Paint_Component_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_ProductionPlanJan2014>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlanJan2014");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlanJan2014_Delivery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlanJan2014_Deliveries");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_FGBFC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_FGBFC");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_FGBOGE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_FGBOGE");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_FGCAU>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_FGCAU");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_FGDISPEN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_FGDISPEN");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_FGDISTRIBUTOR>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_FGDISTRIBUTORS");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_FGKONI>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_FGKONI");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_FGPBA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_FGPBA");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_FGPBA_old>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_FGPBA_old");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_FGVALVE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_FGVALVE");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_FGWOODHEAD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_FGWOODHEAD");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_OtherBrake>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_OtherBrakes");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_OtherBrakes_old>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_OtherBrakes_old");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_ProductionPlan_SPARE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_ProductionPlan_SPARES");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<INCREASE_SOPLineDateTimeCreated>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_SOPLineDateTimeCreated");

                entity.Property(e => e.Date__Time_Created)
                    .HasColumnType("datetime")
                    .HasColumnName("Date \\Time Created");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.SO_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Number");

                entity.Property(e => e.WO_reference)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WO reference");
            });

            modelBuilder.Entity<INCREASE_SOP_Inv_Material_Cost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_SOP_Inv_Material_Cost");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.Acc_Number)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Acc Number");

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualLabourOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMachineOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMaterialOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Batch_Number)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Batch Number");

                entity.Property(e => e.Desp__Qty)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Desp. Qty");

                entity.Property(e => e.EST_Labour_Costs)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("EST Labour Costs");

                entity.Property(e => e.EST_Labour_Overhead)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("EST Labour Overhead");

                entity.Property(e => e.EST_Machine_Overhead)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("EST Machine Overhead");

                entity.Property(e => e.EST_Material_Overhead)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("EST Material Overhead");

                entity.Property(e => e.EST_SO_WO_Variance)
                    .HasColumnType("decimal(35, 10)")
                    .HasColumnName("EST SO WO Variance");

                entity.Property(e => e.EST_Sub_Contract_Costs)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("EST Sub Contract Costs");

                entity.Property(e => e.EST_WO_Cost)
                    .HasColumnType("decimal(23, 5)")
                    .HasColumnName("EST WO Cost");

                entity.Property(e => e.Invoice_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice Date");

                entity.Property(e => e.Invoice_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Invoice Number");

                entity.Property(e => e.Invoice_Sales_Price)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Invoice Sales Price");

                entity.Property(e => e.Line_Net_Sale_Price)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("Line Net Sale Price");

                entity.Property(e => e.Product_Group)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Profit_Per_Unit)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("Profit Per Unit");

                entity.Property(e => e.SO_Line_Cost)
                    .HasColumnType("decimal(34, 10)")
                    .HasColumnName("SO Line Cost");

                entity.Property(e => e.SO_Line_Net_Profit)
                    .HasColumnType("decimal(24, 5)")
                    .HasColumnName("SO Line Net Profit");

                entity.Property(e => e.SO_Line_Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SO Line Stock Code");

                entity.Property(e => e.SO_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Number");

                entity.Property(e => e.SO_Selling_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("SO Selling Price");

                entity.Property(e => e.Total_Material_Costs)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Total Material Costs");

                entity.Property(e => e.Total_WO_Cost)
                    .HasColumnType("decimal(23, 5)")
                    .HasColumnName("Total WO Cost");

                entity.Property(e => e.WO_Qty_Finished)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("WO Qty Finished");

                entity.Property(e => e.WO_Status)
                    .HasMaxLength(20)
                    .HasColumnName("WO Status");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<INCREASE_SafetyCriticalFlag>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.ProductGroup).HasMaxLength(255);

                entity.Property(e => e.Safety_Critical)
                    .HasMaxLength(255)
                    .HasColumnName("Safety Critical");
            });

            modelBuilder.Entity<INCREASE_SalesSchedule2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_SalesSchedule2");

                entity.Property(e => e.BR_Cat_No_)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BR Cat No.");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Customer_Document_No_)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Customer Document No.");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .IsUnicode(false)
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Description)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Despatch Date");

                entity.Property(e => e.Despatch_Note_No_)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Despatch Note No.");

                entity.Property(e => e.Despatched).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.On_Site)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("On Site");

                entity.Property(e => e.Order_Qty)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Order Qty");

                entity.Property(e => e.Our_Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Our Stock Code");

                entity.Property(e => e.Outstanding_Qty)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Outstanding Qty");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Promised_Delivery_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Delivery Date");

                entity.Property(e => e.Qty_Completed)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Qty Completed");

                entity.Property(e => e.Requested_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Requested Date");

                entity.Property(e => e.Sabre_Order_No)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sabre Order No");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Works_Order_No_)
                    .HasMaxLength(30)
                    .HasColumnName("Works Order No.");
            });

            modelBuilder.Entity<INCREASE_SearchCatsImport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INCREASE_SearchCatsImport");

                entity.Property(e => e.cn_cat).HasMaxLength(255);

                entity.Property(e => e.cn_cat2).HasMaxLength(255);

                entity.Property(e => e.cn_ref).HasMaxLength(255);
            });

            modelBuilder.Entity<INCREASE_SlowStock6Month>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_SlowStock6Month");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");
            });

            modelBuilder.Entity<INCREASE_StockAvValueLastYear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_StockAvValueLastYear");

                entity.Property(e => e.Average_Last_Year_Price)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("Average Last Year Price");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INCREASE_StockDatum>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.cn_alt1).HasMaxLength(255);

                entity.Property(e => e.cn_alt2).HasMaxLength(255);

                entity.Property(e => e.cn_alt3).HasMaxLength(255);

                entity.Property(e => e.cn_anal).HasMaxLength(255);

                entity.Property(e => e.cn_barcode).HasMaxLength(255);

                entity.Property(e => e.cn_cat).HasMaxLength(255);

                entity.Property(e => e.cn_cat2).HasMaxLength(255);

                entity.Property(e => e.cn_catag).HasMaxLength(255);

                entity.Property(e => e.cn_cntorig).HasMaxLength(255);

                entity.Property(e => e.cn_comcode).HasMaxLength(255);

                entity.Property(e => e.cn_defwh).HasMaxLength(255);

                entity.Property(e => e.cn_desc).HasMaxLength(255);

                entity.Property(e => e.cn_discmat).HasMaxLength(255);

                entity.Property(e => e.cn_drawref).HasMaxLength(255);

                entity.Property(e => e.cn_estore).HasMaxLength(255);

                entity.Property(e => e.cn_exten).HasMaxLength(255);

                entity.Property(e => e.cn_fact).HasMaxLength(255);

                entity.Property(e => e.cn_key1).HasMaxLength(255);

                entity.Property(e => e.cn_key2).HasMaxLength(255);

                entity.Property(e => e.cn_key3).HasMaxLength(255);

                entity.Property(e => e.cn_key4).HasMaxLength(255);

                entity.Property(e => e.cn_lastiss).HasColumnType("datetime");

                entity.Property(e => e.cn_lastrct).HasColumnType("datetime");

                entity.Property(e => e.cn_lupdate).HasColumnType("datetime");

                entity.Property(e => e.cn_luptime).HasMaxLength(255);

                entity.Property(e => e.cn_memo).HasMaxLength(255);

                entity.Property(e => e.cn_nbatch).HasMaxLength(255);

                entity.Property(e => e.cn_ndate).HasColumnType("datetime");

                entity.Property(e => e.cn_nserial).HasMaxLength(255);

                entity.Property(e => e.cn_panal).HasMaxLength(255);

                entity.Property(e => e.cn_pict).HasMaxLength(255);

                entity.Property(e => e.cn_ref).HasMaxLength(255);

                entity.Property(e => e.cn_revisn).HasMaxLength(255);

                entity.Property(e => e.cn_sdate1).HasColumnType("datetime");

                entity.Property(e => e.cn_sdate2).HasColumnType("datetime");

                entity.Property(e => e.cn_supdate).HasColumnType("datetime");

                entity.Property(e => e.cn_super).HasMaxLength(255);

                entity.Property(e => e.cn_thumb).HasMaxLength(255);

                entity.Property(e => e.cn_wcat).HasMaxLength(255);

                entity.Property(e => e.cs_bin).HasMaxLength(255);

                entity.Property(e => e.cs_delch).HasMaxLength(255);

                entity.Property(e => e.cs_exten).HasMaxLength(255);

                entity.Property(e => e.cs_lastiss).HasColumnType("datetime");

                entity.Property(e => e.cs_lastrct).HasColumnType("datetime");

                entity.Property(e => e.cs_lupdate).HasColumnType("datetime");

                entity.Property(e => e.cs_luptime).HasMaxLength(255);

                entity.Property(e => e.cs_ref).HasMaxLength(255);

                entity.Property(e => e.cs_supcod1).HasMaxLength(255);

                entity.Property(e => e.cs_supcod2).HasMaxLength(255);

                entity.Property(e => e.cs_supcod3).HasMaxLength(255);

                entity.Property(e => e.cs_supp1).HasMaxLength(255);

                entity.Property(e => e.cs_supp2).HasMaxLength(255);

                entity.Property(e => e.cs_supp3).HasMaxLength(255);

                entity.Property(e => e.cs_wardate).HasColumnType("datetime");

                entity.Property(e => e.cs_whar).HasMaxLength(255);

                entity.Property(e => e.rtaby).HasMaxLength(255);

                entity.Property(e => e.rtadate).HasColumnType("datetime");

                entity.Property(e => e.rtissue).HasMaxLength(255);

                entity.Property(e => e.rtpby).HasMaxLength(255);

                entity.Property(e => e.rtpdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<INCREASE_StockImport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INCREASE_StockImport");

                entity.Property(e => e.Asset)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CC)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dept)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Item)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Narrative)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Warehouse)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INCREASE_StockItemsToBeSetAsBOM>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INCREASE_StockItemsToBeSetAsBOM");

                entity.Property(e => e.F10).HasMaxLength(255);

                entity.Property(e => e.F100).HasMaxLength(255);

                entity.Property(e => e.F101).HasMaxLength(255);

                entity.Property(e => e.F102).HasMaxLength(255);

                entity.Property(e => e.F103).HasMaxLength(255);

                entity.Property(e => e.F104).HasMaxLength(255);

                entity.Property(e => e.F105).HasMaxLength(255);

                entity.Property(e => e.F106).HasMaxLength(255);

                entity.Property(e => e.F107).HasMaxLength(255);

                entity.Property(e => e.F108).HasMaxLength(255);

                entity.Property(e => e.F109).HasMaxLength(255);

                entity.Property(e => e.F11).HasMaxLength(255);

                entity.Property(e => e.F110).HasMaxLength(255);

                entity.Property(e => e.F111).HasMaxLength(255);

                entity.Property(e => e.F112).HasMaxLength(255);

                entity.Property(e => e.F113).HasMaxLength(255);

                entity.Property(e => e.F114).HasMaxLength(255);

                entity.Property(e => e.F115).HasMaxLength(255);

                entity.Property(e => e.F116).HasMaxLength(255);

                entity.Property(e => e.F117).HasMaxLength(255);

                entity.Property(e => e.F118).HasMaxLength(255);

                entity.Property(e => e.F119).HasMaxLength(255);

                entity.Property(e => e.F12).HasMaxLength(255);

                entity.Property(e => e.F120).HasMaxLength(255);

                entity.Property(e => e.F121).HasMaxLength(255);

                entity.Property(e => e.F122).HasMaxLength(255);

                entity.Property(e => e.F123).HasMaxLength(255);

                entity.Property(e => e.F124).HasMaxLength(255);

                entity.Property(e => e.F125).HasMaxLength(255);

                entity.Property(e => e.F126).HasMaxLength(255);

                entity.Property(e => e.F127).HasMaxLength(255);

                entity.Property(e => e.F128).HasMaxLength(255);

                entity.Property(e => e.F129).HasMaxLength(255);

                entity.Property(e => e.F13).HasMaxLength(255);

                entity.Property(e => e.F130).HasMaxLength(255);

                entity.Property(e => e.F131).HasMaxLength(255);

                entity.Property(e => e.F132).HasMaxLength(255);

                entity.Property(e => e.F133).HasMaxLength(255);

                entity.Property(e => e.F134).HasMaxLength(255);

                entity.Property(e => e.F135).HasMaxLength(255);

                entity.Property(e => e.F136).HasMaxLength(255);

                entity.Property(e => e.F137).HasMaxLength(255);

                entity.Property(e => e.F138).HasMaxLength(255);

                entity.Property(e => e.F139).HasMaxLength(255);

                entity.Property(e => e.F14).HasMaxLength(255);

                entity.Property(e => e.F140).HasMaxLength(255);

                entity.Property(e => e.F141).HasMaxLength(255);

                entity.Property(e => e.F142).HasMaxLength(255);

                entity.Property(e => e.F143).HasMaxLength(255);

                entity.Property(e => e.F144).HasMaxLength(255);

                entity.Property(e => e.F15).HasMaxLength(255);

                entity.Property(e => e.F16).HasMaxLength(255);

                entity.Property(e => e.F17).HasMaxLength(255);

                entity.Property(e => e.F18).HasMaxLength(255);

                entity.Property(e => e.F19).HasMaxLength(255);

                entity.Property(e => e.F20).HasMaxLength(255);

                entity.Property(e => e.F21).HasMaxLength(255);

                entity.Property(e => e.F22).HasMaxLength(255);

                entity.Property(e => e.F23).HasMaxLength(255);

                entity.Property(e => e.F24).HasMaxLength(255);

                entity.Property(e => e.F25).HasMaxLength(255);

                entity.Property(e => e.F26).HasMaxLength(255);

                entity.Property(e => e.F27).HasMaxLength(255);

                entity.Property(e => e.F28).HasMaxLength(255);

                entity.Property(e => e.F29).HasMaxLength(255);

                entity.Property(e => e.F3).HasMaxLength(255);

                entity.Property(e => e.F30).HasMaxLength(255);

                entity.Property(e => e.F31).HasMaxLength(255);

                entity.Property(e => e.F32).HasMaxLength(255);

                entity.Property(e => e.F33).HasMaxLength(255);

                entity.Property(e => e.F34).HasMaxLength(255);

                entity.Property(e => e.F35).HasMaxLength(255);

                entity.Property(e => e.F36).HasMaxLength(255);

                entity.Property(e => e.F37).HasMaxLength(255);

                entity.Property(e => e.F38).HasMaxLength(255);

                entity.Property(e => e.F39).HasMaxLength(255);

                entity.Property(e => e.F4).HasMaxLength(255);

                entity.Property(e => e.F40).HasMaxLength(255);

                entity.Property(e => e.F41).HasMaxLength(255);

                entity.Property(e => e.F42).HasMaxLength(255);

                entity.Property(e => e.F43).HasMaxLength(255);

                entity.Property(e => e.F44).HasMaxLength(255);

                entity.Property(e => e.F45).HasMaxLength(255);

                entity.Property(e => e.F46).HasMaxLength(255);

                entity.Property(e => e.F47).HasMaxLength(255);

                entity.Property(e => e.F48).HasMaxLength(255);

                entity.Property(e => e.F49).HasMaxLength(255);

                entity.Property(e => e.F5).HasMaxLength(255);

                entity.Property(e => e.F50).HasMaxLength(255);

                entity.Property(e => e.F51).HasMaxLength(255);

                entity.Property(e => e.F52).HasMaxLength(255);

                entity.Property(e => e.F53).HasMaxLength(255);

                entity.Property(e => e.F54).HasMaxLength(255);

                entity.Property(e => e.F55).HasMaxLength(255);

                entity.Property(e => e.F56).HasMaxLength(255);

                entity.Property(e => e.F57).HasColumnType("datetime");

                entity.Property(e => e.F58).HasColumnType("datetime");

                entity.Property(e => e.F59).HasMaxLength(255);

                entity.Property(e => e.F6).HasMaxLength(255);

                entity.Property(e => e.F60).HasMaxLength(255);

                entity.Property(e => e.F61).HasColumnType("datetime");

                entity.Property(e => e.F62).HasMaxLength(255);

                entity.Property(e => e.F63).HasMaxLength(255);

                entity.Property(e => e.F64).HasMaxLength(255);

                entity.Property(e => e.F65).HasMaxLength(255);

                entity.Property(e => e.F66).HasMaxLength(255);

                entity.Property(e => e.F67).HasMaxLength(255);

                entity.Property(e => e.F68).HasMaxLength(255);

                entity.Property(e => e.F69).HasMaxLength(255);

                entity.Property(e => e.F7).HasMaxLength(255);

                entity.Property(e => e.F70).HasMaxLength(255);

                entity.Property(e => e.F71).HasColumnType("datetime");

                entity.Property(e => e.F72).HasMaxLength(255);

                entity.Property(e => e.F73).HasMaxLength(255);

                entity.Property(e => e.F74).HasMaxLength(255);

                entity.Property(e => e.F75).HasMaxLength(255);

                entity.Property(e => e.F76).HasMaxLength(255);

                entity.Property(e => e.F77).HasMaxLength(255);

                entity.Property(e => e.F78).HasMaxLength(255);

                entity.Property(e => e.F79).HasMaxLength(255);

                entity.Property(e => e.F8).HasMaxLength(255);

                entity.Property(e => e.F80).HasMaxLength(255);

                entity.Property(e => e.F81).HasMaxLength(255);

                entity.Property(e => e.F82).HasMaxLength(255);

                entity.Property(e => e.F83).HasMaxLength(255);

                entity.Property(e => e.F84).HasMaxLength(255);

                entity.Property(e => e.F85).HasMaxLength(255);

                entity.Property(e => e.F86).HasMaxLength(255);

                entity.Property(e => e.F87).HasMaxLength(255);

                entity.Property(e => e.F88).HasMaxLength(255);

                entity.Property(e => e.F89).HasMaxLength(255);

                entity.Property(e => e.F9).HasMaxLength(255);

                entity.Property(e => e.F90).HasMaxLength(255);

                entity.Property(e => e.F91).HasMaxLength(255);

                entity.Property(e => e.F92).HasMaxLength(255);

                entity.Property(e => e.F93).HasMaxLength(255);

                entity.Property(e => e.F94).HasMaxLength(255);

                entity.Property(e => e.F95).HasMaxLength(255);

                entity.Property(e => e.F96).HasMaxLength(255);

                entity.Property(e => e.F97).HasMaxLength(255);

                entity.Property(e => e.F98).HasMaxLength(255);

                entity.Property(e => e.F99).HasMaxLength(255);

                entity.Property(e => e.Stock_Code)
                    .HasMaxLength(255)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Stock_Item_Type)
                    .HasMaxLength(255)
                    .HasColumnName("Stock Item Type");
            });

            modelBuilder.Entity<INCREASE_StockReorderminmax>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INCREASE_StockReorderminmax");

                entity.Property(e => e.Min_Stock_Level).HasColumnName("Min Stock Level");

                entity.Property(e => e.Pt_No)
                    .HasMaxLength(255)
                    .HasColumnName("Pt No");

                entity.Property(e => e.Re_order_Level).HasColumnName("Re-order Level");
            });

            modelBuilder.Entity<INCREASE_Subassemble_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Subassemble_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_SupplierStockItem>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.cost_price).HasColumnName("cost price");

                entity.Property(e => e.currency).HasMaxLength(255);

                entity.Property(e => e.foreign_unit_dec_places).HasColumnName("foreign unit dec places");

                entity.Property(e => e.last_del_date)
                    .HasColumnType("datetime")
                    .HasColumnName("last del date");

                entity.Property(e => e.last_del_qty).HasColumnName("last del qty");

                entity.Property(e => e.last_unit_cost).HasColumnName("last unit cost");

                entity.Property(e => e.lead_time_day).HasColumnName("lead time day");

                entity.Property(e => e.min_order_qty).HasColumnName("min order qty");

                entity.Property(e => e.pref_supp)
                    .HasMaxLength(255)
                    .HasColumnName("pref supp");

                entity.Property(e => e.sq_crdate).HasColumnType("datetime");

                entity.Property(e => e.stk_profile)
                    .HasMaxLength(255)
                    .HasColumnName("stk profile");

                entity.Property(e => e.stock_code)
                    .HasMaxLength(255)
                    .HasColumnName("stock code");

                entity.Property(e => e.supp_stk_code)
                    .HasMaxLength(255)
                    .HasColumnName("supp stk code");

                entity.Property(e => e.supplier).HasMaxLength(255);
            });

            modelBuilder.Entity<INCREASE_Test_Time>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_Test_Times");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");
            });

            modelBuilder.Entity<INCREASE_UpdatedSupplierLeadTime>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Column_0)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 0");

                entity.Property(e => e.Column_1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 1");

                entity.Property(e => e.Column_10)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 10");

                entity.Property(e => e.Column_11)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 11");

                entity.Property(e => e.Column_12)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 12");

                entity.Property(e => e.Column_13)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 13");

                entity.Property(e => e.Column_2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 2");

                entity.Property(e => e.Column_3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 3");

                entity.Property(e => e.Column_4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 4");

                entity.Property(e => e.Column_5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 5");

                entity.Property(e => e.Column_6)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 6");

                entity.Property(e => e.Column_7)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 7");

                entity.Property(e => e.Column_8)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 8");

                entity.Property(e => e.Column_9)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 9");
            });

            modelBuilder.Entity<INCREASE_WOP_Bom_Cost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_WOP_Bom_Cost");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Number_WOs).HasColumnName("Number WOs");

                entity.Property(e => e.Sum_Contract).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Sum_Labour).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Sum_Machine).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Sum_Material).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Sum_Qty).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Sum_Tooling).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<INCREASE_WO_QtyFinished>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_WO_QtyFinished");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.QtyFinished).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<INCREASE_WO_comp_Issue_cost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_WO_comp_Issue_costs");

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Issued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.TotalIssueCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<INCREASE_WorksOrderGRN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_WorksOrderGRN");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INCREASE_vw_12MonthUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_12MonthUse");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<INCREASE_vw_1MonthUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_1MonthUse");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<INCREASE_vw_3MonthUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_3MonthUse");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<INCREASE_vw_BatchReservedVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_BatchReservedVw");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.AvailableForDespatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Expr2).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Expr3).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Expr4).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Expr5).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Expr6).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Expr7).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitAllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitAvailableForDespatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TraceAvailForDespatch).HasColumnType("decimal(15, 5)");
            });

            modelBuilder.Entity<INCREASE_vw_BomToTraceableComponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_BomToTraceableComponent");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INCREASE_vw_ContactDetailsforEstimate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_ContactDetailsforEstimate");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.Role)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INCREASE_vw_ForecastMonthByCustomerView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_ForecastMonthByCustomerView");

                entity.Property(e => e.Actual).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Adjustments).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Monthname)
                    .IsRequired()
                    .HasMaxLength(66);

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<INCREASE_vw_ForecastMonthByStockItemView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_ForecastMonthByStockItemView");

                entity.Property(e => e.Actual).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Adjustments).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Monthname)
                    .IsRequired()
                    .HasMaxLength(66);

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<INCREASE_vw_ForecastMonthlyBucketView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_ForecastMonthlyBucketView");

                entity.Property(e => e.Actual).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Adjustments).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Monthname)
                    .IsRequired()
                    .HasMaxLength(66);

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<INCREASE_vw_ForecastUniqueCustAndProd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_ForecastUniqueCustAndProd");
            });

            modelBuilder.Entity<INCREASE_vw_ForecastWeekByCustomerView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_ForecastWeekByCustomerView");

                entity.Property(e => e.Actual).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Adjustments).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.WeekStartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<INCREASE_vw_ForecastWeekByStockItemView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_ForecastWeekByStockItemView");

                entity.Property(e => e.Actual).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Adjustments).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.WeekStartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<INCREASE_vw_ForecastWeeklyBucketView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_ForecastWeeklyBucketView");

                entity.Property(e => e.Actual).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Adjustments).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.WeekStartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<INCREASE_vw_ProductionPlanMk2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_ProductionPlanMk2");

                entity.Property(e => e.AccName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccNo)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AssemblySection)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BatchNo).IsUnicode(false);

                entity.Property(e => e.BrCatNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Complete).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CustomerOrderNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateRepsRecd).IsUnicode(false);

                entity.Property(e => e.DeliverySection)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DismantlingSection)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.GRN).IsUnicode(false);

                entity.Property(e => e.NextOP).IsUnicode(false);

                entity.Property(e => e.NextOpName).IsUnicode(false);

                entity.Property(e => e.OrderStatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaintSection)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PickingListComment)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PlannedStartDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectNumber).HasMaxLength(50);

                entity.Property(e => e.PromisedDespatchDate).HasColumnType("datetime");

                entity.Property(e => e.QtyOnSite).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.RepsDueonSite).HasColumnType("datetime");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SabreOrderNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.WorksOrderNo).HasMaxLength(30);
            });

            modelBuilder.Entity<INCREASE_vw_ProductionPlanNew_DONOTUSE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_ProductionPlanNew_DONOTUSE");

                entity.Property(e => e.Acc__Name)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc. Name");

                entity.Property(e => e.Acc__No)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Acc. No");

                entity.Property(e => e.Batch_No)
                    .IsUnicode(false)
                    .HasColumnName("Batch No");

                entity.Property(e => e.Customer_Order_No_)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Customer Order No.");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .IsUnicode(false)
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Next_Op_Code)
                    .IsUnicode(false)
                    .HasColumnName("Next Op Code");

                entity.Property(e => e.Next_Operation)
                    .IsUnicode(false)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.Order_Status)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Order Status");

                entity.Property(e => e.Picking_List_Comment)
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasColumnName("Picking List Comment");

                entity.Property(e => e.Planned_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Planned Start Date");

                entity.Property(e => e.Product_Group)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ProjectNumber).HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.Reps_Due_on_Site)
                    .HasColumnType("datetime")
                    .HasColumnName("Reps Due on Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.Sabre_Order_No_)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sabre Order No.");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.Stock_Item_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Item Code");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Works_Order_No)
                    .HasMaxLength(30)
                    .HasColumnName("Works Order No");
            });

            modelBuilder.Entity<INCREASE_vw_ReorderReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_ReorderReport");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Poporders).IsRequired();

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 3 Month");
            });

            modelBuilder.Entity<INCREASE_vw_RepairablesFreeStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE-vw_RepairablesFreeStock");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Qty_Free_Stock)
                    .HasColumnType("decimal(17, 5)")
                    .HasColumnName("Qty Free Stock");
            });

            modelBuilder.Entity<INCREASE_vw_SOLine_Batch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_SOLine-Batch");

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sales_Order_No_and_Line)
                    .HasMaxLength(51)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order No and Line");
            });

            modelBuilder.Entity<INCREASE_vw_SalesOrderLinesWithoutPromiseDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_SalesOrderLinesWithoutPromiseDates");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<INCREASE_vw_SalesSchedule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_SalesSchedule");

                entity.Property(e => e.BR_Cat_No_)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BR Cat No.");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Customer_Document_No_)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Customer Document No.");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .IsUnicode(false)
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Description)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Despatch Date");

                entity.Property(e => e.Despatch_Note_No_)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Despatch Note No.");

                entity.Property(e => e.Despatched).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.On_Site)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("On Site");

                entity.Property(e => e.Order_Qty)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Order Qty");

                entity.Property(e => e.Our_Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Our Stock Code");

                entity.Property(e => e.Outstanding_Qty)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Outstanding Qty");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Promised_Delivery_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Delivery Date");

                entity.Property(e => e.Requested_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Requested Date");

                entity.Property(e => e.Sabre_Order_No)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sabre Order No");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Works_Order_No_)
                    .HasMaxLength(30)
                    .HasColumnName("Works Order No.");
            });

            modelBuilder.Entity<INCREASE_vw_StockItemLastPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_StockItemLastPrice");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");
            });

            modelBuilder.Entity<INCREASE_vw_StockItemsWithBin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_StockItemsWithBins");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INCREASE_vw_StockitemLastDespatched>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_StockitemLastDespatched");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionTypeName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INCREASE_vw_StockitemWOAllocationsandIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_StockitemWOAllocationsandIssues");

                entity.Property(e => e.Allocated).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Issued).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<INCREASE_vw_WOtoTraceableComponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_WOtoTraceableComponent");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<INCREASE_vw_WorksOrderIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_WorksOrderIssues");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Allocation_WO_Link)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Allocation WO Link");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Despatch_WO_Link)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Despatch WO Link");

                entity.Property(e => e.DestinationItem).HasMaxLength(100);

                entity.Property(e => e.InvoiceCreditDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Invoice_WO_Link)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Invoice WO Link");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Order_Line_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Order Line Qty");

                entity.Property(e => e.SOP_Order_No)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SOP Order No");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");
            });

            modelBuilder.Entity<INCREASE_vw_WorksOrderIssues1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INCREASE_vw_WorksOrderIssues1");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Allocation_WO_Link)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Allocation WO Link");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Despatch_WO_Link)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Despatch WO Link");

                entity.Property(e => e.DestinationItem).HasMaxLength(100);

                entity.Property(e => e.InvoiceCreditDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Invoice_WO_Link)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Invoice WO Link");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Order_Line_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Order Line Qty");

                entity.Property(e => e.SOP_Order_No)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SOP Order No");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");
            });

            modelBuilder.Entity<INVCustomerUnitPricePref>(entity =>
            {
                entity.ToTable("INVCustomerUnitPricePref");

                entity.Property(e => e.INVCustomerUnitPricePrefID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INVInvCredNominalItem>(entity =>
            {
                entity.ToTable("INVInvCredNominalItem");

                entity.HasIndex(e => e.INVInvoiceCreditID, "IX_INVInvCredNominalItem_INVInvoiceCreditID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.INVInvCredNominalItemID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.INVInvoiceCredit)
                    .WithMany(p => p.INVInvCredNominalItems)
                    .HasForeignKey(d => d.INVInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_INVInvCredNominalItem_INVInvoiceCredit");
            });

            modelBuilder.Entity<INVInvCredTaxItem>(entity =>
            {
                entity.ToTable("INVInvCredTaxItem");

                entity.HasIndex(e => e.INVInvoiceCreditID, "IX_INVInvCredTaxItem_INVInvoiceCreditID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCodeID, "IX_INVInvCredTaxItem_TaxCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.INVInvCredTaxItemID).ValueGeneratedNever();

                entity.Property(e => e.CoreDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreDiscountedTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreGoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountedTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.INVInvoiceCredit)
                    .WithMany(p => p.INVInvCredTaxItems)
                    .HasForeignKey(d => d.INVInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_INVInvCredTaxItem_INVInvoiceCredit");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.INVInvCredTaxItems)
                    .HasForeignKey(d => d.TaxCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_INVInvCredTaxItem_SYSTaxRate");
            });

            modelBuilder.Entity<INVInvoiceCredit>(entity =>
            {
                entity.ToTable("INVInvoiceCredit");

                entity.HasIndex(e => e.INVBillingAddressID, "IX_INVInvoiceCredit_INVBillingAddressID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.INVDeliveryAddressID, "IX_INVInvoiceCredit_INVDeliveryAddressID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.INVInvoiceCreditTypeID, "IX_INVInvoiceCredit_INVInvoiceCreditTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.INVInvoiceCreditTypeID, e.DocumentNo }, "IX_INVInvoiceCredit_INVInvoiceCreditTypeID_DocumentNo")
                    .IsUnique();

                entity.HasIndex(e => e.DocumentStatusID, "IX_INVInvoiceCredit_INVInvoiceStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_INVInvoiceCredit_SLCustomerAccountID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.INVInvoiceCreditID).ValueGeneratedNever();

                entity.Property(e => e.CancelledBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateCancelled).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountedTotalGoods).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.DocumentDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EmailHeader)
                    .IsRequired()
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvdCoreTaxValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvdGrossValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvdNetValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvdTaxValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedChargesValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedCoreTaxValInclNotional).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedCoreTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedTaxValInclNotional).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentCloudPaymentID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReasonCancelled)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SettlementDiscPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.ToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.DocumentStatus)
                    .WithMany(p => p.INVInvoiceCredits)
                    .HasForeignKey(d => d.DocumentStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_INVInvoiceCredit_INVInvoiceStatus");

                entity.HasOne(d => d.INVBillingAddress)
                    .WithMany(p => p.INVInvoiceCreditINVBillingAddresses)
                    .HasForeignKey(d => d.INVBillingAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_INVInvoiceCredit_INVBillingAddress");

                entity.HasOne(d => d.INVDeliveryAddress)
                    .WithMany(p => p.INVInvoiceCreditINVDeliveryAddresses)
                    .HasForeignKey(d => d.INVDeliveryAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_INVInvoiceCredit_INVDeliveryAddress");

                entity.HasOne(d => d.INVInvoiceCreditType)
                    .WithMany(p => p.INVInvoiceCredits)
                    .HasForeignKey(d => d.INVInvoiceCreditTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_INVInvoiceCredit_INVInvoiceCreditTypeID");

                entity.HasOne(d => d.InvoiceCreditUpdateStatusType)
                    .WithMany(p => p.INVInvoiceCredits)
                    .HasForeignKey(d => d.InvoiceCreditUpdateStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_INVInvoiceCredit_InvoiceCreditUpdateStatusType");

                entity.HasOne(d => d.PaymentCloudPaymentStatusType)
                    .WithMany(p => p.INVInvoiceCredits)
                    .HasForeignKey(d => d.PaymentCloudPaymentStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_INVInvoiceCredit_PaymentCloudPaymentStatusType");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.INVInvoiceCredits)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .HasConstraintName("FK_INVInvoiceCredit_SLCustomerAccount");
            });

            modelBuilder.Entity<INVInvoiceCreditAddress>(entity =>
            {
                entity.ToTable("INVInvoiceCreditAddress");

                entity.Property(e => e.INVInvoiceCreditAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<INVInvoiceCreditLine>(entity =>
            {
                entity.ToTable("INVInvoiceCreditLine");

                entity.HasIndex(e => e.INVInvoiceCreditID, "IX_INVInvoiceCreditLine_INVInvoiceCreditID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTaxRateID, "IX_INVInvoiceCreditLine_SYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.INVInvoiceCreditLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvoiceCreditDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ItemUnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LineDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PriceUnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SourceAreaName)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceAreaReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceAreaType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.INVInvoiceCredit)
                    .WithMany(p => p.INVInvoiceCreditLines)
                    .HasForeignKey(d => d.INVInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_INVInvoiceCreditLine_INVInvoiceCredit");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.INVInvoiceCreditLines)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .HasConstraintName("FK_INVInvoiceCreditLine_SYSTaxRate");
            });

            modelBuilder.Entity<INVInvoiceCreditType>(entity =>
            {
                entity.ToTable("INVInvoiceCreditType");

                entity.Property(e => e.INVInvoiceCreditTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<INVInvoiceStatus>(entity =>
            {
                entity.ToTable("INVInvoiceStatus");

                entity.Property(e => e.INVInvoiceStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ImportStockType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ImportStockType");

                entity.Property(e => e.Column_0)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 0");

                entity.Property(e => e.Column_1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 1");
            });

            modelBuilder.Entity<ImportedLeadTime>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Column_10)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 10");

                entity.Property(e => e.Column_11)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 11");

                entity.Property(e => e.Column_12)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 12");

                entity.Property(e => e.Column_13)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 13");

                entity.Property(e => e.Column_7)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 7");

                entity.Property(e => e.Column_8)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 8");

                entity.Property(e => e.Column_9)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Column 9");

                entity.Property(e => e.Lead_Time_New)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Lead Time New");

                entity.Property(e => e.Lead_Time_Old)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Lead Time Old");

                entity.Property(e => e.Lead_Time_Roundup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Lead Time Roundup");

                entity.Property(e => e.Stock_Code)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Stock_Description)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("Stock Description");

                entity.Property(e => e.Supplier_Acc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Supplier Acc");

                entity.Property(e => e.Supplier_Name)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("Supplier Name");
            });

            modelBuilder.Entity<Increase_AVGStockValueLastYear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Increase_AVGStockValueLastYear");

                entity.Property(e => e.Average_Last_Year_Price)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("Average Last Year Price");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Increase_Mstklvl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Increase_StockAvValueThisYear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Increase_StockAvValueThisYear");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Current_Average_Price)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("Current Average Price");
            });

            modelBuilder.Entity<Increase_stklvl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InternalArea>(entity =>
            {
                entity.ToTable("InternalArea");

                entity.HasIndex(e => e.InternalAreaName, "IX_InternalArea_InternalAreaName")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NominalCodeID, "IX_InternalArea_NominalCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InternalAreaID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InternalAreaName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NominalCode)
                    .WithMany(p => p.InternalAreas)
                    .HasForeignKey(d => d.NominalCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InternalArea_NLNominalAccount");
            });

            modelBuilder.Entity<IntrastatDateType>(entity =>
            {
                entity.ToTable("IntrastatDateType");

                entity.Property(e => e.IntrastatDateTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IntrastatDestinationType>(entity =>
            {
                entity.ToTable("IntrastatDestinationType");

                entity.Property(e => e.IntrastatDestinationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IntrastatEntry>(entity =>
            {
                entity.ToTable("IntrastatEntry");

                entity.HasIndex(e => e.EntrySourceID, "IX_IntrastatEntry_EntrySourceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ModeOfTransportID, "IX_IntrastatEntry_ModeOfTransportID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NatureOfTransCodeID, "IX_IntrastatEntry_NatureOfTransCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TermsOfDeliveryID, "IX_IntrastatEntry_TermsOfDeliveryID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IntrastatEntryID).ValueGeneratedNever();

                entity.Property(e => e.AccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CommodityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateIntrastatPrinted).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DestinationCountryCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.EntrySourceID).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoiceCreditNoteNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InvoiceDespatchDate).HasColumnType("datetime");

                entity.Property(e => e.ModeOfTransportID).HasDefaultValueSql("((0))");

                entity.Property(e => e.NatureOfTransCodeID).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderReturnDate).HasColumnType("datetime");

                entity.Property(e => e.OrderReturnLineValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OrderReturnNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OriginCountryCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PrintSequenceNumber).HasDefaultValueSql("('')");

                entity.Property(e => e.StatisticalValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupplementaryUnits).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TermsOfDeliveryID).HasDefaultValueSql("('')");

                entity.Property(e => e.Weight).HasColumnType("decimal(15, 4)");

                entity.HasOne(d => d.EntrySource)
                    .WithMany(p => p.IntrastatEntries)
                    .HasForeignKey(d => d.EntrySourceID)
                    .HasConstraintName("FK_SSDEntry_EntrySource");

                entity.HasOne(d => d.IntrastatEntryHeader)
                    .WithMany(p => p.IntrastatEntries)
                    .HasForeignKey(d => d.IntrastatEntryHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IntrastatEntry_IntrastatEntryHeaderID");

                entity.HasOne(d => d.IntrastatStatus)
                    .WithMany(p => p.IntrastatEntries)
                    .HasForeignKey(d => d.IntrastatStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IntrastatEntry_IntrastatStatusID");

                entity.HasOne(d => d.ModeOfTransport)
                    .WithMany(p => p.IntrastatEntries)
                    .HasForeignKey(d => d.ModeOfTransportID)
                    .HasConstraintName("FK_IntrastatEntry_ModeOfTransport");

                entity.HasOne(d => d.NatureOfTransCode)
                    .WithMany(p => p.IntrastatEntries)
                    .HasForeignKey(d => d.NatureOfTransCodeID)
                    .HasConstraintName("FK_IntrastatEntry_NatureOfTransCode");

                entity.HasOne(d => d.TermsOfDelivery)
                    .WithMany(p => p.IntrastatEntries)
                    .HasForeignKey(d => d.TermsOfDeliveryID)
                    .HasConstraintName("FK_IntrastatEntry_TermsOfDelivery");
            });

            modelBuilder.Entity<IntrastatEntryHeader>(entity =>
            {
                entity.ToTable("IntrastatEntryHeader");

                entity.Property(e => e.IntrastatEntryHeaderID).ValueGeneratedNever();

                entity.Property(e => e.AgentBranchIDCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AgentName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AgentTaxRegistrationCode)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.BranchIDCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderDate).HasColumnType("datetime");

                entity.Property(e => e.HeaderDescription)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRegistrationCode)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.HasOne(d => d.IntrastatDestinationType)
                    .WithMany(p => p.IntrastatEntryHeaders)
                    .HasForeignKey(d => d.IntrastatDestinationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IntrastatEntryHeader_IntrastatDestinationType");

                entity.HasOne(d => d.IntrastatEntryHeaderStatus)
                    .WithMany(p => p.IntrastatEntryHeaders)
                    .HasForeignKey(d => d.IntrastatEntryHeaderStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IntrastatEntryHeader_IntrastatEntryHeaderStatus");
            });

            modelBuilder.Entity<IntrastatEntryHeaderStatus>(entity =>
            {
                entity.ToTable("IntrastatEntryHeaderStatus");

                entity.Property(e => e.IntrastatEntryHeaderStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IntrastatStatus>(entity =>
            {
                entity.ToTable("IntrastatStatus");

                entity.Property(e => e.IntrastatStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvoiceCreditUpdateStatusType>(entity =>
            {
                entity.ToTable("InvoiceCreditUpdateStatusType");

                entity.Property(e => e.InvoiceCreditUpdateStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvoiceLineProfitAnalysis>(entity =>
            {
                entity.ToTable("InvoiceLineProfitAnalysis");

                entity.HasIndex(e => e.InvoiceProfitAnalysisID, "IX_InvoiceLineProfitAnalysis_InvoiceProfitAnalysisID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPInvoiceCreditLineID, "IX_InvoiceLineProfitAnalysis_SOPInvoiceCreditLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvoiceLineProfitAnalysisID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EstProfitPercentOnCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstProfitPercentOnRev).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedProfitValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.IssueRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RealisedCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitPercentOnCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitPercentOnRev).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedQuantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.InvoiceProfitAnalysis)
                    .WithMany(p => p.InvoiceLineProfitAnalyses)
                    .HasForeignKey(d => d.InvoiceProfitAnalysisID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvoiceLineProfitAnalysis_InvoiceProfitAnalysis");

                entity.HasOne(d => d.SOPInvoiceCreditLine)
                    .WithMany(p => p.InvoiceLineProfitAnalyses)
                    .HasForeignKey(d => d.SOPInvoiceCreditLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvoiceLineProfitAnalysis_SOPInvoiceCreditLine");
            });

            modelBuilder.Entity<InvoiceProfitAnalysis>(entity =>
            {
                entity.ToTable("InvoiceProfitAnalysis");

                entity.HasIndex(e => e.SOPInvoiceCreditID, "IX_InvoiceProfitAnalysis_SOPInvoiceCreditID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.InvoiceProfitAnalysisID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EstProfitPercentOnCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstProfitPercentOnRev).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedProfitValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.IssueValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RealisedCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedIssueValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitPercentOnCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitPercentOnRev).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitValue).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.SOPInvoiceCredit)
                    .WithMany(p => p.InvoiceProfitAnalyses)
                    .HasForeignKey(d => d.SOPInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvoiceProfitAnalysis_SOPInvoiceCredit");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_JobsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.Reference, "IX_JobsReference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SalesOrderNumber, "IX_JobsSalesOrderNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.AccountRef, "IX_Jobs_AccountRef")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ContactSalutationID, "IX_Jobs_ContactSalutationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.EstimateID, "IX_Jobs_EstimateID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SalespersonSalutationID, "IX_Jobs_SalespersonSalutationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SiteAddressCountryID, "IX_Jobs_SiteAddressCountryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemUnitID, "IX_Jobs_StockItemUnitID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AccToDebit).HasMaxLength(8);

                entity.Property(e => e.AccountName)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ActSubContVariance).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualNonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualOtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualTotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompletedDate).HasColumnType("datetime");

                entity.Property(e => e.Contact)
                    .HasMaxLength(235)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CostsTransStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreditedTD).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(60);

                entity.Property(e => e.Custom_1)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#1");

                entity.Property(e => e.Custom_2)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#2");

                entity.Property(e => e.Custom_3)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#3");

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EstLabourProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstMachineProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstMaterialProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstNonStockProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstOHeadAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstOtherProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSetupProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSubProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstToolingProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstTotalProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimateID).HasDefaultValueSql("((0))");

                entity.Property(e => e.EstimateNumber).HasMaxLength(30);

                entity.Property(e => e.EstimatedLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedNonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedOtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedTotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.FinProdCode).HasMaxLength(30);

                entity.Property(e => e.FinProdDesc).HasMaxLength(60);

                entity.Property(e => e.FinQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ImageForWoDocs).HasMaxLength(255);

                entity.Property(e => e.InvoicedTD).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastCostDate).HasColumnType("datetime");

                entity.Property(e => e.LastInvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MachineActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NextAppPaymentNo).HasDefaultValueSql("((1))");

                entity.Property(e => e.NonStockActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OSInvoice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OverallDiscAmnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OverallDiscPcnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PcntComplete).HasDefaultValueSql("((0))");

                entity.Property(e => e.Profit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProjectNumber).HasMaxLength(50);

                entity.Property(e => e.QtyFinished).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyScrapped).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ReasonForScrap).HasColumnType("ntext");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SalesOrderNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesperson)
                    .HasMaxLength(235)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SalespersonFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalespersonLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalespersonMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalespersonPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SetupActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SiteAddress1)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SiteAddress2)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SiteAddress3)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SiteAddress4)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SiteAddress5)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SiteAddressCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SiteAddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SubActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksNumber)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.ContactSalutation)
                    .WithMany(p => p.JobContactSalutations)
                    .HasForeignKey(d => d.ContactSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Jobs_ContactSalutationID");

                entity.HasOne(d => d.SalespersonSalutation)
                    .WithMany(p => p.JobSalespersonSalutations)
                    .HasForeignKey(d => d.SalespersonSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Jobs_SalespersonSalutationID");

                entity.HasOne(d => d.SiteAddressCountry)
                    .WithMany(p => p.Jobs)
                    .HasForeignKey(d => d.SiteAddressCountryID)
                    .HasConstraintName("FK_Jobs_SiteAddressCountryID");
            });

            modelBuilder.Entity<JobActualOpTime>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_JobsStgActualOpPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_JobsStgActualOpHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualLabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ActualMachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ActualSetupMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ActualSubMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.CategoryDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CategoryReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmployeeNumber)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourEnd).HasColumnType("datetime");

                entity.Property(e => e.LabourRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourStart).HasColumnType("datetime");

                entity.Property(e => e.MachineEnd).HasColumnType("datetime");

                entity.Property(e => e.MachineRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineStart).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PieceWorkQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWorkRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UserName).HasMaxLength(30);

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.JobActualOpTimes)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JobActualOpTimes_FK00");
            });

            modelBuilder.Entity<JobAllocIssue>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_JobsStgAllocPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.MfgAllocLineID, "IX_JobAllocIssues_MfgAllocLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemUnitID, "IX_JobAllocIssues_StockItemUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.ProductCode }, "IX_JobsStgAllocHeader+ProdCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_JobsStgAllocHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BinLocation).HasMaxLength(20);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Issued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ProductCode).HasMaxLength(30);

                entity.Property(e => e.ReasonForScrap).HasColumnType("ntext");

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Scrapped).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.JobAllocIssues)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JobAllocIssues_FK00");
            });

            modelBuilder.Entity<JobAttachedDocument>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_JobsAttPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_JobsAttHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.FileName).HasMaxLength(255);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.JobAttachedDocuments)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JobAttachedDocuments_FK00");
            });

            modelBuilder.Entity<JobInvoicesByStage>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_JobsStgInvPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("JobInvoicesByStage");

                entity.HasIndex(e => e.HeaderID, "IX_JobsStgInvHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Number, "IX_JobsStgInvNumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Number)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.User)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.JobInvoicesByStages)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JobInvoicesByStage_FK00");
            });

            modelBuilder.Entity<JobMaterial>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_JobsStgMatPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.StockItemUnitID, "IX_JobMaterials_StockItemUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_JobsStgMatHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.JobID, "IX_JobsStgMatJobID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Type).HasMaxLength(2);

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.JobMaterials)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JobMaterials_FK00");
            });

            modelBuilder.Entity<JobNonStock>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_JobsStgNonStkPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("JobNonStock");

                entity.HasIndex(e => e.HeaderID, "IX_JobsStgNonStkHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.JobID, "IX_JobsStgNonStkJobID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PINumber).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SupplierRef).HasMaxLength(10);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Type).HasMaxLength(2);

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.JobNonStocks)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JobNonStock_FK00");
            });

            modelBuilder.Entity<JobOpComponent>(entity =>
            {
                entity.HasIndex(e => e.ComponentID, "IX_JobOpComponents_ComponentID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OperationID, "IX_JobOpComponents_OperationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StageID, "IX_JobOpComponents_StageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemUnitID, "IX_JobOpComponents_StockItemUnitID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitofMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Component)
                    .WithMany(p => p.JobOpComponents)
                    .HasForeignKey(d => d.ComponentID)
                    .HasConstraintName("FK_JobOpComponents_JobAllocIssues");
            });

            modelBuilder.Entity<JobOperation>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_JobsStgOpPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.HeaderID, e.ProcessReference }, "IX_JobsStgOpHeader+Process")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence }, "IX_JobsStgOpHeader+Sequence")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_JobsStgOpHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.JobID, "IX_JobsStgOpJobID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubContVariance).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcSubContractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DelayHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelayMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.InProgress).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.JobID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupHrs).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourDescription).HasMaxLength(60);

                entity.Property(e => e.LabourHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LabourRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourReference).HasMaxLength(30);

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription).HasMaxLength(60);

                entity.Property(e => e.MachineHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineReference).HasMaxLength(30);

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.NumberPieces).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Overlap).HasDefaultValueSql("((0))");

                entity.Property(e => e.PieceWorkQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWorkRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyComplete).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RunTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.RunTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5To).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupStart).HasColumnType("datetime");

                entity.Property(e => e.SetupTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContLeadTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppJobRef)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SuppRef)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.JobOperations)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JobOperations_FK00");
            });

            modelBuilder.Entity<JobOtherExpense>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_JobsStgOthExpPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_JobsStgOthExpHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.JobID, "IX_JobsStgOthExpJobID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PINumber).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SupplierRef).HasMaxLength(10);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Type).HasMaxLength(2);

                entity.Property(e => e.TypeDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TypeReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UnitOfSale)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.JobOtherExpenses)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JobOtherExpenses_FK00");
            });

            modelBuilder.Entity<JobSalesInvoiceHeader>(entity =>
            {
                entity.HasKey(e => e.LinkID)
                    .HasName("IX_JobsSInvHdrPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("JobSalesInvoiceHeader");

                entity.HasIndex(e => e.AddressCountryID, "IX_JobSalesInvoiceHeader_AddressCountryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ContactSalutationID, "IX_JobSalesInvoiceHeader_ContactSalutationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DelAddressCountryID, "IX_JobSalesInvoiceHeader_DelAddressCountryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.JobID, "IX_JobSalesInvoiceHeader_JobID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ID, "IX_JobsSInvHdrID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvNumber, "IX_JobsSInvHdrInvNumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LinkID).ValueGeneratedNever();

                entity.Property(e => e.AccountName)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AccountRef)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AddressCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_1)
                    .HasMaxLength(60)
                    .HasColumnName("Address#1")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Address_2)
                    .HasMaxLength(60)
                    .HasColumnName("Address#2")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Address_3)
                    .HasMaxLength(60)
                    .HasColumnName("Address#3")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Address_4)
                    .HasMaxLength(60)
                    .HasColumnName("Address#4")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Address_5)
                    .HasMaxLength(60)
                    .HasColumnName("Address#5")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AmountPrePaid).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CarrDeptNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.CarrGross).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CarrNet).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CarrNomCode)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CarrTax).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CarrTaxCode).HasDefaultValueSql("((0))");

                entity.Property(e => e.ConsignmentRef)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(235)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Courier).HasDefaultValueSql("((0))");

                entity.Property(e => e.CustDiscRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CustOrdNumber)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CustTelNumber)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DelAddressCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddress_1)
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#1")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DelAddress_2)
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#2")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DelAddress_3)
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#3")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DelAddress_4)
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#4")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DelAddress_5)
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#5")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EuroGross).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EuroRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ForeignGross).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ForeignRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.GlobalDeptNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.GlobalDetails)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.GlobalNomCode)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.GlobalTaxCode).HasDefaultValueSql("((0))");

                entity.Property(e => e.GrossTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.InvDate).HasColumnType("datetime");

                entity.Property(e => e.InvNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvType).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemsNet).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ItemsTax).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.JobID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes_1)
                    .HasMaxLength(60)
                    .HasColumnName("Notes#1")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Notes_2)
                    .HasMaxLength(60)
                    .HasColumnName("Notes#2")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Notes_3)
                    .HasMaxLength(60)
                    .HasColumnName("Notes#3")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.OrderTakenBy)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PaymentRef)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PaymentType).HasDefaultValueSql("((0))");

                entity.Property(e => e.SettDiscPcnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SettDiscRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SettDueDays).HasDefaultValueSql("((0))");

                entity.Property(e => e.StageRef)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TelephoneAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TelephoneCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TelephonePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TelephoneSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.AddressCountry)
                    .WithMany(p => p.JobSalesInvoiceHeaderAddressCountries)
                    .HasForeignKey(d => d.AddressCountryID)
                    .HasConstraintName("FK_JobSalesInvoiceHeader_AddressCountryID");

                entity.HasOne(d => d.ContactSalutation)
                    .WithMany(p => p.JobSalesInvoiceHeaders)
                    .HasForeignKey(d => d.ContactSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobSalesInvoiceHeader_ContactSalutationID");

                entity.HasOne(d => d.DelAddressCountry)
                    .WithMany(p => p.JobSalesInvoiceHeaderDelAddressCountries)
                    .HasForeignKey(d => d.DelAddressCountryID)
                    .HasConstraintName("FK_JobSalesInvoiceHeader_DelAddressCountryID");

                entity.HasOne(d => d.Link)
                    .WithOne(p => p.JobSalesInvoiceHeader)
                    .HasForeignKey<JobSalesInvoiceHeader>(d => d.LinkID)
                    .HasConstraintName("JobSalesInvoiceHeader_FK00");
            });

            modelBuilder.Entity<JobSalesInvoiceItem>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_JobsSInvItmPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_JobsSInvItmHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DelDate).HasColumnType("datetime");

                entity.Property(e => e.DeptNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DiscAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DiscRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.FullNetAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobRef)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NominalCode)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RetnDate).HasColumnType("datetime");

                entity.Property(e => e.RetnDeptNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.RetnExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.RetnNomCode)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ServiceText)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TaxCode).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.JobSalesInvoiceItems)
                    .HasPrincipalKey(p => p.ID)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JobSalesInvoiceItems_FK00");
            });

            modelBuilder.Entity<JobStage>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_JobsStgPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.EstStageID, "IX_JobsStgEstStageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_JobsStgHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Reference }, "IX_JobsStgHeaderID+Ref")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ActualLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualNonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualOtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualTotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CompletedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditedTD).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstLabourProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstMachineProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstMaterialProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstNonStockProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstOHeadAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstOtherProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSetupProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstStageID).HasDefaultValueSql("((0))");

                entity.Property(e => e.EstSubProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstToolingProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstTotalProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimateNumber).HasMaxLength(30);

                entity.Property(e => e.EstimatedLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedNonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedOtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedTotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvoicedTD).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OSInvoice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PcntComplete).HasDefaultValueSql("((0))");

                entity.Property(e => e.Profit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyDelivered).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyInvoiced).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.SetupActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.SubActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.JobStages)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("JobStages_FK00");
            });

            modelBuilder.Entity<LabLabourResource>(entity =>
            {
                entity.ToTable("LabLabourResource");

                entity.HasIndex(e => e.LabLabourResourceGroupID, "IX_LabLabourResource_LabLabourResourceGroupID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_LabLabourResource_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LabLabourResourceID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key");

                entity.Property(e => e.CostRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Resource Description");

                entity.Property(e => e.EfficiencyPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MsmCostHeadingID).HasDefaultValueSql("((1))");

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nominal Cost Centre");

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nominal Department");

                entity.Property(e => e.NominalAccountID).HasComment("Primary Key for Nominal Account");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("Nominal Account Number");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OverheadNominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadNominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadRecoveryPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Overhead Recovery Percentage");

                entity.Property(e => e.PieceWorkQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Resource Reference");

                entity.HasOne(d => d.LabLabourResourceGroup)
                    .WithMany(p => p.LabLabourResources)
                    .HasForeignKey(d => d.LabLabourResourceGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LabLabourResource_LabLabourResourceGroup");

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.LabLabourResources)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LabLabourResource_MsmCostHeading");
            });

            modelBuilder.Entity<LabLabourResourceGroup>(entity =>
            {
                entity.ToTable("LabLabourResourceGroup");

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_LabLabourResourceGroup_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LabLabourResourceGroupID).ValueGeneratedNever();

                entity.Property(e => e.CostRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EfficiencyPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GroupReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MsmCostHeadingID).HasDefaultValueSql("((1))");

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nominal Cost Centre");

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nominal Department");

                entity.Property(e => e.NominalAccountID).HasComment("Primary Key for Nominal Account");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("Nominal Account Number");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OverheadNominalAccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadRecoveryPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Overhead Recovery Percentage");

                entity.Property(e => e.PieceWorkQuantity).HasColumnType("decimal(12, 5)");

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.LabLabourResourceGroups)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LabLabourResourceGroup_MsmCostHeading");
            });

            modelBuilder.Entity<Labour>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Labour");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.GroupReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.HourlyChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.NominalAccount).HasMaxLength(30);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OverheadRecoveryPercentage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);
            });

            modelBuilder.Entity<LandedCostsType>(entity =>
            {
                entity.ToTable("LandedCostsType");

                entity.Property(e => e.LandedCostsTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MFGAddress>(entity =>
            {
                entity.HasKey(e => e.MFGAddressID)
                    .IsClustered(false);

                entity.ToTable("MFGAddress");

                entity.HasIndex(e => e.SYSCountryCodeID, "IX_MFGAddress_SYSCountryCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SYSCountryCodeID).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<MFGAllocBalance>(entity =>
            {
                entity.ToTable("MFGAllocBalance");

                entity.HasIndex(e => e.AllocBalanceID, "IX_MFGAllocBalance_AllocBalanceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MfgAllocLineID, "IX_MFGAllocBalance_MfgAllocLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.HasOne(d => d.AllocBalance)
                    .WithMany(p => p.MFGAllocBalances)
                    .HasForeignKey(d => d.AllocBalanceID)
                    .HasConstraintName("FK_MFGAllocBalance_AllocationBalance");

                entity.HasOne(d => d.MfgAllocLine)
                    .WithMany(p => p.MFGAllocBalances)
                    .HasForeignKey(d => d.MfgAllocLineID)
                    .HasConstraintName("FK_MFGAllocBalance_MFGAllocationLine");
            });

            modelBuilder.Entity<MFGAllocation>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_MfgAllocationPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("MFGAllocation");

                entity.HasIndex(e => e.BuiltItemBin, "IX_MFGAllocation_BuiltItemBin")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.AllocationDescription).HasMaxLength(255);

                entity.Property(e => e.AllocationReference).HasMaxLength(30);

                entity.Property(e => e.BuiltItemQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BuiltItemStockCode).HasMaxLength(50);

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.HasOne(d => d.BuiltItemBinNavigation)
                    .WithMany(p => p.MFGAllocations)
                    .HasForeignKey(d => d.BuiltItemBin)
                    .HasConstraintName("FK_MFGAllocation_BinItem");
            });

            modelBuilder.Entity<MFGAllocationLine>(entity =>
            {
                entity.ToTable("MFGAllocationLine");

                entity.HasIndex(e => e.AllocID, "IX_MFGAllocationLine_AllocID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ParentAllocLineID, "IX_MFGAllocationLine_ParentAllocLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.HasOne(d => d.Alloc)
                    .WithMany(p => p.MFGAllocationLines)
                    .HasForeignKey(d => d.AllocID)
                    .HasConstraintName("FK_MFGAllocationLine_MFGAllocation");

                entity.HasOne(d => d.ParentAllocLine)
                    .WithMany(p => p.InverseParentAllocLine)
                    .HasForeignKey(d => d.ParentAllocLineID)
                    .HasConstraintName("FK_MFGAllocationLine_MFGAllocationLine");
            });

            modelBuilder.Entity<MFGComponentTraceability>(entity =>
            {
                entity.ToTable("MFGComponentTraceability");

                entity.HasIndex(e => e.ComponentTraceableItemID, "IX_MFGComponentTraceability_ComponentTraceableItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MFGTraceableBuiltItemID, "IX_MFGComponentTraceability_MFGTraceableBuiltItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGComponentTraceabilityID).ValueGeneratedNever();

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(50);

                entity.HasOne(d => d.ComponentTraceableItem)
                    .WithMany(p => p.MFGComponentTraceabilities)
                    .HasForeignKey(d => d.ComponentTraceableItemID)
                    .HasConstraintName("FK_MFGComponentTraceability_TraceableItem1");

                entity.HasOne(d => d.MFGTraceableBuiltItem)
                    .WithMany(p => p.MFGComponentTraceabilities)
                    .HasForeignKey(d => d.MFGTraceableBuiltItemID)
                    .HasConstraintName("FK_MFGComponentTraceability_MFGTraceableBuiltItem");
            });

            modelBuilder.Entity<MFGComponentWarehouse>(entity =>
            {
                entity.HasKey(e => e.MfgComponentWarehousesID);

                entity.Property(e => e.MfgComponentWarehousesID).ValueGeneratedNever();

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MFGContact>(entity =>
            {
                entity.HasKey(e => e.MFGContactID)
                    .IsClustered(false);

                entity.ToTable("MFGContact");

                entity.HasIndex(e => e.MFGContactRoleID, "IX_MFGContact_MFGContactRoleID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGContactID).ValueGeneratedNever();

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.JobTitle)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ContactSalutation)
                    .WithMany(p => p.MFGContacts)
                    .HasForeignKey(d => d.ContactSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGContact_ContactSalutationID");

                entity.HasOne(d => d.MFGContactRole)
                    .WithMany(p => p.MFGContacts)
                    .HasForeignKey(d => d.MFGContactRoleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGContact_MFGContactRole");
            });

            modelBuilder.Entity<MFGContactAddress>(entity =>
            {
                entity.ToTable("MFGContactAddress");

                entity.HasIndex(e => e.MFGAddressID, "IX_MFGContactAddress_MFGAddressID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MFGContactID, "IX_MFGContactAddress_MFGContactID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGContactAddressID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.MFGAddress)
                    .WithMany(p => p.MFGContactAddresses)
                    .HasForeignKey(d => d.MFGAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGContactAddress_MFGAddress");

                entity.HasOne(d => d.MFGContact)
                    .WithMany(p => p.MFGContactAddresses)
                    .HasForeignKey(d => d.MFGContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGContactAddress_MFGContact");
            });

            modelBuilder.Entity<MFGContactRole>(entity =>
            {
                entity.ToTable("MFGContactRole");

                entity.Property(e => e.MFGContactRoleID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MFGContactValue>(entity =>
            {
                entity.ToTable("MFGContactValue");

                entity.HasIndex(e => e.MFGContactID, "IX_MFGContactValue_MFGContactID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSContactTypeID, "IX_MFGContactValue_SYSContactTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGContactValueID).ValueGeneratedNever();

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValueAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ContactValueCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ContactValuePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ContactValueSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.MFGContact)
                    .WithMany(p => p.MFGContactValues)
                    .HasForeignKey(d => d.MFGContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGContactValue_MFGContact");

                entity.HasOne(d => d.SYSContactType)
                    .WithMany(p => p.MFGContactValues)
                    .HasForeignKey(d => d.SYSContactTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGContactAddress_SYSContactType");
            });

            modelBuilder.Entity<MFGCustomLayout>(entity =>
            {
                entity.ToTable("MFGCustomLayout");

                entity.Property(e => e.MfgCustomLayoutID).ValueGeneratedNever();

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ReportName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MFGIssue>(entity =>
            {
                entity.ToTable("MFGIssue");

                entity.HasIndex(e => e.BinItemID, "IX_MFGIssue_BinItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CreditNominalID, "IX_MFGIssue_CreditNominalID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DebitNominalID, "IX_MFGIssue_DebitNominalID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_MFGIssue_StockItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WorksOrderID, "IX_MFGIssue_WorksOrderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGIssueID).ValueGeneratedNever();

                entity.Property(e => e.CompletedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityIssued).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityScrapped).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BinItem)
                    .WithMany(p => p.MFGIssues)
                    .HasForeignKey(d => d.BinItemID)
                    .HasConstraintName("FK_MFGIssue_BinItem");

                entity.HasOne(d => d.CreditNominal)
                    .WithMany(p => p.MFGIssueCreditNominals)
                    .HasForeignKey(d => d.CreditNominalID)
                    .HasConstraintName("FK_MFGIssue_NLNominalAccount");

                entity.HasOne(d => d.DebitNominal)
                    .WithMany(p => p.MFGIssueDebitNominals)
                    .HasForeignKey(d => d.DebitNominalID)
                    .HasConstraintName("FK_MFGIssue_NLNominalAccount1");

                entity.HasOne(d => d.StockItem)
                    .WithMany(p => p.MFGIssues)
                    .HasForeignKey(d => d.StockItemID)
                    .HasConstraintName("FK_MFGIssue_StockItem");

                entity.HasOne(d => d.WorksOrder)
                    .WithMany(p => p.MFGIssues)
                    .HasForeignKey(d => d.WorksOrderID)
                    .HasConstraintName("FK_MFGIssue_WorksOrders");
            });

            modelBuilder.Entity<MFGIssueShortfall>(entity =>
            {
                entity.ToTable("MFGIssueShortfall");

                entity.HasIndex(e => e.MFGIssueID, "IX_MFGIssueShortfall_MFGIssueID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MovementBalanceID, "IX_MFGIssueShortfall_MovementBalanceID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGIssueShortfallID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IssuedCostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.MFGIssue)
                    .WithMany(p => p.MFGIssueShortfalls)
                    .HasForeignKey(d => d.MFGIssueID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGIssueShortfall_MFGIssue");

                entity.HasOne(d => d.MovementBalance)
                    .WithMany(p => p.MFGIssueShortfalls)
                    .HasForeignKey(d => d.MovementBalanceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGIssueShortfall_MovementBalance");
            });

            modelBuilder.Entity<MFGPOPOrderReturnLine>(entity =>
            {
                entity.HasKey(e => e.MFGPOPOrderReturnLine1);

                entity.ToTable("MFGPOPOrderReturnLine");

                entity.HasIndex(e => e.POPOrderReturnLineID, "IX_MFGPOPOrderReturnLine_POPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WorksOrderID, "IX_MFGPOPOrderReturnLine_WorksOrderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGPOPOrderReturnLine1)
                    .ValueGeneratedNever()
                    .HasColumnName("MFGPOPOrderReturnLine");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.POPOrderReturnLine)
                    .WithMany(p => p.MFGPOPOrderReturnLines)
                    .HasForeignKey(d => d.POPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGPOPOrderReturnLine_POPOrderReturnLine");

                entity.HasOne(d => d.WorksOrder)
                    .WithMany(p => p.MFGPOPOrderReturnLines)
                    .HasForeignKey(d => d.WorksOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGPOPOrderReturnLine_WorksOrders");
            });

            modelBuilder.Entity<MFGProductGroup>(entity =>
            {
                entity.ToTable("MFGProductGroup");

                entity.HasIndex(e => e.MFGContactID, "IX_MFGProductGroup_MFGContactID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProductGroupID, "IX_MFGProductGroup_ProductGroupID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGProductGroupID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UseDemandWarehouse)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseWOComponentWarehouse)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.MFGContact)
                    .WithMany(p => p.MFGProductGroups)
                    .HasForeignKey(d => d.MFGContactID)
                    .HasConstraintName("FK_MFGProductGroup_MFGContact");

                entity.HasOne(d => d.ProductGroup)
                    .WithMany(p => p.MFGProductGroups)
                    .HasForeignKey(d => d.ProductGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGProductGroup_ProductGroup");
            });

            modelBuilder.Entity<MFGRepTraceabilityEnquiry>(entity =>
            {
                entity.ToTable("MFGRepTraceabilityEnquiry");

                entity.Property(e => e.MFGRepTraceabilityEnquiryID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MFGSOPOrderReturnLine>(entity =>
            {
                entity.ToTable("MFGSOPOrderReturnLine");

                entity.HasIndex(e => e.SOPOrderReturnLineID, "IX_MFGSOPOrderReturnLine_SOPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGSOPOrderReturnLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SOPOrderReturnLine)
                    .WithMany(p => p.MFGSOPOrderReturnLines)
                    .HasForeignKey(d => d.SOPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGSOPOrderReturnLine_SOPOrderReturnLine");
            });

            modelBuilder.Entity<MFGSOPSetting>(entity =>
            {
                entity.ToTable("MFGSOPSetting");

                entity.Property(e => e.MFGSOPSettingID).ValueGeneratedNever();
            });

            modelBuilder.Entity<MFGScrapReasonCode>(entity =>
            {
                entity.HasKey(e => e.MfgScrapReasonCodesID)
                    .HasName("PK_MfgScrapReasonCodes");

                entity.Property(e => e.MfgScrapReasonCodesID).ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MFGSetting>(entity =>
            {
                entity.ToTable("MFGSetting");

                entity.Property(e => e.MFGSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MFGStockItem>(entity =>
            {
                entity.ToTable("MFGStockItem");

                entity.HasIndex(e => e.MFGContactID, "IX_MFGStockItem_MFGContactID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MRPReplenishmentRulesTypeID, "IX_MFGStockItem_MRPReplenishmentRulesTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_MFGStockItem_StockItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "UniqueStockItem")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGStockItemID).ValueGeneratedNever();

                entity.Property(e => e.ApplyReorderLevelAfterMaximum)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BuiltBoughtDefaultMake)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanAmendPOReceiptAllocation)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanCancelPurchaseOrders)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanCancelWorksOrders)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MRPReplenishmentMultipleValue).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UseDemandWarehouse)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseWOCompletionWarehouse)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WorksOrderBatchMaxQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.WorksOrderBatchMinQty).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.MFGContact)
                    .WithMany(p => p.MFGStockItems)
                    .HasForeignKey(d => d.MFGContactID)
                    .HasConstraintName("FK_MFGStockItem_MFGContact");

                entity.HasOne(d => d.MRPReplenishmentRulesType)
                    .WithMany(p => p.MFGStockItems)
                    .HasForeignKey(d => d.MRPReplenishmentRulesTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGStockItem_MRPReplenishmentRulesType");

                entity.HasOne(d => d.StockItem)
                    .WithOne(p => p.MFGStockItem)
                    .HasForeignKey<MFGStockItem>(d => d.StockItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGStockItem_StockItem");
            });

            modelBuilder.Entity<MFGSubstituteTraceableAudit>(entity =>
            {
                entity.ToTable("MFGSubstituteTraceableAudit");

                entity.Property(e => e.MFGSubstituteTraceableAuditID).ValueGeneratedNever();

                entity.Property(e => e.DestinationFinishedItemTraceableIdentificationNo).HasMaxLength(30);

                entity.Property(e => e.DestinationWorksOrder).HasMaxLength(30);

                entity.Property(e => e.FinishedItemTraceableIdentificationNo).HasMaxLength(30);

                entity.Property(e => e.InComponentFromWorksOrderAssemblyIdNo).HasMaxLength(30);

                entity.Property(e => e.InComponentFromWorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.InComponentIdentificationNo).HasMaxLength(30);

                entity.Property(e => e.InComponentQty)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InComponentStockCode).HasMaxLength(30);

                entity.Property(e => e.LoggedOnUser).HasMaxLength(30);

                entity.Property(e => e.OutComponentQty)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OutComponentStockCode).HasMaxLength(30);

                entity.Property(e => e.OutComponentTraceableIdentificationNo).HasMaxLength(30);

                entity.Property(e => e.PerformedOn).HasColumnType("datetime");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<MFGSubstituteTraceableAuditType>(entity =>
            {
                entity.HasKey(e => e.MfgSubstituteTreacebleAuditTypeID);

                entity.ToTable("MFGSubstituteTraceableAuditType");

                entity.Property(e => e.MfgSubstituteTreacebleAuditTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(30);
            });

            modelBuilder.Entity<MFGTempDebugLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MFGTempDebugLog");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.DateLogged).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.ID)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IssuesNominal).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<MFGTraceableBuiltItem>(entity =>
            {
                entity.ToTable("MFGTraceableBuiltItem");

                entity.HasIndex(e => e.MFGWOCompletionID, "IX_MFGTraceableBuiltItem_MFGWOCompletionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableItemID, "IX_MFGTraceableBuiltItem_TraceableItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGTraceableBuiltItemID).ValueGeneratedNever();

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.MFGWOCompletion)
                    .WithMany(p => p.MFGTraceableBuiltItems)
                    .HasForeignKey(d => d.MFGWOCompletionID)
                    .HasConstraintName("FK_MFGBuiltTraceableItem_MFGWoCompletion");

                entity.HasOne(d => d.TraceableItem)
                    .WithMany(p => p.MFGTraceableBuiltItems)
                    .HasForeignKey(d => d.TraceableItemID)
                    .HasConstraintName("FK_MFGBuiltTraceableItem_TraceableItem");
            });

            modelBuilder.Entity<MFGTraceableIssue>(entity =>
            {
                entity.ToTable("MFGTraceableIssue");

                entity.HasIndex(e => e.MFGIssueID, "IX_MFGTraceableIssue_MFGIssueID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableBinItemID, "IX_MFGTraceableIssue_TraceableBinItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGTraceableIssueID).ValueGeneratedNever();

                entity.Property(e => e.CompletedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityScrapped).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.MFGIssue)
                    .WithMany(p => p.MFGTraceableIssues)
                    .HasForeignKey(d => d.MFGIssueID)
                    .HasConstraintName("FK_MFGTraceableIssue_MFGIssue");

                entity.HasOne(d => d.TraceableBinItem)
                    .WithMany(p => p.MFGTraceableIssues)
                    .HasForeignKey(d => d.TraceableBinItemID)
                    .HasConstraintName("FK_MFGTraceableIssue_TraceableBinItem");
            });

            modelBuilder.Entity<MFGWOCompletedPOLink>(entity =>
            {
                entity.ToTable("MFGWOCompletedPOLink");

                entity.Property(e => e.ID).ValueGeneratedNever();
            });

            modelBuilder.Entity<MFGWarehouse>(entity =>
            {
                entity.ToTable("MFGWarehouse");

                entity.HasIndex(e => e.MFGContactID, "IX_MFGWarehouse_MFGContactID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_MFGWarehouse_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MFGWarehouseID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsComponentSource)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.MFGContact)
                    .WithMany(p => p.MFGWarehouses)
                    .HasForeignKey(d => d.MFGContactID)
                    .HasConstraintName("FK_MFGWarehouse_MFGContact");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.MFGWarehouses)
                    .HasForeignKey(d => d.WarehouseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MFGWarehouse_Warehouse");
            });

            modelBuilder.Entity<MFGWarehouseItem>(entity =>
            {
                entity.ToTable("MFGWarehouseItem");

                entity.Property(e => e.MFGWarehouseItemID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MFGWoCompletion>(entity =>
            {
                entity.ToTable("MFGWoCompletion");

                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MRPReplenishmentRulesType>(entity =>
            {
                entity.ToTable("MRPReplenishmentRulesType");

                entity.Property(e => e.MRPReplenishmentRulesTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MachMachineResource>(entity =>
            {
                entity.HasKey(e => e.MachMachineResourceID)
                    .IsClustered(false);

                entity.ToTable("MachMachineResource");

                entity.HasIndex(e => e.MachMachineResourceGroupID, "IX_MachMachineResource_MachMachineResourceGroupID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_MachMachineResource_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MachMachineResourceID).ValueGeneratedNever();

                entity.Property(e => e.AssetSerialNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CostRate)
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cost Rate");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Dimensions)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EfficiencyPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("Nominal Cost Centre");

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("Nominal Department");

                entity.Property(e => e.NominalAccountID).HasComment("Primary Key for Nominal Account");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("Nominal Account Number");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OriginalCertificate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadNominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadRecoveryPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Overhead Recovery Percentage");

                entity.Property(e => e.Range)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SourceCalibration)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CalibrationIntervalPeriod)
                    .WithMany(p => p.MachMachineResourceCalibrationIntervalPeriods)
                    .HasForeignKey(d => d.CalibrationIntervalPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MachMachineResource_MsmPeriodFrequency1");

                entity.HasOne(d => d.MachMachineResourceGroup)
                    .WithMany(p => p.MachMachineResources)
                    .HasForeignKey(d => d.MachMachineResourceGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MachMachineResource_MachMachineResourceGroup");

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.MachMachineResources)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MachMachineResource_MsmCostHeading");

                entity.HasOne(d => d.ServiceIntervalPeriod)
                    .WithMany(p => p.MachMachineResourceServiceIntervalPeriods)
                    .HasForeignKey(d => d.ServiceIntervalPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MachMachineResource_MsmPeriodFrequency");
            });

            modelBuilder.Entity<MachMachineResourceActivity>(entity =>
            {
                entity.ToTable("MachMachineResourceActivity");

                entity.HasIndex(e => e.MachMachineResourceID, "IX_MachMachineResourceActivity_MachMachineResourceID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MachMachineResourceActivityID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NextActivityDate).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.Reference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Result)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ThisActivityDate).HasColumnType("datetime");

                entity.HasOne(d => d.MachMachineResourceActivityType)
                    .WithMany(p => p.MachMachineResourceActivities)
                    .HasForeignKey(d => d.MachMachineResourceActivityTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MachMachineResource_MachMachineResourceActivityType");

                entity.HasOne(d => d.MachMachineResource)
                    .WithMany(p => p.MachMachineResourceActivities)
                    .HasForeignKey(d => d.MachMachineResourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MachMachineResourceActivity_MachMachineResource");
            });

            modelBuilder.Entity<MachMachineResourceActivityType>(entity =>
            {
                entity.ToTable("MachMachineResourceActivityType");

                entity.Property(e => e.MachMachineResourceActivityTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MachMachineResourceGroup>(entity =>
            {
                entity.ToTable("MachMachineResourceGroup");

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_MachMachineResourceGroup_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MachMachineResourceGroupID).ValueGeneratedNever();

                entity.Property(e => e.CostRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EfficiencyPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GroupReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("Nominal Cost Centre");

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("Nominal Department");

                entity.Property(e => e.NominalAccountID).HasComment("Primary Key for Nominal Account");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("Nominal Account Number");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OverheadNominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadRecoveryPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Overhead Recovery Percentage");

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.MachMachineResourceGroups)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MachMachineResourceGroup_MsmCostHeading");
            });

            modelBuilder.Entity<Machine>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_MachinesPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.Reference, "IX_MachinesReference")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DefHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.DefMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Dimensions).HasColumnType("ntext");

                entity.Property(e => e.FriEnd).HasColumnType("datetime");

                entity.Property(e => e.FriHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.FriMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.FriStart).HasColumnType("datetime");

                entity.Property(e => e.FullServiceHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.GroupReference).HasMaxLength(30);

                entity.Property(e => e.HourlyChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Location).HasColumnType("ntext");

                entity.Property(e => e.MonEnd).HasColumnType("datetime");

                entity.Property(e => e.MonHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.MonMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.MonStart).HasColumnType("datetime");

                entity.Property(e => e.NominalAccount)
                    .HasMaxLength(30)
                    .IsFixedLength(true);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OrdinaryServiceHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.OriginalCert).HasColumnType("ntext");

                entity.Property(e => e.OverheadAllocation).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProductionContinues)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Range).HasColumnType("ntext");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SatEnd).HasColumnType("datetime");

                entity.Property(e => e.SatHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SatMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.SatStart).HasColumnType("datetime");

                entity.Property(e => e.SerialNumber).HasColumnType("ntext");

                entity.Property(e => e.SourceCalibration).HasColumnType("ntext");

                entity.Property(e => e.SunEnd).HasColumnType("datetime");

                entity.Property(e => e.SunHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SunMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.SunStart).HasColumnType("datetime");

                entity.Property(e => e.ThurEnd).HasColumnType("datetime");

                entity.Property(e => e.ThurHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.ThurMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.ThurStart).HasColumnType("datetime");

                entity.Property(e => e.TueEnd).HasColumnType("datetime");

                entity.Property(e => e.TueHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.TueMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.TueStart).HasColumnType("datetime");

                entity.Property(e => e.Type).HasColumnType("ntext");

                entity.Property(e => e.WedEnd).HasColumnType("datetime");

                entity.Property(e => e.WedHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.WedMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.WedStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<MachinesCalibrationHistory>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_CalibHistoryPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("MachinesCalibrationHistory");

                entity.HasIndex(e => e.HeaderID, "IX_CalibHistoryHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastCalibration).HasColumnType("datetime");

                entity.Property(e => e.NextCalibration).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Repairs).HasColumnType("ntext");

                entity.Property(e => e.Result).HasColumnType("ntext");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.MachinesCalibrationHistories)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("MachinesCalibrationHistory_FK00");
            });

            modelBuilder.Entity<MfgBomAllocHierarchy>(entity =>
            {
                entity.ToTable("MfgBomAllocHierarchy");

                entity.HasIndex(e => e.BuiltItemID, "IX_MfgBomAllocHierarchy_BuiltItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MFGAllocID, "IX_MfgBomAllocHierarchy_MFGAllocID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.BuildRequirement).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockCode).HasMaxLength(50);

                entity.Property(e => e.StockRequirement).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.BuiltItem)
                    .WithMany(p => p.InverseBuiltItem)
                    .HasForeignKey(d => d.BuiltItemID)
                    .HasConstraintName("FK_MfgBomAllocHierarchy_MfgBomAllocHierarchy");

                entity.HasOne(d => d.MFGAlloc)
                    .WithMany(p => p.MfgBomAllocHierarchies)
                    .HasForeignKey(d => d.MFGAllocID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MfgBomAllocHierarchy_MFGAllocation");
            });

            modelBuilder.Entity<ModeOfTransport>(entity =>
            {
                entity.ToTable("ModeOfTransport");

                entity.HasIndex(e => e.CountryCodeID, "IX_ModeOfTransport_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ModeOfTransportID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.ModeOfTransports)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_ModeOfTransport_SYSCountryCode");
            });

            modelBuilder.Entity<MovementBalance>(entity =>
            {
                entity.HasKey(e => e.MovementID);

                entity.ToTable("MovementBalance");

                entity.HasIndex(e => e.BinItemID, "IX_MovementBalance_BinItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ItemID, "IX_MovementBalance_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MovementBalanceTypeID, "IX_MovementBalance_MovementBalanceTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceAreaTypeID, "IX_MovementBalance_SourceAreaTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MovementID).ValueGeneratedNever();

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MovementDate).HasColumnType("datetime");

                entity.Property(e => e.MovementReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OpeningStockLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SecondReference)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceAreaName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SourceAreaReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.StockLevelIssued).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitLandedCosts).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.BinItem)
                    .WithMany(p => p.MovementBalances)
                    .HasForeignKey(d => d.BinItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MovementBalance_BinItem");

                entity.HasOne(d => d.EntrySource)
                    .WithMany(p => p.MovementBalances)
                    .HasForeignKey(d => d.EntrySourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MovementBalance_EntrySource");

                entity.HasOne(d => d.MovementBalanceType)
                    .WithMany(p => p.MovementBalances)
                    .HasForeignKey(d => d.MovementBalanceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MovementBalance_MovementBalanceType");

                entity.HasOne(d => d.SourceAreaType)
                    .WithMany(p => p.MovementBalances)
                    .HasForeignKey(d => d.SourceAreaTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MovementBalance_SourceAreaType");
            });

            modelBuilder.Entity<MovementBalanceType>(entity =>
            {
                entity.ToTable("MovementBalanceType");

                entity.Property(e => e.MovementBalanceTypeID).ValueGeneratedNever();

                entity.Property(e => e.MovementBalanceTypeName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MseAddress>(entity =>
            {
                entity.HasKey(e => e.MseAddressID)
                    .IsClustered(false);

                entity.ToTable("MseAddress");

                entity.HasIndex(e => e.SYSCountryCodeID, "IX_MseAddress_SYSCountryCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MseAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MseContact>(entity =>
            {
                entity.HasKey(e => e.MseContactID)
                    .IsClustered(false);

                entity.ToTable("MseContact");

                entity.Property(e => e.MseContactID).ValueGeneratedNever();

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.JobTitle)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MseContactRoleID).HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.MseContactRole)
                    .WithMany(p => p.MseContacts)
                    .HasForeignKey(d => d.MseContactRoleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MseContact_MseContactRole");
            });

            modelBuilder.Entity<MseContactAddress>(entity =>
            {
                entity.HasKey(e => e.MseContactAddressID)
                    .IsClustered(false);

                entity.ToTable("MseContactAddress");

                entity.HasIndex(e => e.MseAddressID, "IX_MseContactAddress_MseAddressID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MseContactID, "IX_MseContactAddress_MseContactID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MseContactAddressID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.MseAddress)
                    .WithMany(p => p.MseContactAddresses)
                    .HasForeignKey(d => d.MseAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MseContactAddress_MseAddress");

                entity.HasOne(d => d.MseContact)
                    .WithMany(p => p.MseContactAddresses)
                    .HasForeignKey(d => d.MseContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MseContactAddress_MseContact");
            });

            modelBuilder.Entity<MseContactRole>(entity =>
            {
                entity.HasKey(e => e.MseContactRoleID)
                    .IsClustered(false);

                entity.ToTable("MseContactRole");

                entity.Property(e => e.MseContactRoleID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MseContactValue>(entity =>
            {
                entity.ToTable("MseContactValue");

                entity.HasIndex(e => e.MseContactID, "IX_MseContactValue_MseContactID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSContactTypeID, "IX_MseContactValue_SYSContactTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MseContactValueID).ValueGeneratedNever();

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValueAreaCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValueCountryCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValueSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.MseContact)
                    .WithMany(p => p.MseContactValues)
                    .HasForeignKey(d => d.MseContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MseContactValue_MseContact");
            });

            modelBuilder.Entity<MseProductGroup>(entity =>
            {
                entity.ToTable("MseProductGroup");

                entity.HasIndex(e => e.MseContactID, "IX_MseProductGroup_MseContactID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_MseProductGroup_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProductGroupID, "IX_MseProductGroup_ProductGroupID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MseProductGroupID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MsmCostHeadingID).HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UseDemandWarehouse)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseWOComponentWarehouse)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.MseContact)
                    .WithMany(p => p.MseProductGroups)
                    .HasForeignKey(d => d.MseContactID)
                    .HasConstraintName("FK_MseProductGroup_MseContact");

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.MseProductGroups)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MseProductGroup_MsmCostHeading");
            });

            modelBuilder.Entity<MseStockItem>(entity =>
            {
                entity.ToTable("MseStockItem");

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_MseStockItem_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockCode, "IX_MseStockItem_StockCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MseStockItemID).ValueGeneratedNever();

                entity.Property(e => e.AdditionalDescription1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AdditionalDescription2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BoughtInDesc)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BoughtInUnit).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BuyerCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MRPReplenishmentMultipleValue).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MaximumBatchSize).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.MaximumStockLevel).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.MsmCostHeadingID).HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OrderMultiple).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OrderingMethod).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ProcessDesc)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessUnit).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ScrapPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StdCost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WorksOrderBatchMaxQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.WorksOrderBatchMinQty).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.MseContact)
                    .WithMany(p => p.MseStockItems)
                    .HasForeignKey(d => d.MseContactID)
                    .HasConstraintName("FK_MseStockItem_MseContact");

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.MseStockItems)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MseStockItem_MsmCostHeading");
            });

            modelBuilder.Entity<MseWarehouse>(entity =>
            {
                entity.ToTable("MseWarehouse");

                entity.Property(e => e.MseWarehouseID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.MseContact)
                    .WithMany(p => p.MseWarehouses)
                    .HasForeignKey(d => d.MseContactID)
                    .HasConstraintName("FK_MseWarehouse_MseContact");
            });

            modelBuilder.Entity<MseWarehouseItem>(entity =>
            {
                entity.ToTable("MseWarehouseItem");

                entity.Property(e => e.MseWarehouseItemID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MsmCostHeading>(entity =>
            {
                entity.ToTable("MsmCostHeading");

                entity.HasIndex(e => e.MsmCostHeadingTypeID, "IX_MsmCostHeading_MsmCostHeadingTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MsmCostHeadingID)
                    .ValueGeneratedNever()
                    .HasComment("Cost Heading Primary Key");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Markup)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MsmCostHeadingTypeID).HasDefaultValueSql("((999))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Cost Heading Name");

                entity.Property(e => e.NominalAccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("Nominal Cost Centre");

                entity.Property(e => e.NominalAccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("Nominal Department");

                entity.Property(e => e.NominalAccountID).HasComment("Primary Key for Nominal Account");

                entity.Property(e => e.NominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("Nominal Account Number");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OverheadNominalAccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadRecoveryPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Overhead Recovery Percentage");

                entity.HasOne(d => d.MsmCostHeadingType)
                    .WithMany(p => p.MsmCostHeadings)
                    .HasForeignKey(d => d.MsmCostHeadingTypeID)
                    .HasConstraintName("FK_MsmCostHeading_MsmCostHeadingType");
            });

            modelBuilder.Entity<MsmCostHeadingType>(entity =>
            {
                entity.ToTable("MsmCostHeadingType");

                entity.Property(e => e.MsmCostHeadingTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MsmDateRollOnExclusion>(entity =>
            {
                entity.ToTable("MsmDateRollOnExclusion");

                entity.Property(e => e.MsmDateRollOnExclusionID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Reason for Exclusion");

                entity.Property(e => e.ExcludeColumnName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Column Name to exclude.  If a Column Name is specIFied AND the Table Name is left blank, then all columns with this name in all tables will be excluded.");

                entity.Property(e => e.ExcludeTableName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Table Name to Exclude.  If a Table Name is specIFied AND the Column Name is left blank, then all columns in the table will be excluded.");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");
            });

            modelBuilder.Entity<MsmDateRollOnSetting>(entity =>
            {
                entity.ToTable("MsmDateRollOnSetting");

                entity.Property(e => e.MsmDateRollOnSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewDate)
                    .HasColumnType("datetime")
                    .HasComment("The date to use to calculate the amount of roll on");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OriginalDate)
                    .HasColumnType("datetime")
                    .HasComment("The pivot date to use when calculating roll on");
            });

            modelBuilder.Entity<MsmDesktopElement>(entity =>
            {
                entity.ToTable("MsmDesktopElement");

                entity.HasIndex(e => e.ElementTypeID, "IX_MsmDesktopElement_ElementTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.FormTypeID, "IX_MsmDesktopElement_FormTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceTypeID, "IX_MsmDesktopElement_SourceTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MsmDesktopElementID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ElementTypeID)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Element Type");

                entity.Property(e => e.EmbeddedImage)
                    .HasColumnType("text")
                    .HasComment("The image to use");

                entity.Property(e => e.EmbeddedLargeImage).HasColumnType("text");

                entity.Property(e => e.Form)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("What form should be launched");

                entity.Property(e => e.FormTypeID).HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.Parameter)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ParentElement).HasComment("The parent item");

                entity.Property(e => e.Sequence).HasComment("Sequence used for display");

                entity.Property(e => e.SourceTypeID)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Source Type");

                entity.Property(e => e.Title)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Title used on display");

                entity.Property(e => e.ToolTip).HasColumnType("text");

                entity.HasOne(d => d.ElementType)
                    .WithMany(p => p.MsmDesktopElements)
                    .HasForeignKey(d => d.ElementTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MsmDesktopElement_MsmDesktopElementType");

                entity.HasOne(d => d.FormType)
                    .WithMany(p => p.MsmDesktopElements)
                    .HasForeignKey(d => d.FormTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MsmDesktopElement_MsmDesktopElementFormType");

                entity.HasOne(d => d.SourceType)
                    .WithMany(p => p.MsmDesktopElements)
                    .HasForeignKey(d => d.SourceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MsmDesktopElement_MsmDesktopElementSourceType");
            });

            modelBuilder.Entity<MsmDesktopElementFormType>(entity =>
            {
                entity.ToTable("MsmDesktopElementFormType");

                entity.Property(e => e.MsmDesktopElementFormTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MsmDesktopElementSourceType>(entity =>
            {
                entity.ToTable("MsmDesktopElementSourceType");

                entity.Property(e => e.MsmDesktopElementSourceTypeID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Source Description");
            });

            modelBuilder.Entity<MsmDesktopElementType>(entity =>
            {
                entity.ToTable("MsmDesktopElementType");

                entity.Property(e => e.MsmDesktopElementTypeID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Element Type.  e.g. Toolbar Item, Menu Item etc.");
            });

            modelBuilder.Entity<MsmFeature>(entity =>
            {
                entity.ToTable("MsmFeature");

                entity.Property(e => e.MsmFeatureID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FormName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Actual forn name");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Sequence)
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("The ordinal position in which this feature will be displayed.");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Meaningful form/module name for display purposes");
            });

            modelBuilder.Entity<MsmPeriodFrequency>(entity =>
            {
                entity.ToTable("MsmPeriodFrequency");

                entity.Property(e => e.MsmPeriodFrequencyID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MsmQuantityCalculatorOperatorType>(entity =>
            {
                entity.ToTable("MsmQuantityCalculatorOperatorType");

                entity.Property(e => e.MsmQuantityCalculatorOperatorTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MsmQuantityCalculatorSetting>(entity =>
            {
                entity.ToTable("MsmQuantityCalculatorSetting");

                entity.Property(e => e.MsmQuantityCalculatorSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Label1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Label2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Label3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Label4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Label5)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LabelInput)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Value1).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Value2).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Value3).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Value4).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Value5).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<MsmReplacementReport>(entity =>
            {
                entity.ToTable("MsmReplacementReport");

                entity.Property(e => e.MsmReplacementReportID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewReport)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OriginalReport)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MsmResourceTimeUnit>(entity =>
            {
                entity.ToTable("MsmResourceTimeUnit");

                entity.HasIndex(e => e.ItemID, "IX_MsmResourceTimeUnit_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MsmTimeUnitID, "IX_MsmResourceTimeUnit_MsmTimeUnitID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MsmResourceTimeUnitID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemID).HasComment("The DB Key of the Resource (Labour, Machine etc) that this time unit applies to.");

                entity.Property(e => e.Minutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.MsmTimeUnitID).HasComment("The DB Key of the Time Unit.");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.Seconds).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.MsmTimeUnit)
                    .WithMany(p => p.MsmResourceTimeUnits)
                    .HasForeignKey(d => d.MsmTimeUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MsmResourceTimeUnit_MsmTimeUnit");
            });

            modelBuilder.Entity<MsmSearchCondition>(entity =>
            {
                entity.ToTable("MsmSearchCondition");

                entity.Property(e => e.MsmSearchConditionID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("The name of the condition.");
            });

            modelBuilder.Entity<MsmSearchHeader>(entity =>
            {
                entity.ToTable("MsmSearchHeader");

                entity.Property(e => e.MsmSearchHeaderID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required by ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FormName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("The unqualIFied name of the form this search will be displayed on.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("The name of the search.");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required by ObjectStore");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("The name of the user this search is visible to.  Leave blank to make the search visible to all users.");
            });

            modelBuilder.Entity<MsmSearchJoinType>(entity =>
            {
                entity.ToTable("MsmSearchJoinType");

                entity.Property(e => e.MsmSearchJoinTypeID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("The name of the join");
            });

            modelBuilder.Entity<MsmSearchLine>(entity =>
            {
                entity.ToTable("MsmSearchLine");

                entity.HasIndex(e => e.MsmSearchConditionID, "IX_MsmSearchLine_MsmSearchConditionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MsmSearchHeaderID, "IX_MsmSearchLine_MsmSearchHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MsmSearchJoinTypeID, "IX_MsmSearchLine_MsmSearchJoinTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MsmSearchLineID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("GetDate()");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("The field name to apply the search to.");

                entity.Property(e => e.MsmSearchConditionID).HasComment("The primary key of the MsmSearchCondition row.");

                entity.Property(e => e.MsmSearchHeaderID).HasComment("The primary key of the MsmSearchHeader row.");

                entity.Property(e => e.MsmSearchJoinTypeID).HasComment("The primary key of the MsmSearchJoinType row.");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required by ObjectStore");

                entity.Property(e => e.SearchValue)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("The value to search for.");

                entity.HasOne(d => d.MsmSearchCondition)
                    .WithMany(p => p.MsmSearchLines)
                    .HasForeignKey(d => d.MsmSearchConditionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MsmSearchLine_MsmSearchCondition");

                entity.HasOne(d => d.MsmSearchHeader)
                    .WithMany(p => p.MsmSearchLines)
                    .HasForeignKey(d => d.MsmSearchHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MsmSearchLine_MsmSearchHeader");

                entity.HasOne(d => d.MsmSearchJoinType)
                    .WithMany(p => p.MsmSearchLines)
                    .HasForeignKey(d => d.MsmSearchJoinTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MsmSearchLine_MsmSearchJoinType");
            });

            modelBuilder.Entity<MsmSetting>(entity =>
            {
                entity.ToTable("MsmSetting");

                entity.Property(e => e.MsmSettingID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("GetDate()");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FeatureAreaLoggingActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Is Feature Area Logging enabled?");

                entity.Property(e => e.LabelEditorActive).HasComment("Is the Label Editor active?  If it is, labels can be customised.");

                entity.Property(e => e.LabelEditorUseCustomisedValues).HasComment("Should customised values be displayed?");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required by ObjectStore");

                entity.Property(e => e.PerformCompatibilityCheck)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RefreshDesktopLists).HasComment("Should the desktop lists be refreshed automatically by other dialogs?");

                entity.Property(e => e.SequenceDecimalPlaces).HasDefaultValueSql("((2))");

                entity.Property(e => e.ShowIndependentDialogFooterButtons)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Should the footer buttons be visible on independent dialogs?");

                entity.Property(e => e.ShowIndependentDialogToolbar).HasComment("Should the toolbar be visible on independent dialogs?");

                entity.Property(e => e.UsageLogActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))")
                    .HasComment("Is the Usage Log being updated?");

                entity.Property(e => e.VersionBuild).HasComment("Build Number");

                entity.Property(e => e.VersionMajor).HasComment("Major Version Number");

                entity.Property(e => e.VersionMinor).HasComment("Minor Version Number");

                entity.Property(e => e.VersionRevision).HasComment("Revision Number");
            });

            modelBuilder.Entity<MsmSmartLink>(entity =>
            {
                entity.ToTable("MsmSmartLink");

                entity.Property(e => e.MsmSmartLinkID).ValueGeneratedNever();

                entity.Property(e => e.FormName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MsmTimeUnit>(entity =>
            {
                entity.ToTable("MsmTimeUnit");

                entity.Property(e => e.MsmTimeUnitID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.Minutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.Seconds).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<MsmUser>(entity =>
            {
                entity.ToTable("MsmUser");

                entity.Property(e => e.MsmUserID)
                    .ValueGeneratedNever()
                    .HasComment("Primary Key");

                entity.Property(e => e.AccountsUserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Accounts user name that the UserName is mapped to. This allows unIForm login entry details");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Creation date/time");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Optimistic locking setting for tables that are updated by ObjectStore");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Manufacturing user name");
            });

            modelBuilder.Entity<MsmUserColourSetting>(entity =>
            {
                entity.ToTable("MsmUserColourSetting");

                entity.HasIndex(e => e.UserName, "IX_MsmUserColourSetting_UserName")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.MsmUserColourSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MsmUserFeature>(entity =>
            {
                entity.ToTable("MsmUserFeature");

                entity.Property(e => e.MsmUserFeatureID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Creation date/time");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FeatureID).HasComment("MsmFeature table primary key");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Optimistic locking setting for tables that are updated by ObjectStore");

                entity.Property(e => e.UserID).HasComment("MsmUser table primary key");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.MsmUserFeatures)
                    .HasForeignKey(d => d.FeatureID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MsmUserFeature_FeatureID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MsmUserFeatures)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MsmUserFeature_UserID");
            });

            modelBuilder.Entity<MsmUserSetting>(entity =>
            {
                entity.ToTable("MsmUserSetting");

                entity.Property(e => e.MsmUserSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("GetDate()");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required by ObjectStore");

                entity.Property(e => e.ShowImageThumbnails)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MsmVersionControlStatus>(entity =>
            {
                entity.ToTable("MsmVersionControlStatus");

                entity.Property(e => e.MsmVersionControlStatusID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");
            });

            modelBuilder.Entity<NLAccountMemo>(entity =>
            {
                entity.HasKey(e => e.NLAccountMemoID)
                    .IsClustered(false);

                entity.ToTable("NLAccountMemo");

                entity.HasIndex(e => e.NLNominalAccountID, "IX_NLAccountMemo_NLNominalAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLAccountMemoID).ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MemoCreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MemoText)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TimeAndDateMemoCreated).HasColumnType("datetime");

                entity.Property(e => e.TimeAndDateMemoLastUpdated).HasColumnType("datetime");

                entity.HasOne(d => d.NLNominalAccount)
                    .WithMany(p => p.NLAccountMemos)
                    .HasForeignKey(d => d.NLNominalAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLAccountMemo_NLNominalAccount");
            });

            modelBuilder.Entity<NLAccountNumber>(entity =>
            {
                entity.HasKey(e => e.NLAccountNumberID)
                    .HasName("PK_NLNominalAccountNumber")
                    .IsClustered(false);

                entity.ToTable("NLAccountNumber");

                entity.HasIndex(e => e.AccountNumber, "IX_NLAccountNumber_AccountNumber")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLAccountNumberID).ValueGeneratedNever();

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLAccountNumberCostCentre>(entity =>
            {
                entity.ToTable("NLAccountNumberCostCentre");

                entity.HasIndex(e => e.NLAccountNumberID, "IX_NLAccountNumberCostCentre_NLAccountNumberID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLCostCentreID, "IX_NLAccountNumberCostCentre_NLCostCentreID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLAccountNumberCostCentreID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLAccountNumber)
                    .WithMany(p => p.NLAccountNumberCostCentres)
                    .HasForeignKey(d => d.NLAccountNumberID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLAccountNumberCostCentre_NLAccountNumber");

                entity.HasOne(d => d.NLCostCentre)
                    .WithMany(p => p.NLAccountNumberCostCentres)
                    .HasForeignKey(d => d.NLCostCentreID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLAccountNumberCostCentre_NLCostCentre");
            });

            modelBuilder.Entity<NLAccountPeriodBalanceVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NLAccountPeriodBalanceVw");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ActualValue).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<NLAccountPeriodValue>(entity =>
            {
                entity.HasKey(e => e.NLAccountPeriodValueID)
                    .HasName("PK_NLBudgetPeriod")
                    .IsClustered(false);

                entity.ToTable("NLAccountPeriodValue");

                entity.HasIndex(e => new { e.NLNominalAccountID, e.SYSAccountingPeriodID }, "IX_NLAccountPeriodValue_AccountBalances");

                entity.HasIndex(e => e.NLAccountYearValueID, "IX_NLAccountPeriodValue_NLAccountYearValueID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLNominalAccountID, "IX_NLAccountPeriodValue_NLNominalAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSAccountingPeriodID, "IX_NLAccountPeriodValue_SYSAccountingPeriodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SYSAccountingPeriodID, e.ActualValue }, "IX_NLAccountPeriodValue_SYSAccountingPeriodID_AdjustPeriodEnd")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLAccountPeriodValueID).ValueGeneratedNever();

                entity.Property(e => e.ActualValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AdjustmentAfterYearEndClose).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ConsolidatedAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OriginalBudgetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PercentageOfAnnualBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.NLAccountYearValue)
                    .WithMany(p => p.NLAccountPeriodValues)
                    .HasForeignKey(d => d.NLAccountYearValueID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLAccountPeriodValue_NLAccountYearValue");

                entity.HasOne(d => d.NLNominalAccount)
                    .WithMany(p => p.NLAccountPeriodValues)
                    .HasForeignKey(d => d.NLNominalAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLAccountPeriodValue_NLNominalAccount");

                entity.HasOne(d => d.SYSAccountingPeriod)
                    .WithMany(p => p.NLAccountPeriodValues)
                    .HasForeignKey(d => d.SYSAccountingPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLAccountPeriodValue_SYSAccountingPeriod");
            });

            modelBuilder.Entity<NLAccountReportCategory>(entity =>
            {
                entity.HasKey(e => e.NLAccountReportCategoryID)
                    .IsClustered(false);

                entity.ToTable("NLAccountReportCategory");

                entity.HasIndex(e => e.Code, "IX_NLAccountReportCategory_Code")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLAccountReportTypeID, "IX_NLAccountReportCategory_NLAccountReportTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLAccountReportCategoryID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLAccountReportCategoryType)
                    .WithMany(p => p.NLAccountReportCategories)
                    .HasForeignKey(d => d.NLAccountReportCategoryTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLAccountReportCategory_NLAccountReportCategoryType");

                entity.HasOne(d => d.NLAccountReportType)
                    .WithMany(p => p.NLAccountReportCategories)
                    .HasForeignKey(d => d.NLAccountReportTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLAccountReportCategory_NLAccountReportType");
            });

            modelBuilder.Entity<NLAccountReportCategoryType>(entity =>
            {
                entity.ToTable("NLAccountReportCategoryType");

                entity.Property(e => e.NLAccountReportCategoryTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<NLAccountReportType>(entity =>
            {
                entity.ToTable("NLAccountReportType");

                entity.HasIndex(e => e.Name, "IX_NLAccountReportType")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLAccountReportTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLAccountType>(entity =>
            {
                entity.ToTable("NLAccountType");

                entity.HasIndex(e => e.Code, "IX_NLAccountType")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLAccountTypeID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<NLAccountYearValue>(entity =>
            {
                entity.HasKey(e => e.NLAccountYearValueID)
                    .IsClustered(false);

                entity.ToTable("NLAccountYearValue");

                entity.HasIndex(e => e.NLAnnualBudgetTypeID, "IX_NLAccountYearValue_NLAnnualBudgetTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLAnnualBudgetApportProfileID, "IX_NLAccountYearValue_NLBudgetApportionmentProfileID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLNominalAccountID, "IX_NLAccountYearValue_NLNominalAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSFinancialYearID, "IX_NLAccountYearValue_SYSFinancialYearID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLAccountYearValueID).ValueGeneratedNever();

                entity.Property(e => e.AdjustmentAfterYearEndClose).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ClosingBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OriginalBudgetValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.NLAnnualBudgetApportProfile)
                    .WithMany(p => p.NLAccountYearValues)
                    .HasForeignKey(d => d.NLAnnualBudgetApportProfileID)
                    .HasConstraintName("FK_NLAccountYearValue_NLAnnualBudgetApportionmentProfile");

                entity.HasOne(d => d.NLAnnualBudgetType)
                    .WithMany(p => p.NLAccountYearValues)
                    .HasForeignKey(d => d.NLAnnualBudgetTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLAccountYearValue_NLAnnualBudgetType");

                entity.HasOne(d => d.NLNominalAccount)
                    .WithMany(p => p.NLAccountYearValues)
                    .HasForeignKey(d => d.NLNominalAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLAccountYearValue_NLNominalAccount");

                entity.HasOne(d => d.SYSFinancialYear)
                    .WithMany(p => p.NLAccountYearValues)
                    .HasForeignKey(d => d.SYSFinancialYearID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLAccountYearValue_SYSFinancialYear");
            });

            modelBuilder.Entity<NLAnnualBudgetApportProfile>(entity =>
            {
                entity.ToTable("NLAnnualBudgetApportProfile");

                entity.Property(e => e.NLAnnualBudgetApportProfileID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLAnnualBudgetTitle>(entity =>
            {
                entity.ToTable("NLAnnualBudgetTitle");

                entity.Property(e => e.NLAnnualBudgetTitleID).ValueGeneratedNever();

                entity.Property(e => e.BudgetTitle)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<NLAnnualBudgetType>(entity =>
            {
                entity.ToTable("NLAnnualBudgetType");

                entity.HasIndex(e => e.Name, "IX_NLAnnualBudgetType")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLAnnualBudgetTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLBudgetApportPeriodPrcnt>(entity =>
            {
                entity.ToTable("NLBudgetApportPeriodPrcnt");

                entity.HasIndex(e => e.NLAnnualBudgetApportProfileID, "IX_NLBudgetApportionmentPeriodPercentage_NLBudgetApportionmentProfileID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSAccountingPeriodID, "IX_NLBudgetApportionmentPeriodPercentage_SYSAccountingPeriodID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLBudgetApportPeriodPrcntID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PercentageOfAnnualBudget).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.NLAnnualBudgetApportProfile)
                    .WithMany(p => p.NLBudgetApportPeriodPrcnts)
                    .HasForeignKey(d => d.NLAnnualBudgetApportProfileID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLBudgetApportionmentPeriodPercentage_NLAnnualBudgetApportionmentProfile");

                entity.HasOne(d => d.SYSAccountingPeriod)
                    .WithMany(p => p.NLBudgetApportPeriodPrcnts)
                    .HasForeignKey(d => d.SYSAccountingPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLBudgetApportionmentPeriodPercentage_SYSAccountingPeriod");
            });

            modelBuilder.Entity<NLCashFlowLayoutNominalAccount>(entity =>
            {
                entity.HasKey(e => e.NLCashFlowLayoutNominalAccountID)
                    .IsClustered(false);

                entity.ToTable("NLCashFlowLayoutNominalAccount");

                entity.HasIndex(e => e.NLFinancialReportLayoutID, "IX_NLCashFlowLayoutNominalAccount_NLFinancialReportLayoutID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLNominalAccountID, "IX_NLCashFlowLayoutNominalAccount_NLNominalAccountID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLCashFlowLayoutNominalAccountID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLNominalAccount)
                    .WithMany(p => p.NLCashFlowLayoutNominalAccounts)
                    .HasForeignKey(d => d.NLNominalAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLCashFlowLayoutNominalAccount_NLNominalAccount");
            });

            modelBuilder.Entity<NLCashFlowReport>(entity =>
            {
                entity.HasKey(e => e.NLCashFlowReportID)
                    .IsClustered(false);

                entity.ToTable("NLCashFlowReport");

                entity.HasIndex(e => e.NLFinancialReportRowID, "IX_NLCashFlowReport_NLFinancialReportRowID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSFinancialYearID, "IX_NLCashFlowReport_SYSFinancialYearID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Period10Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period11Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period12Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period13Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period14Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period15Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period16Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period17Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period18Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period19Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period1Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period20Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period2Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period3Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period4Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period5Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period6Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period7Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period8Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Period9Value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.NLFinancialReportRow)
                    .WithMany(p => p.NLCashFlowReports)
                    .HasForeignKey(d => d.NLFinancialReportRowID)
                    .HasConstraintName("FK_NLCashFlowReport_NLFinancialReportRow");

                entity.HasOne(d => d.SYSFinancialYear)
                    .WithMany(p => p.NLCashFlowReports)
                    .HasForeignKey(d => d.SYSFinancialYearID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLCashFlowReport_SYSFinancialYear");
            });

            modelBuilder.Entity<NLCashFlowReportPeriodHeading>(entity =>
            {
                entity.ToTable("NLCashFlowReportPeriodHeading");

                entity.HasIndex(e => e.SYSFinancialYearID, "IX_NLCashFlowReportPeriodHeading_SYSFinancialYearID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Period10Heading).HasColumnType("datetime");

                entity.Property(e => e.Period11Heading).HasColumnType("datetime");

                entity.Property(e => e.Period12Heading).HasColumnType("datetime");

                entity.Property(e => e.Period13Heading).HasColumnType("datetime");

                entity.Property(e => e.Period14Heading).HasColumnType("datetime");

                entity.Property(e => e.Period15Heading).HasColumnType("datetime");

                entity.Property(e => e.Period16Heading).HasColumnType("datetime");

                entity.Property(e => e.Period17Heading).HasColumnType("datetime");

                entity.Property(e => e.Period18Heading).HasColumnType("datetime");

                entity.Property(e => e.Period19Heading).HasColumnType("datetime");

                entity.Property(e => e.Period1Heading).HasColumnType("datetime");

                entity.Property(e => e.Period20Heading).HasColumnType("datetime");

                entity.Property(e => e.Period2Heading).HasColumnType("datetime");

                entity.Property(e => e.Period3Heading).HasColumnType("datetime");

                entity.Property(e => e.Period4Heading).HasColumnType("datetime");

                entity.Property(e => e.Period5Heading).HasColumnType("datetime");

                entity.Property(e => e.Period6Heading).HasColumnType("datetime");

                entity.Property(e => e.Period7Heading).HasColumnType("datetime");

                entity.Property(e => e.Period8Heading).HasColumnType("datetime");

                entity.Property(e => e.Period9Heading).HasColumnType("datetime");

                entity.HasOne(d => d.SYSFinancialYear)
                    .WithMany(p => p.NLCashFlowReportPeriodHeadings)
                    .HasForeignKey(d => d.SYSFinancialYearID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLCashFlowReportPeriodHeading_SYSFinancialYear");
            });

            modelBuilder.Entity<NLCompletedConsolidation>(entity =>
            {
                entity.ToTable("NLCompletedConsolidation");

                entity.Property(e => e.NLCompletedConsolidationID).ValueGeneratedNever();

                entity.Property(e => e.UniqueIdentifier)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLConsolidation>(entity =>
            {
                entity.ToTable("NLConsolidation");

                entity.Property(e => e.NLConsolidationID).ValueGeneratedNever();

                entity.Property(e => e.CurrencyName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UniqueIdentifier)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<NLConsolidationItem>(entity =>
            {
                entity.ToTable("NLConsolidationItem");

                entity.Property(e => e.NLConsolidationItemID).ValueGeneratedNever();

                entity.Property(e => e.AccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ConsolidatedAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConsolidatedCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ConsolidatedDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.HasOne(d => d.NLConsolidation)
                    .WithMany(p => p.NLConsolidationItems)
                    .HasForeignKey(d => d.NLConsolidationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLConsolidationItem_NLConsolidation");
            });

            modelBuilder.Entity<NLCostCentre>(entity =>
            {
                entity.HasKey(e => e.NLCostCentreID)
                    .IsClustered(false);

                entity.ToTable("NLCostCentre");

                entity.HasIndex(e => e.Code, "IX_NLCostCentre_Code")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLCostCentreID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ContactDetails)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactEmailAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Institution)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.EDUFundType)
                    .WithMany(p => p.NLCostCentres)
                    .HasForeignKey(d => d.EDUFundTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLCostCentre_EDUFundType");
            });

            modelBuilder.Entity<NLDefaultNominalAccount>(entity =>
            {
                entity.ToTable("NLDefaultNominalAccount");

                entity.HasIndex(e => e.Name, "IX_NLDefaultControlNominalAccount")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLAccountReportTypeID, "IX_NLDefaultControlNominalAccount_NLAccountReportTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLDefaultNominalAccountID).ValueGeneratedNever();

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NLAccountReportTypeID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLAccountReportType)
                    .WithMany(p => p.NLDefaultNominalAccounts)
                    .HasForeignKey(d => d.NLAccountReportTypeID)
                    .HasConstraintName("FK_NLDefaultNominalAccount_NLAccountReportType");

                entity.HasOne(d => d.NLNominalAccount)
                    .WithMany(p => p.NLDefaultNominalAccounts)
                    .HasForeignKey(d => d.NLNominalAccountID)
                    .HasConstraintName("FK_NLDefaultNominalAccount_NLNominalAccount");
            });

            modelBuilder.Entity<NLDeferredNominalTran>(entity =>
            {
                entity.HasKey(e => e.NLDeferredNominalTranID)
                    .HasName("PK_NLDeferredNominalAccountTransaction")
                    .IsClustered(false);

                entity.ToTable("NLDeferredNominalTran");

                entity.HasIndex(e => new { e.AccountNumber, e.AccountCostCentre, e.AccountDepartment }, "IX_NLDeferredNominalAccountTransaction_AccountNumber_AccountCostCentre_AccountDepartment")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentCurrencyID, "IX_NLDeferredNominalAccountTransaction_DocumentCurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLNominalTranTypeID, "IX_NLDeferredNominalAccountTransaction_NLNominalTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Source, "IX_NLDeferredNominalAccountTransaction_Source")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_NLDeferredNominalAccountTransaction_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLDeferredNominalTranID).ValueGeneratedNever();

                entity.Property(e => e.AccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GoodsValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueInDocumentCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TransactionAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.DocumentCurrency)
                    .WithMany(p => p.NLDeferredNominalTrans)
                    .HasForeignKey(d => d.DocumentCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLDeferredNominalAccountTransaction_SYSCurrency");

                entity.HasOne(d => d.NLNominalTranType)
                    .WithMany(p => p.NLDeferredNominalTrans)
                    .HasForeignKey(d => d.NLNominalTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLDeferredNominalAccountTransaction_NLNominalTransactionType");

                entity.HasOne(d => d.NominalPeriodModuleNavigation)
                    .WithMany(p => p.NLDeferredNominalTranNominalPeriodModuleNavigations)
                    .HasForeignKey(d => d.NominalPeriodModule)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLDeferredNominalTran_NominalPeriodModule");

                entity.HasOne(d => d.SYSCorrectionTranType)
                    .WithMany(p => p.NLDeferredNominalTrans)
                    .HasForeignKey(d => d.SYSCorrectionTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLDeferredNominalTran_SYSCorrectionTranType");

                entity.HasOne(d => d.SourceNavigation)
                    .WithMany(p => p.NLDeferredNominalTranSourceNavigations)
                    .HasForeignKey(d => d.Source)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLDeferredNominalAccountTransaction_SYSModule");
            });

            modelBuilder.Entity<NLDepartment>(entity =>
            {
                entity.HasKey(e => e.NLDepartmentID)
                    .IsClustered(false);

                entity.ToTable("NLDepartment");

                entity.HasIndex(e => e.Code, "IX_NLDepartment_Code")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLDepartmentID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ContactDetails)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactEmailAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<NLFinancialReportCategory>(entity =>
            {
                entity.ToTable("NLFinancialReportCategory");

                entity.HasIndex(e => e.NLAccountReportCategoryID, "IX_NLFinancialReportCategory_NLAccountReportCategoryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLAccountReportTypeID, "IX_NLFinancialReportCategory_NLAccountReportTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLFinancialReportRowID, "IX_NLFinancialReportCategory_NLFinancialReportRowID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLFinancialReportCategoryID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLAccountReportCategory)
                    .WithMany(p => p.NLFinancialReportCategories)
                    .HasForeignKey(d => d.NLAccountReportCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLFinancialReportRowCategory_NLAccountReportCategory");

                entity.HasOne(d => d.NLAccountReportType)
                    .WithMany(p => p.NLFinancialReportCategories)
                    .HasForeignKey(d => d.NLAccountReportTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLFinancialReportRowCategory_NLAccountReportType");

                entity.HasOne(d => d.NLFinancialReportRow)
                    .WithMany(p => p.NLFinancialReportCategories)
                    .HasForeignKey(d => d.NLFinancialReportRowID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLFinancialReportRowCategory_NLFinancialReportRow");
            });

            modelBuilder.Entity<NLFinancialReportJoinVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NLFinancialReportJoinVw");
            });

            modelBuilder.Entity<NLFinancialReportLayout>(entity =>
            {
                entity.HasKey(e => e.NLFinancialReportLayoutID)
                    .IsClustered(false);

                entity.ToTable("NLFinancialReportLayout");

                entity.HasIndex(e => e.NLAccountReportTypeID, "IX_NLFinancialReportLayout_NLAccountReportTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Name, "IX_NLFinancialReportLayout_Name")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLFinancialReportLayoutID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLAccountReportType)
                    .WithMany(p => p.NLFinancialReportLayouts)
                    .HasForeignKey(d => d.NLAccountReportTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLFinancialReportLayout_NLAccountReportType");
            });

            modelBuilder.Entity<NLFinancialReportLineType>(entity =>
            {
                entity.ToTable("NLFinancialReportLineType");

                entity.Property(e => e.NLFinancialReportLineTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Albanian_BIN");
            });

            modelBuilder.Entity<NLFinancialReportRow>(entity =>
            {
                entity.HasKey(e => e.NLFinancialReportRowID)
                    .IsClustered(false);

                entity.ToTable("NLFinancialReportRow");

                entity.HasIndex(e => e.NLFinancialReportLayoutID, "IX_NLFinancialReportRow_NLFinancialReportLayoutID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLFinancialReportLineTypeID, "IX_NLFinancialReportRow_NLFinancialReportLineTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLLayoutDebitOrCreditTypeID, "IX_NLFinancialReportRow_NLFinancialStatementDebitOrCreditTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLLayoutPositionTypeID, "IX_NLFinancialReportRow_NLFinancialStatementLayoutPositionTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLFinancialReportRowID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Title)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.NLFinancialReportLayout)
                    .WithMany(p => p.NLFinancialReportRows)
                    .HasForeignKey(d => d.NLFinancialReportLayoutID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLFinancialReportRow_NLFinancialReportLayout");

                entity.HasOne(d => d.NLFinancialReportLineType)
                    .WithMany(p => p.NLFinancialReportRows)
                    .HasForeignKey(d => d.NLFinancialReportLineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLFinancialReportRow_NLFinancialReportLineType");

                entity.HasOne(d => d.NLLayoutDebitOrCreditType)
                    .WithMany(p => p.NLFinancialReportRows)
                    .HasForeignKey(d => d.NLLayoutDebitOrCreditTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLFinancialReportRow_NLFinancialStatementDebitOrCreditType");

                entity.HasOne(d => d.NLLayoutPositionType)
                    .WithMany(p => p.NLFinancialReportRows)
                    .HasForeignKey(d => d.NLLayoutPositionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLFinancialReportRow_NLFinancialStatementLayoutPositionType");
            });

            modelBuilder.Entity<NLHeldJournal>(entity =>
            {
                entity.ToTable("NLHeldJournal");

                entity.HasIndex(e => e.NLJournalTemplateID, "IX_NLHeldJournal_NLJournalTemplateID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLJournalTypeID, "IX_NLHeldJournal_NLJournalTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLHeldJournalID).ValueGeneratedNever();

                entity.Property(e => e.CreatedByUserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateJournalCreated).HasColumnType("datetime");

                entity.Property(e => e.DateJournalLastAmended).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.JournalReference)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.JournalTitle)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ReversalDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionsDate).HasColumnType("datetime");

                entity.HasOne(d => d.NLJournalTemplate)
                    .WithMany(p => p.NLHeldJournals)
                    .HasForeignKey(d => d.NLJournalTemplateID)
                    .HasConstraintName("FK_NLHeldJournal_NLJournalTemplate");

                entity.HasOne(d => d.NLJournalType)
                    .WithMany(p => p.NLHeldJournals)
                    .HasForeignKey(d => d.NLJournalTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLHeldJournal_NLJournalType");
            });

            modelBuilder.Entity<NLHeldJournalTran>(entity =>
            {
                entity.HasKey(e => e.NLHeldJournalTranID)
                    .HasName("PK_NLPendingJournalItem")
                    .IsClustered(false);

                entity.ToTable("NLHeldJournalTran");

                entity.HasIndex(e => e.NLAccountTypeID, "IX_NLHeldJournalTransaction_NLAccountTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLHeldJournalID, "IX_NLHeldJournalTransaction_NLHeldJournalID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLJournalTranTaxTypeID, "IX_NLHeldJournalTransaction_NLJournalTransactionTaxTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTaxRateID, "IX_NLHeldJournalTransaction_SYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLHeldJournalTranID).ValueGeneratedNever();

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CreditValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DebitValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Department)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TransactionAnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.NLAccountType)
                    .WithMany(p => p.NLHeldJournalTrans)
                    .HasForeignKey(d => d.NLAccountTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLHeldJournalTransaction_NLAccountType");

                entity.HasOne(d => d.NLHeldJournal)
                    .WithMany(p => p.NLHeldJournalTrans)
                    .HasForeignKey(d => d.NLHeldJournalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLHeldJournalTransaction_NLHeldJournal");

                entity.HasOne(d => d.NLJournalTranTaxType)
                    .WithMany(p => p.NLHeldJournalTrans)
                    .HasForeignKey(d => d.NLJournalTranTaxTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLHeldJournalTransaction_NLJournalTransactionTaxType");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.NLHeldJournalTrans)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .HasConstraintName("FK_NLHeldJournalTransaction_SYSTaxRate");
            });

            modelBuilder.Entity<NLHistoricalNominalTran>(entity =>
            {
                entity.HasKey(e => e.NLHistoricalNominalTranID)
                    .HasName("PK_NLDeletedNominalAccountTransaction")
                    .IsClustered(false);

                entity.ToTable("NLHistoricalNominalTran");

                entity.HasIndex(e => e.DocumentCurrencyID, "IX_NLHistoricalNominalAccountTransaction_DocumentCurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLDeletedNominalAccountID, "IX_NLHistoricalNominalAccountTransaction_NLDeletedNominalAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSAccountingPeriodID, "IX_NLHistoricalNominalAccountTransaction_SYSAccountingPeriodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLHistoricalNominalTranID, "IX_NLHistoricalNominalAccountTransaction_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransactionDate, "IX_NLHistoricalNominalTran_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLHistoricalNominalTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeletionDate).HasColumnType("datetime");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GoodsValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueInDocumentCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TransactionAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.DocumentCurrency)
                    .WithMany(p => p.NLHistoricalNominalTrans)
                    .HasForeignKey(d => d.DocumentCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLHistoricalNominalAccountTransaction_SYSCurrency");

                entity.HasOne(d => d.SYSAccountingPeriod)
                    .WithMany(p => p.NLHistoricalNominalTrans)
                    .HasForeignKey(d => d.SYSAccountingPeriodID)
                    .HasConstraintName("FK_NLHistoricalNominalAccountTransaction_SYSAccountingPeriod");

                entity.HasOne(d => d.SYSCorrectionTranType)
                    .WithMany(p => p.NLHistoricalNominalTrans)
                    .HasForeignKey(d => d.SYSCorrectionTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLHistoricalNominalTran_SYSCorrectionTranType");
            });

            modelBuilder.Entity<NLJournalRecurringDate>(entity =>
            {
                entity.HasKey(e => e.NLJournalRecurringDateID)
                    .HasName("PK_NLRecurringJournalDate")
                    .IsClustered(false);

                entity.ToTable("NLJournalRecurringDate");

                entity.HasIndex(e => e.NLHeldJournalID, "IX_NLJournalRecurringDate_NLHeldJournalID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLJournalRecurringDateID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.JournalDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLHeldJournal)
                    .WithMany(p => p.NLJournalRecurringDates)
                    .HasForeignKey(d => d.NLHeldJournalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLJournalRecurringDate_NLHeldJournal");
            });

            modelBuilder.Entity<NLJournalTemplate>(entity =>
            {
                entity.HasKey(e => e.NLJournalTemplateID)
                    .IsClustered(false);

                entity.ToTable("NLJournalTemplate");

                entity.HasIndex(e => e.NLJournalTemplateTypeID, "IX_NLJournalTemplate_NLJournalTemplateTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLJournalTemplateID, "NLJournalTemplate.IX_NLJournalTemplate_NLJournalTemplateID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLJournalTemplateID).ValueGeneratedNever();

                entity.Property(e => e.CreatedByUserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateLastUsed).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.NLJournalTemplateType)
                    .WithMany(p => p.NLJournalTemplates)
                    .HasForeignKey(d => d.NLJournalTemplateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLJournalTemplate_NLJournalTemplateType");
            });

            modelBuilder.Entity<NLJournalTemplateTran>(entity =>
            {
                entity.HasKey(e => e.NLJournalTemplateTranID)
                    .HasName("PK_NLJournalTemplateItem")
                    .IsClustered(false);

                entity.ToTable("NLJournalTemplateTran");

                entity.HasIndex(e => e.NLJournalTemplateID, "IX_NLJournalTemplateTransaction_NLJournalTemplateID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLJournalTemplateTranID).ValueGeneratedNever();

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Department)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.JournalNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TransactionAnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionCreditPercentage).HasColumnType("decimal(18, 15)");

                entity.Property(e => e.TransactionCreditValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDebitPercentage).HasColumnType("decimal(18, 15)");

                entity.Property(e => e.TransactionDebitValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.NLJournalTemplate)
                    .WithMany(p => p.NLJournalTemplateTrans)
                    .HasForeignKey(d => d.NLJournalTemplateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLJournalTemplateTransaction_NLJournalTemplate");

                entity.HasOne(d => d.NLJournalTranTaxType)
                    .WithMany(p => p.NLJournalTemplateTrans)
                    .HasForeignKey(d => d.NLJournalTranTaxTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLJournalTemplateTran_NLJournalTranTaxType");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.NLJournalTemplateTrans)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLJournalTemplateTran_SYSTaxRate");
            });

            modelBuilder.Entity<NLJournalTemplateType>(entity =>
            {
                entity.ToTable("NLJournalTemplateType");

                entity.HasIndex(e => e.Name, "IX_NLJournalTemplateType")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLJournalTemplateTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLJournalTranTaxType>(entity =>
            {
                entity.ToTable("NLJournalTranTaxType");

                entity.Property(e => e.NLJournalTranTaxTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLJournalType>(entity =>
            {
                entity.ToTable("NLJournalType");

                entity.HasIndex(e => e.Name, "IX_NLJournalType")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLJournalTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLLayoutDebitOrCreditType>(entity =>
            {
                entity.ToTable("NLLayoutDebitOrCreditType");

                entity.Property(e => e.NLLayoutDebitOrCreditTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLLayoutPositionType>(entity =>
            {
                entity.ToTable("NLLayoutPositionType");

                entity.Property(e => e.NLLayoutPositionTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLNextJournalReferenceNumber>(entity =>
            {
                entity.ToTable("NLNextJournalReferenceNumber");

                entity.Property(e => e.NLNextJournalReferenceNumberID).ValueGeneratedNever();

                entity.Property(e => e.NextJournalReferenceNumber).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<NLNominalAccount>(entity =>
            {
                entity.HasKey(e => e.NLNominalAccountID)
                    .IsClustered(false);

                entity.ToTable("NLNominalAccount");

                entity.HasIndex(e => e.AccountName, "IX_NLNominalAccount_AccountName")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.AccountNumber, e.AccountCostCentre, e.AccountDepartment }, "IX_NLNominalAccount_AccountNumberCostCentreDepartment")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLAccountNumberCostCentreID, "IX_NLNominalAccount_NLAccountNumberCostCentreID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLAccountReportCategoryID, "IX_NLNominalAccount_NLAccountReportCategoryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLAccountTypeID, "IX_NLNominalAccount_NLAccountTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLCostCentreID, "IX_NLNominalAccount_NLCostCentreID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLDepartmentID, "IX_NLNominalAccount_NLDepartmentID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLNominalAccountID, "IX_NLNominalAccount_NLNominalAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ParentNLNominalAccountID, "IX_NLNominalAccount_ParentNLNominalAccountID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLNominalAccountID).ValueGeneratedNever();

                entity.Property(e => e.AccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AllowJournalsToBePosted)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BroughtForwardBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ConsolidatedAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConsolidatedAdjustment).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ConsolidatedCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ConsolidatedDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CreditYearToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DebitYearToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StatusChangedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatusChangedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.NLAccountNumberCostCentre)
                    .WithMany(p => p.NLNominalAccounts)
                    .HasForeignKey(d => d.NLAccountNumberCostCentreID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLNominalAccount_NLAccountNumberCostCentre");

                entity.HasOne(d => d.NLAccountReportCategory)
                    .WithMany(p => p.NLNominalAccountNLAccountReportCategories)
                    .HasForeignKey(d => d.NLAccountReportCategoryID)
                    .HasConstraintName("FK_NLNominalAccount_NLAccountReportCategory");

                entity.HasOne(d => d.NLAccountSofaCategory)
                    .WithMany(p => p.NLNominalAccountNLAccountSofaCategories)
                    .HasForeignKey(d => d.NLAccountSofaCategoryID)
                    .HasConstraintName("FK_NLNominalAccount_NLAccountSofaCategory");

                entity.HasOne(d => d.NLAccountType)
                    .WithMany(p => p.NLNominalAccounts)
                    .HasForeignKey(d => d.NLAccountTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLNominalAccount_NLAccountType");

                entity.HasOne(d => d.NLCostCentre)
                    .WithMany(p => p.NLNominalAccounts)
                    .HasForeignKey(d => d.NLCostCentreID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLNominalAccount_NLCostCentre");

                entity.HasOne(d => d.NLDepartment)
                    .WithMany(p => p.NLNominalAccounts)
                    .HasForeignKey(d => d.NLDepartmentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLNominalAccount_NLDepartment");

                entity.HasOne(d => d.NLReportCategoryBudget)
                    .WithMany(p => p.NLNominalAccounts)
                    .HasForeignKey(d => d.NLReportCategoryBudgetID)
                    .HasConstraintName("FK_NLNominalAccount_NLReportCategoryBudget");

                entity.HasOne(d => d.ParentNLNominalAccount)
                    .WithMany(p => p.InverseParentNLNominalAccount)
                    .HasForeignKey(d => d.ParentNLNominalAccountID)
                    .HasConstraintName("FK_NLNominalAccount_NLNominalAccount");

                entity.HasOne(d => d.SYSAccountStatus)
                    .WithMany(p => p.NLNominalAccounts)
                    .HasForeignKey(d => d.SYSAccountStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLNominalAccount_SYSAccountStatus");
            });

            modelBuilder.Entity<NLNominalAccountBudgetsVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NLNominalAccountBudgetsVw");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentYear).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus2).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus3).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus4).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus5).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Department)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PreviousYear).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ReportCategory)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLNominalTranType>(entity =>
            {
                entity.ToTable("NLNominalTranType");

                entity.Property(e => e.NLNominalTranTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLPendLastYearPeriodValue>(entity =>
            {
                entity.HasKey(e => e.NLPendLastYearPeriodValueID)
                    .HasName("PK_NLPendingNominalAccountLastYearPeriodValue")
                    .IsClustered(false);

                entity.ToTable("NLPendLastYearPeriodValue");

                entity.HasIndex(e => e.NLPendNominalAccountID, "IX_NLPendingNominalAccountLastYearPeriodValue_NLPendingNominalAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLPendLastYearPeriodValueID).ValueGeneratedNever();

                entity.Property(e => e.ActualLastYearBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLPendNominalAccount)
                    .WithMany(p => p.NLPendLastYearPeriodValues)
                    .HasForeignKey(d => d.NLPendNominalAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendingNominalAccountLastYearPeriodValue_NLPendingNominalAccount");
            });

            modelBuilder.Entity<NLPendNominalAccount>(entity =>
            {
                entity.ToTable("NLPendNominalAccount");

                entity.HasIndex(e => e.NLAccountTypeID, "IX_NLPendingNominalAccount_NLAccountTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLPendNominalAccountTypeID, "IX_NLPendingNominalAccount_NLPendingNominalAccountTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLPendNominalAccountID).ValueGeneratedNever();

                entity.Property(e => e.AccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AccountReportCategory)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.AccountSofaCategory)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AllowJournalsToBePosted)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BroughtForwardBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ConsolidatedAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConsolidatedCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ConsolidatedDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CreditYearToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DebitYearToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLAccountType)
                    .WithMany(p => p.NLPendNominalAccounts)
                    .HasForeignKey(d => d.NLAccountTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendingNominalAccount_NLAccountType");

                entity.HasOne(d => d.NLPendNominalAccountType)
                    .WithMany(p => p.NLPendNominalAccounts)
                    .HasForeignKey(d => d.NLPendNominalAccountTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendingNominalAccount_NLPendingNominalAccountType");

                entity.HasOne(d => d.SYSAccountStatus)
                    .WithMany(p => p.NLPendNominalAccounts)
                    .HasForeignKey(d => d.SYSAccountStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendNominalAccount_SYSAccountStatus");
            });

            modelBuilder.Entity<NLPendNominalAccountAnalysis>(entity =>
            {
                entity.ToTable("NLPendNominalAccountAnalysis");

                entity.HasIndex(e => e.NLPendNominalAccountID, "IX_NLPendNominalAccountAnalysis_NLPendNominalAccountID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLPendNominalAccountAnalysisID).ValueGeneratedNever();

                entity.Property(e => e.AnalysisName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisValue)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLPendNominalAccount)
                    .WithMany(p => p.NLPendNominalAccountAnalyses)
                    .HasForeignKey(d => d.NLPendNominalAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendingNominalAccountAnalysis_NLPendingNominalAccount");
            });

            modelBuilder.Entity<NLPendNominalAccountType>(entity =>
            {
                entity.ToTable("NLPendNominalAccountType");

                entity.Property(e => e.NLPendNominalAccountTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLPendNominalPeriodValue>(entity =>
            {
                entity.HasKey(e => e.NLPendNominalPeriodValueID)
                    .HasName("PK_NLPendingNominalAccountMonthValue")
                    .IsClustered(false);

                entity.ToTable("NLPendNominalPeriodValue");

                entity.HasIndex(e => e.NLPendNominalAccountID, "IX_NLPendingNominalAccountPeriodValue_NLPendingNominalAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLPendNominalPeriodValueID).ValueGeneratedNever();

                entity.Property(e => e.ActualThisYearBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetThisYearBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLPendNominalAccount)
                    .WithMany(p => p.NLPendNominalPeriodValues)
                    .HasForeignKey(d => d.NLPendNominalAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendingNominalAccountMonthValue_NLPendingNominalAccount");

                entity.HasOne(d => d.NLPendNominalYearValue)
                    .WithMany(p => p.NLPendNominalPeriodValues)
                    .HasForeignKey(d => d.NLPendNominalYearValueID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendNominalPeriodValue_NLPendNominalYearValue");
            });

            modelBuilder.Entity<NLPendNominalTran>(entity =>
            {
                entity.HasKey(e => e.NLPendNominalTranID)
                    .HasName("PK_NLCurrentNominalAccountTransaction")
                    .IsClustered(false);

                entity.ToTable("NLPendNominalTran");

                entity.HasIndex(e => new { e.AccountNumber, e.AccountCostCentre, e.AccountDepartment }, "IX_NLPendingNominalAccountTransaction_AccountNumber_AccountCostCentre_AccountDepartment")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentCurrencyID, "IX_NLPendingNominalAccountTransaction_DocumentCurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLNominalTranTypeID, "IX_NLPendingNominalAccountTransaction_NLNominalTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Source, "IX_NLPendingNominalAccountTransaction_Source")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_NLPendingNominalAccountTransaction_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLPendNominalTranID).ValueGeneratedNever();

                entity.Property(e => e.AccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GoodsValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueInDocumentCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TransactionAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.DocumentCurrency)
                    .WithMany(p => p.NLPendNominalTrans)
                    .HasForeignKey(d => d.DocumentCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendingNominalAccountTransaction_SYSCurrency");

                entity.HasOne(d => d.NLNominalTranType)
                    .WithMany(p => p.NLPendNominalTrans)
                    .HasForeignKey(d => d.NLNominalTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendingNominalAccountTransaction_NLNominalTransactionType");

                entity.HasOne(d => d.NominalPeriodModuleNavigation)
                    .WithMany(p => p.NLPendNominalTranNominalPeriodModuleNavigations)
                    .HasForeignKey(d => d.NominalPeriodModule)
                    .HasConstraintName("FK_NLPendNominalTran_NominalPeriodModule");

                entity.HasOne(d => d.SYSCorrectionTranType)
                    .WithMany(p => p.NLPendNominalTrans)
                    .HasForeignKey(d => d.SYSCorrectionTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendNominalTran_SYSCorrectionTranType");

                entity.HasOne(d => d.SourceNavigation)
                    .WithMany(p => p.NLPendNominalTranSourceNavigations)
                    .HasForeignKey(d => d.Source)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendingNominalAccountTransaction_SYSModule");
            });

            modelBuilder.Entity<NLPendNominalTranReport>(entity =>
            {
                entity.ToTable("NLPendNominalTranReport");

                entity.Property(e => e.NLPendNominalTranReportID).ValueGeneratedNever();

                entity.Property(e => e.AccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CreditValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DebitValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostingReferenceFormatStringDashes)
                    .IsRequired()
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<NLPendNominalYearValue>(entity =>
            {
                entity.ToTable("NLPendNominalYearValue");

                entity.Property(e => e.NLPendNominalYearValueID).ValueGeneratedNever();

                entity.Property(e => e.AnnualBudgetApportProfile)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BudgetType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BudgetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLPendNominalAccount)
                    .WithMany(p => p.NLPendNominalYearValues)
                    .HasForeignKey(d => d.NLPendNominalAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPendNominalYearValue_NLPendNominalAccount");
            });

            modelBuilder.Entity<NLPostAndHistNominalTranView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NLPostAndHistNominalTranView");

                entity.Property(e => e.GoodsValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<NLPostedNominalTran>(entity =>
            {
                entity.HasKey(e => e.NLPostedNominalTranID)
                    .HasName("PK_NLPostedNominalAccountTransaction")
                    .IsClustered(false);

                entity.ToTable("NLPostedNominalTran");

                entity.HasIndex(e => e.DocumentCurrencyID, "IX_NLPostedNominalAccountTransaction_DocumentCurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLNominalAccountID, "IX_NLPostedNominalAccountTransaction_NLNominalAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NLNominalTranTypeID, "IX_NLPostedNominalAccountTransaction_NLNominalTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSAccountingPeriodID, "IX_NLPostedNominalAccountTransaction_SYSAccountingPeriodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_NLPostedNominalAccountTransaction_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.NLNominalAccountID, e.NLPostedNominalTranID }, "IX_NLPostedNominalTran_NLNominalAccountID_NLPostedNominalTranID_INCLUDES")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.NLPostedNominalTranID, e.NLNominalAccountID }, "IX_NLPostedNominalTran_NominalTran_NominalAccount")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TransactionDate, e.NLPostedNominalTranID, e.NLNominalAccountID, e.SYSAccountingPeriodID, e.Source, e.GoodsValueInBaseCurrency, e.Reference, e.UserName, e.UserNumber, e.UniqueReferenceNumber, e.PostedDate, e.TransactionAnalysisCode }, "IX_NLPostedNominalTran_NominalTransactionEnquiry")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.NLNominalAccountID, e.GoodsValueInDocumentCurrency }, "IX_NLPostedNominalTran_PostedNominalAccountEntrySum")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransactionDate, "IX_NLPostedNominalTran_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NLPostedNominalTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GoodsValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueInDocumentCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TransactionAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.DocumentCurrency)
                    .WithMany(p => p.NLPostedNominalTrans)
                    .HasForeignKey(d => d.DocumentCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPostedNominalAccountTransaction_SYSCurrency");

                entity.HasOne(d => d.NLNominalAccount)
                    .WithMany(p => p.NLPostedNominalTrans)
                    .HasForeignKey(d => d.NLNominalAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPostedNominalAccountTransaction_NLNominalAccount");

                entity.HasOne(d => d.NLNominalTranType)
                    .WithMany(p => p.NLPostedNominalTrans)
                    .HasForeignKey(d => d.NLNominalTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPostedNominalAccountTransaction_NLNominalTransactionType");

                entity.HasOne(d => d.SYSAccountingPeriod)
                    .WithMany(p => p.NLPostedNominalTrans)
                    .HasForeignKey(d => d.SYSAccountingPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPostedNominalAccountTransaction_SYSAccountingPeriod");

                entity.HasOne(d => d.SYSCorrectionTranType)
                    .WithMany(p => p.NLPostedNominalTrans)
                    .HasForeignKey(d => d.SYSCorrectionTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLPostedNominalTran_SYSCorrectionTranType");
            });

            modelBuilder.Entity<NLReconciliationEnquirySetting>(entity =>
            {
                entity.ToTable("NLReconciliationEnquirySetting");

                entity.Property(e => e.NLReconciliationEnquirySettingID).ValueGeneratedNever();

                entity.HasOne(d => d.NLNominalAccount)
                    .WithMany(p => p.NLReconciliationEnquirySettings)
                    .HasForeignKey(d => d.NLNominalAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLReconciliationEnquirySetting_NLNominalAccount");

                entity.HasOne(d => d.NLReconciliationEnquiryType)
                    .WithMany(p => p.NLReconciliationEnquirySettings)
                    .HasForeignKey(d => d.NLReconciliationEnquiryTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLReconciliationEnquirySetting_NLReconciliationEnquiryType");
            });

            modelBuilder.Entity<NLReconciliationEnquiryType>(entity =>
            {
                entity.ToTable("NLReconciliationEnquiryType");

                entity.Property(e => e.NLReconciliationEnquiryTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NLReportCategoryBudget>(entity =>
            {
                entity.ToTable("NLReportCategoryBudget");

                entity.Property(e => e.NLReportCategoryBudgetID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StatusChangedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatusChangedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.SYSAccountStatus)
                    .WithMany(p => p.NLReportCategoryBudgets)
                    .HasForeignKey(d => d.SYSAccountStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLReportCategoryBudget_SYSAccountStatus");
            });

            modelBuilder.Entity<NLReportCategoryBudgetOwner>(entity =>
            {
                entity.ToTable("NLReportCategoryBudgetOwner");

                entity.Property(e => e.NLReportCategoryBudgetOwnerID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.NLReportCategoryBudget)
                    .WithMany(p => p.NLReportCategoryBudgetOwners)
                    .HasForeignKey(d => d.NLReportCategoryBudgetID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLReportCategoryBudgetOwner_NLReportCategoryBudget");
            });

            modelBuilder.Entity<NLReportCategoryBudgetYearValue>(entity =>
            {
                entity.ToTable("NLReportCategoryBudgetYearValue");

                entity.Property(e => e.NLReportCategoryBudgetYearValueID).ValueGeneratedNever();

                entity.Property(e => e.BudgetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLReportCategoryBudget)
                    .WithMany(p => p.NLReportCategoryBudgetYearValues)
                    .HasForeignKey(d => d.NLReportCategoryBudgetID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLReportCategoryBudgetYearValue_NLReportCategoryBudget");

                entity.HasOne(d => d.SYSFinancialYear)
                    .WithMany(p => p.NLReportCategoryBudgetYearValues)
                    .HasForeignKey(d => d.SYSFinancialYearID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLReportCategoryBudgetYearValue_SYSFinancialYear");
            });

            modelBuilder.Entity<NLReportCategoryYearBudgetsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NLReportCategoryYearBudgetsView");

                entity.Property(e => e.BudgetName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentYearAllocated).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearBudget).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus1Allocated).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus1Budget).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus2Allocated).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus2Budget).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus3Allocated).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus3Budget).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus4Allocated).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus4Budget).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus5Allocated).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurrentYearPlus5Budget).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.PreviousYearAllocated).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.PreviousYearBudget).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<NLSetting>(entity =>
            {
                entity.ToTable("NLSetting");

                entity.Property(e => e.NLSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HMRCAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.HMRCAccountNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HMRCSortCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.KeepTransactionsAfterPeriodEnd)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastFinancialYearEndDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ParentUsesSameBaseCurrency)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RestrictNominalCodeEntry)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SagePaymentsIdentifier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UseCompanyConsolidation)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VATContactEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VATContactFirstName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.VATContactLastName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.VATContactTelephone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VATLiabilityNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.VATLiabilityNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.VATLiabilityNominalNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.SagePaymentsStatus)
                    .WithMany(p => p.NLSettings)
                    .HasForeignKey(d => d.SagePaymentsStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLSetting_SagePaymentsSupplierStatus");

                entity.HasOne(d => d.VATPaymentCBAccount)
                    .WithMany(p => p.NLSettings)
                    .HasForeignKey(d => d.VATPaymentCBAccountID)
                    .HasConstraintName("FK_NLSetting_CBAccount");
            });

            modelBuilder.Entity<NLStatementLayout>(entity =>
            {
                entity.ToTable("NLStatementLayout");

                entity.Property(e => e.NLStatementLayoutID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LayoutName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLAccountReportType)
                    .WithMany(p => p.NLStatementLayouts)
                    .HasForeignKey(d => d.NLAccountReportTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLStatementLayout_NLAccountReportType");
            });

            modelBuilder.Entity<NLStatementLayoutRow>(entity =>
            {
                entity.ToTable("NLStatementLayoutRow");

                entity.Property(e => e.NLStatementLayoutRowID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Group1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Group2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Group3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Group4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Group5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Group6)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Group7)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Group8)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Group9)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NLAccountReportCategory)
                    .WithMany(p => p.NLStatementLayoutRows)
                    .HasForeignKey(d => d.NLAccountReportCategoryID)
                    .HasConstraintName("FK_NLStatementLayoutRow_NLAccountReportCategory");

                entity.HasOne(d => d.NLLayoutDebitOrCreditType)
                    .WithMany(p => p.NLStatementLayoutRows)
                    .HasForeignKey(d => d.NLLayoutDebitOrCreditTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLStatementLayoutRow_NLLayoutDebitOrCreditType");

                entity.HasOne(d => d.NLStatementLayout)
                    .WithMany(p => p.NLStatementLayoutRows)
                    .HasForeignKey(d => d.NLStatementLayoutID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NLStatementLayoutRow_NLStatementLayout");
            });

            modelBuilder.Entity<NatureOfTransCode>(entity =>
            {
                entity.ToTable("NatureOfTransCode");

                entity.HasIndex(e => e.CountryCodeID, "IX_NatureOfTransCode_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.NatureOfTransCodeID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.NatureOfTransCodes)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_NatureOfTransCode_SYSCountryCode");
            });

            modelBuilder.Entity<NominalUsage>(entity =>
            {
                entity.ToTable("NominalUsage");

                entity.Property(e => e.NominalUsageID).ValueGeneratedNever();

                entity.Property(e => e.NominalUsageName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NonProductiveBreakdown>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_NonProdBDownPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("NonProductiveBreakdown");

                entity.HasIndex(e => e.Reference, "IX_NonProdBDownRef")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StageID, "IX_NonProdBDownStageID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EmployeeName).HasMaxLength(50);

                entity.Property(e => e.EmployeeNumber).HasMaxLength(10);

                entity.Property(e => e.Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobID).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobNumber).HasMaxLength(30);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.StageID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.ReferenceNavigation)
                    .WithMany(p => p.NonProductiveBreakdowns)
                    .HasPrincipalKey(p => p.Reference)
                    .HasForeignKey(d => d.Reference)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_NonProductiveBreakdown_NonProductiveTime");
            });

            modelBuilder.Entity<NonProductiveTime>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_NonProdPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("NonProductiveTime");

                entity.HasIndex(e => e.Reference, "IX_NonProdReference")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<NonWorkingPeriod>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_NonWorkingPeriodsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.From, "IX_NonWorkingPeriodsFrom")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.From).HasColumnType("datetime");

                entity.Property(e => e.To).HasColumnType("datetime");
            });

            modelBuilder.Entity<Old200BOMAllocation>(entity =>
            {
                entity.HasKey(e => e.BOMAllocationID)
                    .HasName("Old200PK_BOMAllocation");

                entity.ToTable("Old200BOMAllocation");

                entity.HasIndex(e => e.BOMAllocationName, "IX_BOMAllocation_BOMAllocationName")
                    .IsUnique();

                entity.HasIndex(e => e.BOMMakeupStockOptionID, "IX_BOMAllocation_BOMMakeupStockOptionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BOMMakeupSubAssOptionID, "IX_BOMAllocation_BOMMakeupSubAssOptionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_BOMAllocation_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BOMAllocationID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.AllocationTime).HasColumnType("datetime");

                entity.Property(e => e.BOMAllocationName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TotalQtyForMake).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UserAllocationReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.BOMMakeupStockOption)
                    .WithMany(p => p.Old200BOMAllocations)
                    .HasForeignKey(d => d.BOMMakeupStockOptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMAllocation_BOMMakeupStockOption");

                entity.HasOne(d => d.BOMMakeupSubAssOption)
                    .WithMany(p => p.Old200BOMAllocations)
                    .HasForeignKey(d => d.BOMMakeupSubAssOptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BOMAllocation_BOMMakeupSubAssOption");
            });

            modelBuilder.Entity<Old200BOMCostType>(entity =>
            {
                entity.HasKey(e => e.BOMCostTypeID)
                    .HasName("Old200PK_BOMCostType");

                entity.ToTable("Old200BOMCostType");

                entity.HasIndex(e => e.Name, "IX_BOMCostType")
                    .IsUnique();

                entity.Property(e => e.BOMCostTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Old200BOMReasonForHold>(entity =>
            {
                entity.HasKey(e => e.BOMReasonForHoldId)
                    .HasName("PK_Reason");

                entity.ToTable("Old200BOMReasonForHold");

                entity.HasIndex(e => e.Code, "IX_ReasonShortCode")
                    .IsUnique();

                entity.Property(e => e.BOMReasonForHoldId).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<OldMfgBomImage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OldMfgBomImage");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Picture).HasColumnType("image");

                entity.HasOne(d => d.Header)
                    .WithMany()
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BomImage_BomHeaders");
            });

            modelBuilder.Entity<OpOperation>(entity =>
            {
                entity.HasKey(e => e.OpOperationID)
                    .IsClustered(false);

                entity.ToTable("OpOperation");

                entity.Property(e => e.OpOperationID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OverlapPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OverlapQuantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityPerRun).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<OpOperationPhase>(entity =>
            {
                entity.ToTable("OpOperationPhase");

                entity.Property(e => e.OpOperationPhaseID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");
            });

            modelBuilder.Entity<OpOperationResource>(entity =>
            {
                entity.ToTable("OpOperationResource");

                entity.HasIndex(e => e.OpOperationID, "IX_OpOperationResource_OpOperationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OpOperationPhaseID, "IX_OpOperationResource_OpOperationPhaseID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OpOperationResourceTypeID, "IX_OpOperationResource_OpOperationResourceTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.OpOperationResourceID).ValueGeneratedNever();

                entity.Property(e => e.CostQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.CostRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FixedLengthQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ManningLevel)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SequenceNumber)
                    .HasColumnType("decimal(15, 6)")
                    .HasDefaultValueSql("((2))");

                entity.HasOne(d => d.OpOperation)
                    .WithMany(p => p.OpOperationResources)
                    .HasForeignKey(d => d.OpOperationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OpOperationResource_OpOperation");

                entity.HasOne(d => d.OpOperationPhase)
                    .WithMany(p => p.OpOperationResources)
                    .HasForeignKey(d => d.OpOperationPhaseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OpOperationResource_OpOperationPhase");

                entity.HasOne(d => d.OpOperationResourceType)
                    .WithMany(p => p.OpOperationResources)
                    .HasForeignKey(d => d.OpOperationResourceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OpOperationResource_OpOperationResourceType");
            });

            modelBuilder.Entity<OpOperationResourceType>(entity =>
            {
                entity.ToTable("OpOperationResourceType");

                entity.Property(e => e.OpOperationResourceTypeID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");
            });

            modelBuilder.Entity<OpOperationSubcontractQuantityBreak>(entity =>
            {
                entity.ToTable("OpOperationSubcontractQuantityBreak");

                entity.Property(e => e.OpOperationSubcontractQuantityBreakID).ValueGeneratedNever();

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityFrom)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantityTo)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.OpOperationSubcontractSupplier)
                    .WithMany(p => p.OpOperationSubcontractQuantityBreaks)
                    .HasForeignKey(d => d.OpOperationSubcontractSupplierID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OpOperationSubcontractQuantityBreak_OpOperationSubcontractSupplier");
            });

            modelBuilder.Entity<OpOperationSubcontractSupplier>(entity =>
            {
                entity.ToTable("OpOperationSubcontractSupplier");

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_OpOperationSubcontractSupplier_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OpOperationID, "IX_OpOperationSubcontractSupplier_OpOperationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.OpOperationSubcontractSupplierID).ValueGeneratedNever();

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderReference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.OpOperationSubcontractSuppliers)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OpOperationSubcontractSupplier_MsmCostHeading");

                entity.HasOne(d => d.OpOperation)
                    .WithMany(p => p.OpOperationSubcontractSuppliers)
                    .HasForeignKey(d => d.OpOperationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OpOperationSubcontractSupplier_OpOperation");
            });

            modelBuilder.Entity<OpSetting>(entity =>
            {
                entity.ToTable("OpSetting");

                entity.Property(e => e.OpSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OpSequenceStart)
                    .HasColumnType("decimal(15, 6)")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.OpSequenceStep)
                    .HasColumnType("decimal(15, 6)")
                    .HasDefaultValueSql("((2))");
            });

            modelBuilder.Entity<Operation>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_OperationsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.ProcessReference, "IX_OperationsProcessReference")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DelayHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelayMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupHrs).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LabourReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Overlap).HasDefaultValueSql("((0))");

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RunTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.RunTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5To).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContLeadTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubContractProcess_).HasColumnName("SubContractProcess?");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<OrderReturnLineType>(entity =>
            {
                entity.ToTable("OrderReturnLineType");

                entity.Property(e => e.OrderReturnLineTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrderValueDiscount>(entity =>
            {
                entity.ToTable("OrderValueDiscount");

                entity.HasIndex(e => e.CurrencyID, "IX_OrderValueDiscount_CurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Name, "IX_OrderValueDiscount_Name")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.OrderValueDiscountID).ValueGeneratedNever();

                entity.Property(e => e.CurrencyID).HasDefaultValueSql("((0))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.OrderValueDiscounts)
                    .HasForeignKey(d => d.CurrencyID)
                    .HasConstraintName("FK_OrderValueDiscount_SYSCurrency");
            });

            modelBuilder.Entity<PCAccrual>(entity =>
            {
                entity.ToTable("PCAccrual");

                entity.HasIndex(e => e.PCProjectItemID, "IX_PCAccrual_PCProjectItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCUnitOfMeasureID, "IX_PCAccrual_PCUnitOfMeasureID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCAccrualID).ValueGeneratedNever();

                entity.Property(e => e.AccrualDate).HasColumnType("datetime");

                entity.Property(e => e.BSNominalACRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.BSNominalCC)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BSNominalDept)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GoodsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MarkupPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OverheadValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PLNominalACRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PLNominalCC)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PLNominalDept)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReversalDate).HasColumnType("datetime");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValueToBill).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.PCUnitOfMeasure)
                    .WithMany(p => p.PCAccruals)
                    .HasForeignKey(d => d.PCUnitOfMeasureID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCAccrual_PCUnitOfMeasure");
            });

            modelBuilder.Entity<PCBillStatus>(entity =>
            {
                entity.ToTable("PCBillStatus");

                entity.Property(e => e.PCBillStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCBillingProjectSearchVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCBillingProjectSearchVw");

                entity.Property(e => e.AccountReference)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.BillNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BillStatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BillType)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.CreditDate).HasColumnType("datetime");

                entity.Property(e => e.CreditNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreditStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalDiscountedNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalTax).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<PCBudgetLevel>(entity =>
            {
                entity.ToTable("PCBudgetLevel");

                entity.Property(e => e.PCBudgetLevelID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCChargeRateType>(entity =>
            {
                entity.ToTable("PCChargeRateType");

                entity.Property(e => e.PCChargeRateTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCConfigurableTerm>(entity =>
            {
                entity.ToTable("PCConfigurableTerm");

                entity.Property(e => e.PCConfigurableTermID).ValueGeneratedNever();

                entity.Property(e => e.ConfiguredTerm)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultTerm)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PCCostGroup>(entity =>
            {
                entity.HasKey(e => e.PCCostGroupID)
                    .IsClustered(false);

                entity.ToTable("PCCostGroup");

                entity.HasIndex(e => e.Code, "IX_PCCostGroup_Code")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCGroupingLevelID, "IX_PCCostGroup_PCGroupingLevelID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCCostGroupID).ValueGeneratedNever();

                entity.Property(e => e.BudgetCostQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.BudgetCostValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetRevenueQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.BudgetRevenueValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.PCGroupingLevel)
                    .WithMany(p => p.PCCostGroups)
                    .HasForeignKey(d => d.PCGroupingLevelID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostGroup_PCGroupingLevel");
            });

            modelBuilder.Entity<PCCostGroupAnalysisField>(entity =>
            {
                entity.HasKey(e => e.PCCostGroupAnalysisFieldID)
                    .IsClustered(false);

                entity.ToTable("PCCostGroupAnalysisField");

                entity.HasIndex(e => e.PCAnalysisFieldValueID, "IX_PCCostGroupAnalysisField_PCAnalysisFieldValueID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.PCCostGroupID, e.PCAnalysisFieldID }, "IX_PCCostGroupAnalysisField_PCCostGroupID_PCAnalysisFieldID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCCostGroupAnalysisFieldID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCCostGroup)
                    .WithMany(p => p.PCCostGroupAnalysisFields)
                    .HasForeignKey(d => d.PCCostGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostGroupAnalysisField_PCCostGroup");
            });

            modelBuilder.Entity<PCCostItem>(entity =>
            {
                entity.HasKey(e => e.PCCostItemID)
                    .HasName("PK_ProjectItem")
                    .IsClustered(false);

                entity.ToTable("PCCostItem");

                entity.HasIndex(e => e.Code, "IX_PCCostItem_Code")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CostItemTypeID, "IX_PCCostItem_CostItemTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CostPCUnitOfMeasureID, "IX_PCCostItem_CostPCUnitOfMeasureID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OtherCostsPricingRuleID, "IX_PCCostItem_OtherCostsPricingRuleID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockIssuesPricingRuleID, "IX_PCCostItem_StockIssuesPricingRuleID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TimesheetPricingRuleID, "IX_PCCostItem_TimesheetPricingRuleID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCCostItemID).ValueGeneratedNever();

                entity.Property(e => e.BillRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BudgetCostQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.BudgetCostValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetRevenueQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.BudgetRevenueValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultExpenseNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultExpenseNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultExpenseNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultRevenueNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultRevenueNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultRevenueNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultWIPNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultWIPNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultWIPNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.MarkUpPercentage).HasColumnType("decimal(18, 15)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OverheadNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UpliftRatePercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpliftRateValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CostItemType)
                    .WithMany(p => p.PCCostItems)
                    .HasForeignKey(d => d.CostItemTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostItem_PCCostItemType");

                entity.HasOne(d => d.CostPCUnitOfMeasure)
                    .WithMany(p => p.PCCostItems)
                    .HasForeignKey(d => d.CostPCUnitOfMeasureID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostItem_PCUnitOfMeasure");

                entity.HasOne(d => d.OtherCostsPricingRule)
                    .WithMany(p => p.PCCostItemOtherCostsPricingRules)
                    .HasForeignKey(d => d.OtherCostsPricingRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostItem_OtherCostsPricingRule");

                entity.HasOne(d => d.StockIssuesPricingRule)
                    .WithMany(p => p.PCCostItemStockIssuesPricingRules)
                    .HasForeignKey(d => d.StockIssuesPricingRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostItem_StockIssuesPricingRule");

                entity.HasOne(d => d.TimesheetPricingRule)
                    .WithMany(p => p.PCCostItemTimesheetPricingRules)
                    .HasForeignKey(d => d.TimesheetPricingRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostItem_TimesheetPricingRule");
            });

            modelBuilder.Entity<PCCostItemAnalysisField>(entity =>
            {
                entity.HasKey(e => e.PCCostItemAnalysisFieldID)
                    .IsClustered(false);

                entity.ToTable("PCCostItemAnalysisField");

                entity.HasIndex(e => e.PCAnalysisFieldID, "IX_PCCostItemAnalysisField_PCAnalysisFieldID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCAnalysisFieldValueID, "IX_PCCostItemAnalysisField_PCAnalysisFieldValueID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCCostItemID, "IX_PCCostItemAnalysisField_PCCostItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.PCCostItemID, e.PCAnalysisFieldID }, "IX_PCCostItemAnalysisField_PCCostItemID_PCAnalysisFieldID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCCostItemAnalysisFieldID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCCostItem)
                    .WithMany(p => p.PCCostItemAnalysisFields)
                    .HasForeignKey(d => d.PCCostItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectItemAnalysisField_PCProjectItem");
            });

            modelBuilder.Entity<PCCostItemGroupVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCCostItemGroupVw");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCCostItemType>(entity =>
            {
                entity.HasKey(e => e.PCCostItemTypeID)
                    .IsClustered(false);

                entity.ToTable("PCCostItemType");

                entity.HasIndex(e => e.DefaultCostPCUnitOfMeasureID, "IX_PCCostItemType_DefaultCostPCUnitOfMeasureID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OtherCostsPricingRuleID, "IX_PCCostItemType_OtherCostsPricingRuleID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCOverheadUpliftRateModifierID, "IX_PCCostItemType_PCOverheadUpliftRateModifierID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCProjectItemStatusID, "IX_PCCostItemType_PCProjectItemStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockIssuesPricingRuleID, "IX_PCCostItemType_StockIssuesPricingRuleID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TimesheetPricingRuleID, "IX_PCCostItemType_TimesheetPricingRuleID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Title, "IX_PCCostItemType_Title")
                    .IsUnique();

                entity.HasIndex(e => e.PCCostItemTypeID, "PCCostItemTypeCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCCostItemTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultExpenseNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultExpenseNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultExpenseNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultRevenueNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultRevenueNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultRevenueNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultWIPNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultWIPNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultWIPNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.IsOverhead).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OverheadNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadUpliftRatePercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OverheadUpliftRateValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.DefaultCostPCUnitOfMeasure)
                    .WithMany(p => p.PCCostItemTypes)
                    .HasForeignKey(d => d.DefaultCostPCUnitOfMeasureID)
                    .HasConstraintName("FK_PCCostItemType_PCUnitOfMeasure");

                entity.HasOne(d => d.OtherCostsPricingRule)
                    .WithMany(p => p.PCCostItemTypeOtherCostsPricingRules)
                    .HasForeignKey(d => d.OtherCostsPricingRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostItemType_OtherCostsPricingRule");

                entity.HasOne(d => d.PCOverheadUpliftRateModifier)
                    .WithMany(p => p.PCCostItemTypes)
                    .HasForeignKey(d => d.PCOverheadUpliftRateModifierID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostItemType_PCOverheadUpliftRateModifier");

                entity.HasOne(d => d.StockIssuesPricingRule)
                    .WithMany(p => p.PCCostItemTypeStockIssuesPricingRules)
                    .HasForeignKey(d => d.StockIssuesPricingRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostItemType_StockIssuesPricingRule");

                entity.HasOne(d => d.TimesheetPricingRule)
                    .WithMany(p => p.PCCostItemTypeTimesheetPricingRules)
                    .HasForeignKey(d => d.TimesheetPricingRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostItemType_TimesheetPricingRule");
            });

            modelBuilder.Entity<PCCostItemTypeAnalFieldSetting>(entity =>
            {
                entity.HasKey(e => e.PCCostItemTypeAnalFieldSettingID)
                    .HasName("PK_PCCostItemTypeAnalysisFieldSetting")
                    .IsClustered(false);

                entity.ToTable("PCCostItemTypeAnalFieldSetting");

                entity.HasIndex(e => new { e.PCCostItemTypeID, e.PCAnalysisFieldID }, "IX_PCCostItemTypeAnalFieldSetting_PCCostItemTypeID_PCAnalysisFieldID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCCostItemTypeAnalFieldSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCCostItemType)
                    .WithMany(p => p.PCCostItemTypeAnalFieldSettings)
                    .HasForeignKey(d => d.PCCostItemTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCostItemTypeAnalysisFieldSetting_PCCostItemType");
            });

            modelBuilder.Entity<PCCostItemTypeFeatureSetting>(entity =>
            {
                entity.HasKey(e => e.PCCostItemTypeFeatureSettingID)
                    .HasName("PK_PCDisplayFeatureSetting")
                    .IsClustered(false);

                entity.ToTable("PCCostItemTypeFeatureSetting");

                entity.HasIndex(e => new { e.PCCostItemTypeID, e.PCDisplayFeatureID }, "IX_PCCostItemTypeFeatureSetting_PCCostItemTypeID_PCDisplayFeatureID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCCostItemTypeFeatureSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCCostItemType)
                    .WithMany(p => p.PCCostItemTypeFeatureSettings)
                    .HasForeignKey(d => d.PCCostItemTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCDisplayFeatureSetting_PCCostItemType");

                entity.HasOne(d => d.PCDisplayFeature)
                    .WithMany(p => p.PCCostItemTypeFeatureSettings)
                    .HasForeignKey(d => d.PCDisplayFeatureID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCDisplayFeatureSetting_PCDisplayFeature");
            });

            modelBuilder.Entity<PCCostItemTypeIntegrateSetting>(entity =>
            {
                entity.HasKey(e => e.PCCostItemTypeIntegrateSettingID)
                    .HasName("PK_PCIntegrationSetting")
                    .IsClustered(false);

                entity.ToTable("PCCostItemTypeIntegrateSetting");

                entity.HasIndex(e => new { e.PCCostItemTypeID, e.PCIntegrationOptionID }, "IX_PCCostItemTypeIntegrateSetting_PCCostItemTypeID_PCIntegrationOptionID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCCostItemTypeIntegrateSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCCostItemType)
                    .WithMany(p => p.PCCostItemTypeIntegrateSettings)
                    .HasForeignKey(d => d.PCCostItemTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCIntegrationSetting_PCCostItemType");

                entity.HasOne(d => d.PCIntegrationOption)
                    .WithMany(p => p.PCCostItemTypeIntegrateSettings)
                    .HasForeignKey(d => d.PCIntegrationOptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCIntegrationSetting_PCIntegrationOption");
            });

            modelBuilder.Entity<PCCreateProjectPreference>(entity =>
            {
                entity.ToTable("PCCreateProjectPreference");

                entity.Property(e => e.PCCreateProjectPreferenceID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PCDefaultIntegrationSetting>(entity =>
            {
                entity.HasKey(e => e.PCDefaultIntegrationSettingID)
                    .IsClustered(false);

                entity.ToTable("PCDefaultIntegrationSetting");

                entity.HasIndex(e => e.PCIntegrationOptionID, "IX_PCDefaultIntegrationSetting_PCIntegrationOptionID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCDefaultIntegrationSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCIntegrationOption)
                    .WithMany(p => p.PCDefaultIntegrationSettings)
                    .HasForeignKey(d => d.PCIntegrationOptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCDefaultIntegrationSetting_PCIntegrationOption");
            });

            modelBuilder.Entity<PCDisplayFeature>(entity =>
            {
                entity.ToTable("PCDisplayFeature");

                entity.Property(e => e.PCDisplayFeatureID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCDisplayFeatureGroup)
                    .WithMany(p => p.PCDisplayFeatures)
                    .HasForeignKey(d => d.PCDisplayFeatureGroupID)
                    .HasConstraintName("FK_PCDisplayFeature_PCDisplayFeatureGroup");
            });

            modelBuilder.Entity<PCDisplayFeatureGroup>(entity =>
            {
                entity.ToTable("PCDisplayFeatureGroup");

                entity.Property(e => e.PCDisplayFeatureGroupID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCEntryPostingStatus>(entity =>
            {
                entity.ToTable("PCEntryPostingStatus");

                entity.Property(e => e.PCEntryPostingStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCEntryType>(entity =>
            {
                entity.ToTable("PCEntryType");

                entity.Property(e => e.PCEntryTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCFinancialClassification>(entity =>
            {
                entity.ToTable("PCFinancialClassification");

                entity.Property(e => e.PCFinancialClassificationID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCGroupLevelAnalFieldSetting>(entity =>
            {
                entity.HasKey(e => e.PCGroupLevelAnalFieldSettingID)
                    .HasName("PK_PCGroupingLevelAnalysisFieldSetting")
                    .IsClustered(false);

                entity.ToTable("PCGroupLevelAnalFieldSetting");

                entity.HasIndex(e => new { e.PCGroupingLevelID, e.PCAnalysisFieldID }, "IX_PCGroupLevelAnalFieldSetting_PCGroupingLevelID_PCAnalysisFieldID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCGroupLevelAnalFieldSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCGroupingLevel)
                    .WithMany(p => p.PCGroupLevelAnalFieldSettings)
                    .HasForeignKey(d => d.PCGroupingLevelID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCGroupingLevelAnalysisFieldSetting_PCGroupingLevel");
            });

            modelBuilder.Entity<PCGroupLevelFeatureSetting>(entity =>
            {
                entity.HasKey(e => e.PCGroupLevelFeatureSettingID)
                    .HasName("PK_PCGroupingLevelDisplayFeatureSetting")
                    .IsClustered(false);

                entity.ToTable("PCGroupLevelFeatureSetting");

                entity.HasIndex(e => new { e.PCGroupingLevelID, e.PCDisplayFeatureID }, "IX_PCGroupLevelFeatureSetting_PCGroupingLevelID_PCDisplayFeatureID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCGroupLevelFeatureSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCDisplayFeature)
                    .WithMany(p => p.PCGroupLevelFeatureSettings)
                    .HasForeignKey(d => d.PCDisplayFeatureID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCGroupingLevelDisplayFeatureSetting_PCDisplayFeature");

                entity.HasOne(d => d.PCGroupingLevel)
                    .WithMany(p => p.PCGroupLevelFeatureSettings)
                    .HasForeignKey(d => d.PCGroupingLevelID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCGroupingLevelDisplayFeatureSetting_PCGroupingLevel");
            });

            modelBuilder.Entity<PCGroupingLevel>(entity =>
            {
                entity.HasKey(e => e.PCGroupingLevelID)
                    .IsClustered(false);

                entity.ToTable("PCGroupingLevel");

                entity.HasIndex(e => e.PCProjectItemStatusID, "IX_PCGroupingLevel_PCProjectItemStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Title, "IX_PCGroupingLevel_Title")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCGroupingLevelID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCIntegrationOption>(entity =>
            {
                entity.ToTable("PCIntegrationOption");

                entity.HasIndex(e => e.Name, "IX_PCIntegrationOption_Name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSModuleID, "IX_PCIntegrationOption_SYSModuleID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCIntegrationOptionID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSModule)
                    .WithMany(p => p.PCIntegrationOptions)
                    .HasForeignKey(d => d.SYSModuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCIntegrationOption_SYSModule");
            });

            modelBuilder.Entity<PCOverheadUpliftRateModifier>(entity =>
            {
                entity.ToTable("PCOverheadUpliftRateModifier");

                entity.Property(e => e.PCOverheadUpliftRateModifierID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCPriceModifierType>(entity =>
            {
                entity.ToTable("PCPriceModifierType");

                entity.Property(e => e.PCPriceModifierTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCPricingRuleMethodType>(entity =>
            {
                entity.ToTable("PCPricingRuleMethodType");

                entity.Property(e => e.PCPricingRuleMethodTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCProjectArchiveStatus>(entity =>
            {
                entity.ToTable("PCProjectArchiveStatus");

                entity.Property(e => e.PCProjectArchiveStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCProjectArchiveUpdateVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectArchiveUpdateVw");
            });

            modelBuilder.Entity<PCProjectArchiveVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectArchiveVw");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCProjectAuthoriser>(entity =>
            {
                entity.ToTable("PCProjectAuthoriser");

                entity.Property(e => e.PCProjectAuthoriserID).ValueGeneratedNever();
            });

            modelBuilder.Entity<PCProjectContact>(entity =>
            {
                entity.HasKey(e => e.PCProjectContactID)
                    .IsClustered(false);

                entity.ToTable("PCProjectContact");

                entity.HasIndex(e => e.PCProjectItemID, "IX_PCProjectContact_PCProjectItemID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCProjectContactID).ValueGeneratedNever();

                entity.Property(e => e.ContactAddress1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ContactAddress2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ContactAddress3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ContactAddress4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ContactCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EMail)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TelephoneNumber)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCProjectEntriesBilledVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectEntriesBilledVw");

                entity.Property(e => e.AmountBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AmountDocumentCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.GoodsAmountInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HumanResourceName)
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.InQueryIndicator)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PostingQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RevenueRateInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UpliftValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValueToBillInBaseCurrency).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<PCProjectEntriesInvoicedVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectEntriesInvoicedVw");

                entity.Property(e => e.AmountBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AmountDocumentCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.HumanResourceName)
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.InQueryIndicator)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PostingQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RevenueRateInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TotalBaseCurrency).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ValueToBillInBaseCurrency).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<PCProjectEntriesOutstandingVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectEntriesOutstandingVw");

                entity.Property(e => e.ChargeRateInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostRateInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CustomerAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FinalisationBillDate).HasColumnType("datetime");

                entity.Property(e => e.FinalisationBillNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GoodsAmountInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HumanResourceName)
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.InQueryIndicator)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QuantityBilled).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.RevenueRateInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TotalBaseCurrency).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.TotalDocumentCurrency).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UpliftValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValueToBillInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WIPValueInBaseCurrency).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<PCProjectEntry>(entity =>
            {
                entity.HasKey(e => e.PCProjectEntryID)
                    .IsClustered(false);

                entity.ToTable("PCProjectEntry");

                entity.HasIndex(e => e.BillStatusID, "IX_PCProjectEntry_BillStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentCurrencyID, "IX_PCProjectEntry_DocumentCurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NominalAccountingPeriodID, "IX_PCProjectEntry_NominalAccountingPeriodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCFinancialClassificationID, "IX_PCProjectEntry_PCFinancialClassificationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCProjectEntryDescriptorID, "IX_PCProjectEntry_PCProjectEntryDescriptorID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCProjectEntryID, "IX_PCProjectEntry_PCProjectEntryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProjectItemID, "IX_PCProjectEntry_ProjectItemID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TransactionDate, e.ProjectItemID, e.GoodsAmountInBaseCurrency, e.UpliftValueInBaseCurrency, e.Quantity, e.PCFinancialClassificationID, e.EntryTypeID }, "IX_PCProjectEntry_ProjectSearch")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.PCFinancialClassificationID, e.ProjectItemID, e.PCProjectEntryID, e.PCProjectEntryDescriptorID, e.Quantity, e.GoodsAmountInBaseCurrency, e.UpliftValueInBaseCurrency, e.TransactionDate, e.ValueToBillInBaseCurrency, e.EntryTypeID }, "IX_PCProjectEntry_ProjectSearchVw")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceEntryID, "IX_PCProjectEntry_SourceEntryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSHumanResourceID, "IX_PCProjectEntry_TSHumanResourceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.URN, e.TransactionDate }, "IX_PCProjectEntry_URN_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UnitOfMeasure, "IX_PCProjectEntry_UnitOfMeasure")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCProjectEntryID).ValueGeneratedNever();

                entity.Property(e => e.AmountBilledInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BillStatusID).HasDefaultValueSql("((3))");

                entity.Property(e => e.ChargeRateInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChargeRateInDocCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CostRateInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CostRateInDocCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountAmountInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountAmountInDocCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FinalisationBillDate).HasColumnType("datetime");

                entity.Property(e => e.GoodsAmountInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsAmountInDocCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InQueryIndicator)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevenueRateInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RevenueRateInDocCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SettlementDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StockItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxAmountInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxAmountInDocCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalOverheadInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalOverheadInDocCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TransactionAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UnitDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.UpliftValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpliftValueInDocCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.User)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValueToBillInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValueToBillInDocCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WIPNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WIPNominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WIPNominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WIPValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WIPValueInDocCurrency).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.BillStatus)
                    .WithMany(p => p.PCProjectEntries)
                    .HasForeignKey(d => d.BillStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectEntry_PCBillStatus");

                entity.HasOne(d => d.DocumentCurrency)
                    .WithMany(p => p.PCProjectEntries)
                    .HasForeignKey(d => d.DocumentCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectEntry_SYSCurrency");

                entity.HasOne(d => d.EntryType)
                    .WithMany(p => p.PCProjectEntries)
                    .HasForeignKey(d => d.EntryTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectEntry_PCEntryType");

                entity.HasOne(d => d.FinalisationBill)
                    .WithMany(p => p.PCProjectEntries)
                    .HasForeignKey(d => d.FinalisationBillID)
                    .HasConstraintName("FK_PCProjectEntry_BLBill");

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.PCProjectEntries)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_PCProjectEntry_SYSAccountingPeriod");

                entity.HasOne(d => d.PCFinancialClassification)
                    .WithMany(p => p.PCProjectEntries)
                    .HasForeignKey(d => d.PCFinancialClassificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectEntry_PCFinancialClassification");

                entity.HasOne(d => d.PCProjectEntryDescriptor)
                    .WithMany(p => p.PCProjectEntries)
                    .HasForeignKey(d => d.PCProjectEntryDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectEntry_PCProjectEntryDescripter");

                entity.HasOne(d => d.TSHumanResource)
                    .WithMany(p => p.PCProjectEntries)
                    .HasForeignKey(d => d.TSHumanResourceID)
                    .HasConstraintName("FK_PCProjectEntry_TSHumanResource");

                entity.HasOne(d => d.UnitOfMeasureNavigation)
                    .WithMany(p => p.PCProjectEntries)
                    .HasForeignKey(d => d.UnitOfMeasure)
                    .HasConstraintName("FK_PCProjectEntry_PCUnitOfMeasure");
            });

            modelBuilder.Entity<PCProjectEntryDescriptor>(entity =>
            {
                entity.ToTable("PCProjectEntryDescriptor");

                entity.Property(e => e.PCProjectEntryDescriptorID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCProjectEntryPosting>(entity =>
            {
                entity.HasKey(e => e.PCProjectEntryPostingID)
                    .IsClustered(false);

                entity.ToTable("PCProjectEntryPosting");

                entity.HasIndex(e => e.INVInvoiceCreditLineID, "IX_PCProjectEntryPosting_INVInvoiceCreditLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCEntryPostingStatusID, "IX_PCProjectEntryPosting_PCEntryPostingStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCProjectEntryID, "IX_PCProjectEntryPosting_PCProjectEntryID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCProjectEntryPostingID).ValueGeneratedNever();

                entity.Property(e => e.AmountBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AmountDocumentCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ProjectEntryPostingDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SYSCurrencyID).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.INVInvoiceCreditLine)
                    .WithMany(p => p.PCProjectEntryPostings)
                    .HasForeignKey(d => d.INVInvoiceCreditLineID)
                    .HasConstraintName("FK_PCProjectEntryPosting_INVInvoiceCreditLine");

                entity.HasOne(d => d.PCEntryPostingStatus)
                    .WithMany(p => p.PCProjectEntryPostings)
                    .HasForeignKey(d => d.PCEntryPostingStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectEntryPosting_PCEntryPostingStatusID");

                entity.HasOne(d => d.PCProjectEntry)
                    .WithMany(p => p.PCProjectEntryPostings)
                    .HasForeignKey(d => d.PCProjectEntryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectEntryPosting_PCProjectEntry");
            });

            modelBuilder.Entity<PCProjectEntryVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectEntryVw");

                entity.Property(e => e.ActualGoodsAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ActualUpliftValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountBilledInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChargeRateInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChargeRateInDocCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CostRateInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CostRateInDocCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DiscountAmountInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountAmountInDocCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FinalisationBillDate).HasColumnType("datetime");

                entity.Property(e => e.FinalisationBillNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FinalisedCostValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinalisedUpliftValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsAmountInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsAmountInDocCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InQueryIndicator)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PotentialGoodsAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PotentialUpliftValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevenueRateInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RevenueRateInDocCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SettlementDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StockItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmountInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxAmountInDocCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalOverheadInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalOverheadInDocCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TransactionAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UnitDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.UpliftValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpliftValueInDocCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.User)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValueToBillInBaseCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValueToBillInDocCurrency).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WIPNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.WIPNominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.WIPNominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.WIPValueInBaseCurrency).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<PCProjectLevel>(entity =>
            {
                entity.HasKey(e => e.PCProjectLevelID)
                    .IsClustered(false);

                entity.ToTable("PCProjectLevel");

                entity.HasIndex(e => e.Title, "IX_PCProjectLevel_Title")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCProjectLevelID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.PCProjectLevelBillingMethod)
                    .WithMany(p => p.PCProjectLevels)
                    .HasForeignKey(d => d.PCProjectLevelBillingMethodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectLevel_PCBillingMethod");
            });

            modelBuilder.Entity<PCProjectLevelBillingMethod>(entity =>
            {
                entity.ToTable("PCProjectLevelBillingMethod");

                entity.Property(e => e.PCProjectLevelBillingMethodID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCProjectLvlAnalFieldSetting>(entity =>
            {
                entity.HasKey(e => e.PCProjectLvlAnalFieldSettingID)
                    .HasName("PK_PCProjectLevelAnalysisFieldSetting")
                    .IsClustered(false);

                entity.ToTable("PCProjectLvlAnalFieldSetting");

                entity.HasIndex(e => new { e.PCProjectLevelID, e.PCAnalysisFieldID }, "IX_PCProjectLvlAnalFieldSetting_PCProjectLevelID_PCAnalysisFieldID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCProjectLvlAnalFieldSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCProjectLevel)
                    .WithMany(p => p.PCProjectLvlAnalFieldSettings)
                    .HasForeignKey(d => d.PCProjectLevelID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectLevelAnalysisFieldSetting_PCProjectLevel");
            });

            modelBuilder.Entity<PCProjectLvlFeatureSetting>(entity =>
            {
                entity.HasKey(e => e.PCProjectLvlFeatureSettingID)
                    .HasName("PK_PCProjectLevelDisplayFeatureSetting")
                    .IsClustered(false);

                entity.ToTable("PCProjectLvlFeatureSetting");

                entity.HasIndex(e => new { e.PCDisplayFeatureID, e.PCProjectLevelID }, "IX_PCProjectLvlFeatureSetting_PCDisplayFeatureID_PCProjectLevelID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCProjectLvlFeatureSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCDisplayFeature)
                    .WithMany(p => p.PCProjectLvlFeatureSettings)
                    .HasForeignKey(d => d.PCDisplayFeatureID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectLevelDisplayFeatureSetting_PCDisplayFeature");

                entity.HasOne(d => d.PCProjectLevel)
                    .WithMany(p => p.PCProjectLvlFeatureSettings)
                    .HasForeignKey(d => d.PCProjectLevelID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectLevelDisplayFeatureSetting_PCProjectLevel");
            });

            modelBuilder.Entity<PCProjectResourceLink>(entity =>
            {
                entity.HasKey(e => e.PCProjectResourceLinkID)
                    .IsClustered(false);

                entity.ToTable("PCProjectResourceLink");

                entity.HasIndex(e => new { e.ProjectID, e.ResourceID }, "IX_PCProjectResourceLink_ProjectID_ResourceID")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCProjectResourceLinkID).ValueGeneratedNever();

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.PCProjectResourceLinks)
                    .HasForeignKey(d => d.ResourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectResourceLink_TSHumanResource");
            });

            modelBuilder.Entity<PCProjectResurrectVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectResurrectVw");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCProjectRootStatusVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectRootStatusVw");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCProjectSearchVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectSearchVw");

                entity.Property(e => e.AnalysisField1CustomerAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField1DateValue).HasColumnType("datetime");

                entity.Property(e => e.AnalysisField1EmployeeReference)
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField1NumericValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisField1StockName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField1SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField1TextValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField2CustomerAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField2DateValue).HasColumnType("datetime");

                entity.Property(e => e.AnalysisField2EmployeeReference)
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField2NumericValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisField2StockName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField2SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField2TextValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField3CustomerAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField3DateValue).HasColumnType("datetime");

                entity.Property(e => e.AnalysisField3EmployeeReference)
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField3NumericValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisField3StockName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField3SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField3TextValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField4CustomerAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField4DateValue).HasColumnType("datetime");

                entity.Property(e => e.AnalysisField4EmployeeReference)
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField4NumericValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisField4StockName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField4SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField4TextValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField5CustomerAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField5DateValue).HasColumnType("datetime");

                entity.Property(e => e.AnalysisField5EmployeeReference)
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField5NumericValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisField5StockName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField5SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisField5TextValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BudgetCostQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BudgetCostQuantityVariance).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BudgetCostValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetCostValueVariance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetProfit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetRevenueQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BudgetRevenueQuantityVariance).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BudgetRevenueValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetRevenueValueVariance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommittedCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExpectedRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LastBillDate).HasColumnType("datetime");

                entity.Property(e => e.LastCostDate).HasColumnType("datetime");

                entity.Property(e => e.PriceQuoted).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectCustomer)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectLevel)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectStatusDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCostQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalRevenueQuantity).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<PCProjectStatusUpdateVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectStatusUpdateVw");
            });

            modelBuilder.Entity<PCProjectURN>(entity =>
            {
                entity.ToTable("PCProjectURN");

                entity.Property(e => e.PCProjectURNID).ValueGeneratedNever();
            });

            modelBuilder.Entity<PCProjectUserProfile>(entity =>
            {
                entity.ToTable("PCProjectUserProfile");

                entity.Property(e => e.PCProjectUserProfileID).ValueGeneratedNever();

                entity.HasOne(d => d.TSPerson)
                    .WithMany(p => p.PCProjectUserProfiles)
                    .HasForeignKey(d => d.TSPersonID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCProjectUserProfile_TSPerson");
            });

            modelBuilder.Entity<PCProjectsForCostAnalysisVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectsForCostAnalysisVw");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCProjectsForCostAndRevenueAnalysisVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectsForCostAndRevenueAnalysisVw");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCProjectsForRevenueAnalysisVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCProjectsForRevenueAnalysisVw");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCResourceType>(entity =>
            {
                entity.ToTable("PCResourceType");

                entity.Property(e => e.PCResourceTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCSOPOrderQuotationWithProjectEntriesVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCSOPOrderQuotationWithProjectEntriesVw");
            });

            modelBuilder.Entity<PCSOPOrderQuotationWithoutProjectEntriesVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCSOPOrderQuotationWithoutProjectEntriesVw");
            });

            modelBuilder.Entity<PCSetting>(entity =>
            {
                entity.ToTable("PCSetting");

                entity.HasIndex(e => e.PCBudgetLevelID, "IX_PCSetting_PCBudgetLevelID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCCreateProjectPreferenceID, "IX_PCSetting_PCCreateProjectPreferenceID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCSettingID).ValueGeneratedNever();

                entity.Property(e => e.AccrualsNominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccrualsNominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccrualsNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HierarchySeparator)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostPaymentAsCostElseRevenue)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PostReceiptAsCostElseRevenue)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WIPNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WIPNominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WIPNominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.PCBudgetLevel)
                    .WithMany(p => p.PCSettings)
                    .HasForeignKey(d => d.PCBudgetLevelID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCSetting_PCProjectBudgetLevel");

                entity.HasOne(d => d.PCCreateProjectPreference)
                    .WithMany(p => p.PCSettings)
                    .HasForeignKey(d => d.PCCreateProjectPreferenceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCSetting_PCCreateProjectPreference");
            });

            modelBuilder.Entity<PCSimpleAccrualVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCSimpleAccrualVw");
            });

            modelBuilder.Entity<PCSimpleTransactionVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCSimpleTransactionVw");

                entity.Property(e => e.GoodsAmountInBaseCurrency).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<PCTimeMaterialsPriceRule>(entity =>
            {
                entity.ToTable("PCTimeMaterialsPriceRule");

                entity.Property(e => e.PCTimeMaterialsPriceRuleID).ValueGeneratedNever();

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsLabour)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsOther)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsStock)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PCPriceModifierTypeID).HasDefaultValueSql("((1))");

                entity.Property(e => e.PCPricingRuleMethodTypeID).HasDefaultValueSql("((1))");

                entity.Property(e => e.RuleName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.PCPriceModifierType)
                    .WithMany(p => p.PCTimeMaterialsPriceRules)
                    .HasForeignKey(d => d.PCPriceModifierTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCTimeMaterialsPriceRule_PCPriceModifierType");

                entity.HasOne(d => d.PCPricingRuleMethodType)
                    .WithMany(p => p.PCTimeMaterialsPriceRules)
                    .HasForeignKey(d => d.PCPricingRuleMethodTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCTimeMaterialsPriceRule_PCPricingRuleMethodType");
            });

            modelBuilder.Entity<PCUniqueProjectCode>(entity =>
            {
                entity.ToTable("PCUniqueProjectCode");

                entity.Property(e => e.PCUniqueProjectCodeID).ValueGeneratedNever();
            });

            modelBuilder.Entity<PCUnitOfMeasure>(entity =>
            {
                entity.HasKey(e => e.PCUnitOfMeasureID)
                    .IsClustered(false);

                entity.ToTable("PCUnitOfMeasure");

                entity.HasIndex(e => e.Name, "IX_PCUnitOfMeasure_Name")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PCUnitOfMeasureID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PCUnpostedInvoiceCreditVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PCUnpostedInvoiceCreditVw");
            });

            modelBuilder.Entity<PLAccountInformationView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLAccountInformationView");

                entity.Property(e => e.mmsplai_AccountIsOnHold)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mmsplai_AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmsplai_ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.mmsplai_CurrencyName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmsplai_PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.mmsplai_SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmsplai_SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLAccountMemo>(entity =>
            {
                entity.HasKey(e => e.PLAccountMemoID)
                    .IsClustered(false);

                entity.ToTable("PLAccountMemo");

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLAccountMemo_PLSupplierAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLAccountMemoID).ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MemoCreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MemoText)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TimeAndDateMemoCreated).HasColumnType("datetime");

                entity.Property(e => e.TimeAndDateMemoLastUpdated).HasColumnType("datetime");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLAccountMemos)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLAccountMemo_PLSupplierAccount");

                entity.HasOne(d => d.SYSAccountMemoType)
                    .WithMany(p => p.PLAccountMemos)
                    .HasForeignKey(d => d.SYSAccountMemoTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLAccountMemo_SYSAccountMemoType");
            });

            modelBuilder.Entity<PLAllocHeaderPostedEntryVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLAllocHeaderPostedEntryVw");

                entity.Property(e => e.AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.QueryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotalDebitAllocation).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLAllocationHeader>(entity =>
            {
                entity.HasKey(e => e.PLAllocationHeaderID)
                    .IsClustered(false);

                entity.ToTable("PLAllocationHeader");

                entity.HasIndex(e => e.PLAllocationTypeID, "IX_PLAllocationHeader_PLAllocationTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLAllocationHeader_PLSupplierAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLAllocationHeaderID).ValueGeneratedNever();

                entity.Property(e => e.AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsComplete)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.PLAllocationType)
                    .WithMany(p => p.PLAllocationHeaders)
                    .HasForeignKey(d => d.PLAllocationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLAllocationHeader_PLAllocationType");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLAllocationHeaders)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLAllocationHeader_PLSupplierAccount");
            });

            modelBuilder.Entity<PLAllocationTran>(entity =>
            {
                entity.HasKey(e => e.PLAllocationTranID)
                    .HasName("PK_PLAllocationTransaction")
                    .IsClustered(false);

                entity.ToTable("PLAllocationTran");

                entity.HasIndex(e => e.PLAllocationHeaderID, "IX_PLAllocationTransaction_PLAllocationHeaderID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLPostedSupplierTranID, "IX_PLAllocationTransaction_PLPostedSupplierAccountTransactionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLAllocationTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PLAllocationHeader)
                    .WithMany(p => p.PLAllocationTrans)
                    .HasForeignKey(d => d.PLAllocationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLAllocationTransaction_PLAllocationHeader");

                entity.HasOne(d => d.PLPostedSupplierTran)
                    .WithMany(p => p.PLAllocationTrans)
                    .HasForeignKey(d => d.PLPostedSupplierTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLAllocationTransaction_PLPostedSupplierAccountTransaction");
            });

            modelBuilder.Entity<PLAllocationType>(entity =>
            {
                entity.ToTable("PLAllocationType");

                entity.Property(e => e.PLAllocationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLAnalysisPeriod>(entity =>
            {
                entity.HasKey(e => e.PLAnalysisPeriodID)
                    .HasName("PK_TradingAnalysisPeriod")
                    .IsClustered(false);

                entity.ToTable("PLAnalysisPeriod");

                entity.HasIndex(e => e.EndDate, "IX_PLAnalysisPeriod_EndDate")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLAnalysisPeriodID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PeriodReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<PLFactorHouse>(entity =>
            {
                entity.HasKey(e => e.PLFactorHouseID)
                    .IsClustered(false);

                entity.ToTable("PLFactorHouse");

                entity.HasIndex(e => e.Name, "IX_PLFactorHouse_Name")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLFactorHouseID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TheirReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLFactorHouseContact>(entity =>
            {
                entity.HasKey(e => e.PLFactorHouseContactID)
                    .IsClustered(false);

                entity.ToTable("PLFactorHouseContact");

                entity.HasIndex(e => e.PLFactorHouseID, "IX_PLFactorHouseContact_PLFactorHouseID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSContactTypeID, "IX_PLFactorHouseContact_SYSContactTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLFactorHouseContactID).ValueGeneratedNever();

                entity.Property(e => e.ContactAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PLFactorHouse)
                    .WithMany(p => p.PLFactorHouseContacts)
                    .HasForeignKey(d => d.PLFactorHouseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLFactorHouseContact_PLFactorHouse");

                entity.HasOne(d => d.SYSContactType)
                    .WithMany(p => p.PLFactorHouseContacts)
                    .HasForeignKey(d => d.SYSContactTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLFactorHouseContact_SYSContactType");
            });

            modelBuilder.Entity<PLFactorHouseLocation>(entity =>
            {
                entity.HasKey(e => e.PLFactorHouseLocationID)
                    .IsClustered(false);

                entity.ToTable("PLFactorHouseLocation");

                entity.HasIndex(e => e.PLFactorHouseID, "IX_PLFactorHouseLocation_PLFactorHouseID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderLocationTypeID, "IX_PLFactorHouseLocation_SYSTraderLocationTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLFactorHouseLocationID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.PLFactorHouse)
                    .WithMany(p => p.PLFactorHouseLocations)
                    .HasForeignKey(d => d.PLFactorHouseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLFactorHouseLocation_PLFactorHouse");

                entity.HasOne(d => d.SYSTraderLocationType)
                    .WithMany(p => p.PLFactorHouseLocations)
                    .HasForeignKey(d => d.SYSTraderLocationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLFactorHouseLocation_SYSTraderLocationType");
            });

            modelBuilder.Entity<PLGenerateSuggestPaymentVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLGenerateSuggestPaymentVw");

                entity.Property(e => e.AllocatedValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.GoodsValueInAccountCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QueryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLHistRevalAllocationTran>(entity =>
            {
                entity.ToTable("PLHistRevalAllocationTran");

                entity.Property(e => e.PLHistRevalAllocationTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreAllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTransactionMovedToHistory).HasColumnType("datetime");

                entity.Property(e => e.DocumentToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.ExchangeGainLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.PLHistRevalAllocationTrans)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_PLHistRevalAllocationTran_SYSAccountingPeriod");

                entity.HasOne(d => d.PLHistoricalSupplierTran)
                    .WithMany(p => p.PLHistRevalAllocationTrans)
                    .HasForeignKey(d => d.PLHistoricalSupplierTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLHistRevalAllocationTran_PLHistoricalSupplierTran");

                entity.HasOne(d => d.SYSTraderRevalAllocType)
                    .WithMany(p => p.PLHistRevalAllocationTrans)
                    .HasForeignKey(d => d.SYSTraderRevalAllocTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLHistRevalAllocationTran_SYSTraderRevalAllocType");
            });

            modelBuilder.Entity<PLHistoricalSupplierTran>(entity =>
            {
                entity.HasKey(e => e.PLHistoricalSupplierTranID)
                    .HasName("PK_PLHistoricalSupplierAccountTransaction")
                    .IsClustered(false);

                entity.ToTable("PLHistoricalSupplierTran");

                entity.HasIndex(e => e.CBAccountID, "IX_PLHistoricalSupplierAccountTransaction_CBAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLHistoricalSupplierAccountTransaction_PLSupplierAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.PLSupplierAccountID, e.TransactionReference }, "IX_PLHistoricalSupplierAccountTransaction_PLSupplierAccountID_TransactionReference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderTranTypeID, "IX_PLHistoricalSupplierAccountTransaction_SYSTraderTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_PLHistoricalSupplierAccountTransaction_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransactionDate, "IX_PLHistoricalSupplierTran_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLHistoricalSupplierTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTransactionMovedToHistory).HasColumnType("datetime");

                entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentToAccountCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DocumentToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EffectiveExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FullSettlementDate).HasColumnType("datetime");

                entity.Property(e => e.GoodsValueInAccountCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.PurControlValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QueryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.PLHistoricalSupplierTrans)
                    .HasForeignKey(d => d.CBAccountID)
                    .HasConstraintName("FK_PLHistoricalSupplierAccountTransaction_CBAccount");

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.PLHistoricalSupplierTrans)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_PLHistoricalSupplierTran_SYSAccountingPeriod");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLHistoricalSupplierTrans)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLHistoricalSupplierAccountTransaction_PLSupplierAccount");

                entity.HasOne(d => d.SYSCorrectionTranType)
                    .WithMany(p => p.PLHistoricalSupplierTrans)
                    .HasForeignKey(d => d.SYSCorrectionTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLHistoricalSupplierTran_SYSCorrectionTranType");

                entity.HasOne(d => d.SYSTraderGenerateReasonType)
                    .WithMany(p => p.PLHistoricalSupplierTrans)
                    .HasForeignKey(d => d.SYSTraderGenerateReasonTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLHistoricalSupplierAccountTransaction_SYSTraderGenerationReasonType");

                entity.HasOne(d => d.SYSTraderTranType)
                    .WithMany(p => p.PLHistoricalSupplierTrans)
                    .HasForeignKey(d => d.SYSTraderTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLHistoricalSupplierAccountTransaction_SYSTraderTransactionType");
            });

            modelBuilder.Entity<PLLiveAndHistRevAllocTranView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLLiveAndHistRevAllocTranView");

                entity.Property(e => e.CoreAllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentToBaseCurrencyRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.ExchangeGainLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLPaymentDocumentType>(entity =>
            {
                entity.ToTable("PLPaymentDocumentType");

                entity.Property(e => e.PLPaymentDocumentTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLPaymentGroup>(entity =>
            {
                entity.HasKey(e => e.PLPaymentGroupID)
                    .IsClustered(false);

                entity.ToTable("PLPaymentGroup");

                entity.HasIndex(e => e.PLPaymentDocumentTypeID, "IX_PLPaymentGroup_PLPaymentDocumentTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentGroupNumber, "IX_PLPaymentGroup_PaymentGroupNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLPaymentGroupID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PLPaymentDocumentType)
                    .WithMany(p => p.PLPaymentGroups)
                    .HasForeignKey(d => d.PLPaymentDocumentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPaymentGroup_PLPaymentMethod");
            });

            modelBuilder.Entity<PLPendNLAnalysisBatchTran>(entity =>
            {
                entity.HasKey(e => e.PLPendNLAnalysisBatchTranID)
                    .HasName("PK_PLPendingNominalAnalysisBatchTransaction")
                    .IsClustered(false);

                entity.ToTable("PLPendNLAnalysisBatchTran");

                entity.HasIndex(e => e.PLPendSupplierBatchTranID, "IX_PLPendingNominalAnalysisBatchTransaction_PLPendingSupplierAccountBatchTransactionID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLPendNLAnalysisBatchTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAnalysisNarrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TransactionAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.PLPendSupplierBatchTran)
                    .WithMany(p => p.PLPendNLAnalysisBatchTrans)
                    .HasForeignKey(d => d.PLPendSupplierBatchTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingNominalAnalysisBatchTransaction_PLPendingSupplierAccountBatchTransaction");
            });

            modelBuilder.Entity<PLPendNLAnalysisTran>(entity =>
            {
                entity.HasKey(e => e.PLPendNLAnalysisTranID)
                    .HasName("PK_PLPendingNominalAnalysis")
                    .IsClustered(false);

                entity.ToTable("PLPendNLAnalysisTran");

                entity.HasIndex(e => e.PLPendSupplierTranID, "IX_PLPendingNominalAnalysisTransaction_PLPendingSupplierAccountTransactionID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLPendNLAnalysisTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAnalysisNarrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TransactionAnalysisCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.PLPendSupplierTran)
                    .WithMany(p => p.PLPendNLAnalysisTrans)
                    .HasForeignKey(d => d.PLPendSupplierTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingNominalAnalysisTransaction_PLPendingSupplierAccountTransaction");
            });

            modelBuilder.Entity<PLPendSupplierAccount>(entity =>
            {
                entity.HasKey(e => e.PLPendSupplierAccountID)
                    .HasName("PK_PLPendingSupplierAccount")
                    .IsClustered(false);

                entity.ToTable("PLPendSupplierAccount");

                entity.HasIndex(e => e.SupplierAccountNumber, "IX_PLPendingSupplierAccount_SupplierAccountNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLPendSupplierAccountID).ValueGeneratedNever();

                entity.Property(e => e.AccountBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AccountOpened).HasColumnType("datetime");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ApplicationDate).HasColumnType("datetime");

                entity.Property(e => e.BankAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BankAccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BankAdditionalReference)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BankBACSReference)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BankBICNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.BankIBANNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BankNonUKSortCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BankPaymentReference)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BankRollNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BankSortCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueEmail)
                    .IsRequired()
                    .HasMaxLength(227)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueFaxAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueFaxCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueFaxSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueMobileAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueMobileCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueMobileSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueTelephoneAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueTelephoneCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueTelephoneSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueWebsite)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreditBureauName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreditPositionName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreditReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CurrencyISOCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DateAccountDetailsLastChanged).HasColumnType("datetime");

                entity.Property(e => e.DateEuroAccountCopied).HasColumnType("datetime");

                entity.Property(e => e.DateOfLastTransaction).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultNominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultNominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultOrderPriority)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EarlySettlementDiscountPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EuroAccountNumberCopiedFromTo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastCreditReview).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainFaxAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainFaxCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainFaxSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainTelephoneAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainTelephoneCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainTelephoneSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainWebsite)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NextCreditReview).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountShortName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRegistrationNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TradingTerms)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TransactionEMail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValueOfCurrentOrdersInPOP).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.DefaultSYSTaxRate)
                    .WithMany(p => p.PLPendSupplierAccounts)
                    .HasForeignKey(d => d.DefaultSYSTaxRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccount_SYSTaxRate");

                entity.HasOne(d => d.PLPaymentGroup)
                    .WithMany(p => p.PLPendSupplierAccounts)
                    .HasForeignKey(d => d.PLPaymentGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccount_PLPaymentGroup");

                entity.HasOne(d => d.SYSAccountStatus)
                    .WithMany(p => p.PLPendSupplierAccounts)
                    .HasForeignKey(d => d.SYSAccountStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendSupplierAccount_SYSAccountStatus");

                entity.HasOne(d => d.SYSAccountType)
                    .WithMany(p => p.PLPendSupplierAccounts)
                    .HasForeignKey(d => d.SYSAccountTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccount_SYSAccountType");

                entity.HasOne(d => d.SYSExchangeRateType)
                    .WithMany(p => p.PLPendSupplierAccounts)
                    .HasForeignKey(d => d.SYSExchangeRateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccount_SYSExchangeRateType");

                entity.HasOne(d => d.SYSPaymentTermsBasis)
                    .WithMany(p => p.PLPendSupplierAccounts)
                    .HasForeignKey(d => d.SYSPaymentTermsBasisID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccount_SYSPaymentTermsBasis");
            });

            modelBuilder.Entity<PLPendSupplierAnalysis>(entity =>
            {
                entity.HasKey(e => e.PLPendSupplierAnalysisID)
                    .HasName("PK_PLPendingSupplierAccountAnalysis")
                    .IsClustered(false);

                entity.ToTable("PLPendSupplierAnalysis");

                entity.HasIndex(e => e.PLPendSupplierAccountID, "IX_PLPendingSupplierAccountAnalysis_PLPendingSupplierAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLPendSupplierAnalysisID).ValueGeneratedNever();

                entity.Property(e => e.AnalysisName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisValue)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PLPendSupplierAccount)
                    .WithMany(p => p.PLPendSupplierAnalyses)
                    .HasForeignKey(d => d.PLPendSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccountAnalysis_PLPendingSupplierAccount");
            });

            modelBuilder.Entity<PLPendSupplierBatch>(entity =>
            {
                entity.HasKey(e => e.PLPendSupplierBatchID)
                    .HasName("PK_PLPendingSupplierAccountBatch")
                    .IsClustered(false);

                entity.ToTable("PLPendSupplierBatch");

                entity.HasIndex(e => e.PLPendSupplierBatchID, "IX_PLPendingSupplierAccountBatch_BatchTitle")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderTranTypeID, "IX_PLPendingSupplierAccountBatch_SYSTraderTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLPendSupplierBatchID).ValueGeneratedNever();

                entity.Property(e => e.ActualBatchTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BatchCreatedByUserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BatchCreatedDate).HasColumnType("datetime");

                entity.Property(e => e.BatchLastAmendedDate).HasColumnType("datetime");

                entity.Property(e => e.BatchTitle)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BatchTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSTraderTranType)
                    .WithMany(p => p.PLPendSupplierBatches)
                    .HasForeignKey(d => d.SYSTraderTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccountBatch_SYSTraderTransactionType");
            });

            modelBuilder.Entity<PLPendSupplierBatchTran>(entity =>
            {
                entity.HasKey(e => e.PLPendSupplierBatchTranID)
                    .HasName("PK_PLPendingSupplierAccountBatchTransaction")
                    .IsClustered(false);

                entity.ToTable("PLPendSupplierBatchTran");

                entity.HasIndex(e => e.CBAccountID, "IX_PLPendingSupplierAccountBatchTransaction_CBAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ChequeCurrencyID, "IX_PLPendingSupplierAccountBatchTransaction_ChequeCurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLPendSupplierBatchID, "IX_PLPendingSupplierAccountBatchTransaction_PLPendingSupplierAccountBatchID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLPendingSupplierAccountBatchTransaction_PLSupplierAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLPendSupplierBatchTranID, "PLPendSupplierBatchTranCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLPendSupplierBatchTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BankChequeToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BankNominalAccountName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BankNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.BankNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BankNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ChequeToAccountCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentToAccountExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DocumentToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueInAccountCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentDueDate).HasColumnType("datetime");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TraderChequeValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.PLPendSupplierBatchTrans)
                    .HasForeignKey(d => d.CBAccountID)
                    .HasConstraintName("FK_PLPendingSupplierAccountBatchTransaction_CBAccount");

                entity.HasOne(d => d.ChequeCurrency)
                    .WithMany(p => p.PLPendSupplierBatchTrans)
                    .HasForeignKey(d => d.ChequeCurrencyID)
                    .HasConstraintName("FK_PLPendingSupplierAccountBatchTransaction_SYSCurrency");

                entity.HasOne(d => d.PLPendSupplierBatch)
                    .WithMany(p => p.PLPendSupplierBatchTrans)
                    .HasForeignKey(d => d.PLPendSupplierBatchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccountBatchTransaction_PLPendingSupplierAccountBatch");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLPendSupplierBatchTrans)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccountBatchTransaction_PLSupplierAccount");
            });

            modelBuilder.Entity<PLPendSupplierTran>(entity =>
            {
                entity.HasKey(e => e.PLPendSupplierTranID)
                    .HasName("PK_PLPendingSupplierAccountTransaction")
                    .IsClustered(false);

                entity.ToTable("PLPendSupplierTran");

                entity.HasIndex(e => e.CBAccountID, "IX_PLPendingSupplierAccountTransaction_CBAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLPendingSupplierAccountTransaction_PLSupplierAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.PLSupplierAccountID, e.TransactionReference }, "IX_PLPendingSupplierAccountTransaction_PLSupplierAccountID_TransactionReference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderTranTypeID, "IX_PLPendingSupplierAccountTransaction_SYSTraderTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_PLPendingSupplierAccountTransaction_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLPendSupplierTranID).ValueGeneratedNever();

                entity.Property(e => e.ChequeToBankExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChequeValueInChequeCurrency)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentToAccountCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DocumentToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueInAccountCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.PurControlValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QueryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.PLPendSupplierTrans)
                    .HasForeignKey(d => d.CBAccountID)
                    .HasConstraintName("FK_PLPendingSupplierAccountTransaction_CBAccount");

                entity.HasOne(d => d.ChequeCurrency)
                    .WithMany(p => p.PLPendSupplierTrans)
                    .HasForeignKey(d => d.ChequeCurrencyID)
                    .HasConstraintName("FK_PLPendSupplierTran_SYSCurrency");

                entity.HasOne(d => d.NominalPeriodModuleNavigation)
                    .WithMany(p => p.PLPendSupplierTrans)
                    .HasForeignKey(d => d.NominalPeriodModule)
                    .HasConstraintName("FK_PLPendSupplierTran_NominalPeriodModule");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLPendSupplierTrans)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccountTransaction_PLSupplierAccount");

                entity.HasOne(d => d.SYSTraderGenerateReasonType)
                    .WithMany(p => p.PLPendSupplierTrans)
                    .HasForeignKey(d => d.SYSTraderGenerateReasonTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccountTransaction_SYSTraderGenerationReasonType");

                entity.HasOne(d => d.SYSTraderTranType)
                    .WithMany(p => p.PLPendSupplierTrans)
                    .HasForeignKey(d => d.SYSTraderTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingSupplierAccountTransaction_SYSTraderTransactionType");
            });

            modelBuilder.Entity<PLPendTaxAnalysisBatchTran>(entity =>
            {
                entity.HasKey(e => e.PLPendTaxAnalysisBatchTranID)
                    .HasName("PK_PLPendingTaxAnalysisBatchTransaction")
                    .IsClustered(false);

                entity.ToTable("PLPendTaxAnalysisBatchTran");

                entity.HasIndex(e => e.PLPendSupplierBatchTranID, "IX_PLPendingTaxAnalysisBatchTransaction_PLPendingSupplierAccountBatchTransactionID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTaxRateID, "IX_PLPendingTaxAnalysisBatchTransaction_SYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLPendTaxAnalysisBatchTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueBeforeDiscount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TaxAnalysisDetails)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxOnGoodsValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.PLPendSupplierBatchTran)
                    .WithMany(p => p.PLPendTaxAnalysisBatchTrans)
                    .HasForeignKey(d => d.PLPendSupplierBatchTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingTaxAnalysisBatchTransaction_PLPendingSupplierAccountBatchTransaction");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.PLPendTaxAnalysisBatchTrans)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingTaxAnalysisBatchTransaction_SYSTaxRate");
            });

            modelBuilder.Entity<PLPendTaxAnalysisTran>(entity =>
            {
                entity.HasKey(e => e.PLPendTaxAnalysisTranID)
                    .HasName("PK_PLPendingTaxTYransaction")
                    .IsClustered(false);

                entity.ToTable("PLPendTaxAnalysisTran");

                entity.HasIndex(e => e.PLPendSupplierTranID, "IX_PLPendingTaxAnalysisTransaction_PLPendingSupplierAccountTransactionID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTaxRateID, "IX_PLPendingTaxAnalysisTransaction_SYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLPendTaxAnalysisTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueBeforeDiscount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TaxAnalysisDetails)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxOnGoodsValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.PLPendSupplierTran)
                    .WithMany(p => p.PLPendTaxAnalysisTrans)
                    .HasForeignKey(d => d.PLPendSupplierTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingTaxAnalysisTransaction_PLPendingSupplierAccountTransaction");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.PLPendTaxAnalysisTrans)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPendingVatPosting_SYSTaxRate");
            });

            modelBuilder.Entity<PLPostAndHistSupplierTranView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLPostAndHistSupplierTranView");

                entity.Property(e => e.GoodsValueInBaseCurrency).HasColumnType("decimal(38, 16)");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLPostedSupplierTran>(entity =>
            {
                entity.HasKey(e => e.PLPostedSupplierTranID)
                    .HasName("PK_PLPostedSupplierAccountTransaction")
                    .IsClustered(false);

                entity.ToTable("PLPostedSupplierTran");

                entity.HasIndex(e => e.CBAccountID, "IX_PLPostedSupplierAccountTransaction_CBAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLPostedSupplierAccountTransaction_PLSupplierAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.PLSupplierAccountID, e.TransactionReference }, "IX_PLPostedSupplierAccountTransaction_PLSupplierAccountID_TransactionReference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderTranTypeID, "IX_PLPostedSupplierAccountTransaction_SYSTraderTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLPostedSupplierTranID, "IX_PLPostedSupplierAccountTransaction_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransactionDate, "IX_PLPostedSupplierTran_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.UniqueReferenceNumber, e.TransactionDate }, "IX_PLPostedSupplierTran_URN_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLPostedSupplierTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentToAccountCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DocumentToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EffectiveExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FullSettlementDate).HasColumnType("datetime");

                entity.Property(e => e.GoodsValueInAccountCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.PurControlValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QueryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.PLPostedSupplierTrans)
                    .HasForeignKey(d => d.CBAccountID)
                    .HasConstraintName("FK_PLPostedSupplierAccountTransaction_CBAccount");

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.PLPostedSupplierTrans)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_PLPostedSupplierTran_NominalAccountingPeriod");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLPostedSupplierTrans)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPostedSupplierAccountTransaction_PLSupplierAccount");

                entity.HasOne(d => d.SYSCorrectionTranType)
                    .WithMany(p => p.PLPostedSupplierTrans)
                    .HasForeignKey(d => d.SYSCorrectionTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPostedSupplierTran_SYSCorrectionTranType");

                entity.HasOne(d => d.SYSTraderTranType)
                    .WithMany(p => p.PLPostedSupplierTrans)
                    .HasForeignKey(d => d.SYSTraderTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLPostedSupplierAccountTransaction_SYSTraderTransactionType");
            });

            modelBuilder.Entity<PLPotRemittancePaymentVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLPotRemittancePaymentVw");

                entity.Property(e => e.AllocatedValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountToClaimValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.GoodsValueInAccountCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QueryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ToPayValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLProposedPayment>(entity =>
            {
                entity.ToTable("PLProposedPayment");

                entity.HasIndex(e => e.BankPaymentID, "IX_PLProposedPayment_BankPaymentID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLProposedPayment_PLSupplierAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierPaymentID, "IX_PLProposedPayment_SupplierPaymentID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLProposedPaymentID).ValueGeneratedNever();

                entity.Property(e => e.BankChequeDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BankChequeValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BankPayment)
                    .WithMany(p => p.PLProposedPayments)
                    .HasForeignKey(d => d.BankPaymentID)
                    .HasConstraintName("FK_PLProposedPayment_CBPostedAccountTransaction");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLProposedPayments)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLProposedPayment_PLSupplierAccount");

                entity.HasOne(d => d.SupplierPayment)
                    .WithMany(p => p.PLProposedPayments)
                    .HasForeignKey(d => d.SupplierPaymentID)
                    .HasConstraintName("FK_PLProposedPayment_PLPostedSupplierAccountTransaction");
            });

            modelBuilder.Entity<PLProposedPaymentPostedTran>(entity =>
            {
                entity.ToTable("PLProposedPaymentPostedTran");

                entity.HasIndex(e => e.PLPostedSupplierTranID, "IX_PLProposedPaymentPostedTransaction_PLPostedSupplierAccountTransactionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLProposedPaymentID, "IX_PLProposedPaymentPostedTransaction_PLProposedPaymentID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLProposedPaymentPostedTranID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountToClaimValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ToPayValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.PLPostedSupplierTran)
                    .WithMany(p => p.PLProposedPaymentPostedTrans)
                    .HasForeignKey(d => d.PLPostedSupplierTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLProposedPaymentPostedTransaction_PLPostedSupplierAccountTransaction");

                entity.HasOne(d => d.PLProposedPayment)
                    .WithMany(p => p.PLProposedPaymentPostedTrans)
                    .HasForeignKey(d => d.PLProposedPaymentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLProposedPaymentPostedTransaction_PLProposedPayment");
            });

            modelBuilder.Entity<PLRemittanceMessage>(entity =>
            {
                entity.HasKey(e => e.PLRemittanceMessageID)
                    .IsClustered(false);

                entity.ToTable("PLRemittanceMessage");

                entity.HasIndex(e => e.MessageNumber, "IX_PLRemittanceMessage_MessageNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLRemittanceMessageID, "PLRemittanceMessageCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLRemittanceMessageID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Line1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Line2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Line3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Line4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PLRevalAllocationTran>(entity =>
            {
                entity.ToTable("PLRevalAllocationTran");

                entity.HasIndex(e => e.PLPostedSupplierTranID, "IX_PLRevaluationAllocationTransaction_PLPostedSupplierAccountTransactionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderRevalAllocTypeID, "IX_PLRevaluationAllocationTransaction_SYSTraderRevaluationAllocationTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLRevalAllocationTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreAllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.ExchangeGainLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.PLRevalAllocationTrans)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_PLRevalAllocationTran_SYSAccountingPeriod");

                entity.HasOne(d => d.PLPostedSupplierTran)
                    .WithMany(p => p.PLRevalAllocationTrans)
                    .HasForeignKey(d => d.PLPostedSupplierTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLRevaluationAllocationTransaction_PLPostedSupplierAccountTransaction");

                entity.HasOne(d => d.SYSTraderRevalAllocType)
                    .WithMany(p => p.PLRevalAllocationTrans)
                    .HasForeignKey(d => d.SYSTraderRevalAllocTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLRevaluationAllocationTransaction_SYSTraderRevaluationAllocationType");
            });

            modelBuilder.Entity<PLSetting>(entity =>
            {
                entity.ToTable("PLSetting");

                entity.HasIndex(e => e.DefaultSYSTaxRateID, "IX_PLSetting_DefaultSYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSPaymentTermsBasisID, "IX_PLSetting_SYSPaymentTermsBasisID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLSettingID).ValueGeneratedNever();

                entity.Property(e => e.AllowBatchProcessing)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AuthorisationThresholdValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateOfLastRemittancePayment).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultTermsAgreed)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EarlySettlementDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.LastRemittanceDate).HasColumnType("datetime");

                entity.Property(e => e.MaximumPaymentValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NumberOfAgeingPeriods).HasDefaultValueSql("((3))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ShowOutstandingTrans)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseAccountPeriodsAsTradPeriods)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseElectronicBankPayments)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.DefaultSYSTaxRate)
                    .WithMany(p => p.PLSettings)
                    .HasForeignKey(d => d.DefaultSYSTaxRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSetting_SYSTaxRate");

                entity.HasOne(d => d.SYSPaymentTermsBasis)
                    .WithMany(p => p.PLSettings)
                    .HasForeignKey(d => d.SYSPaymentTermsBasisID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSetting_SYSDefaultPaymentTermsBasis");
            });

            modelBuilder.Entity<PLSupplierAccount>(entity =>
            {
                entity.HasKey(e => e.PLSupplierAccountID)
                    .IsClustered(false);

                entity.ToTable("PLSupplierAccount");

                entity.HasIndex(e => e.DefaultSYSTaxRateID, "IX_PLSupplierAccount_DefaultSYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLFactorHouseID, "IX_PLSupplierAccount_PLFactorHouseID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLPaymentGroupID, "IX_PLSupplierAccount_PLPaymentGroupID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSAccountTypeID, "IX_PLSupplierAccount_SYSAccountTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSCountryCodeID, "IX_PLSupplierAccount_SYSCountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSCurrencyID, "IX_PLSupplierAccount_SYSCurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSExchangeRateTypeID, "IX_PLSupplierAccount_SYSExchangeRateTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSPaymentTermsBasisID, "IX_PLSupplierAccount_SYSPaymentTermsBasisID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierAccountNumber, "IX_PLSupplierAccount_SupplierAccountNumber")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierAccountShortName, "IX_PLSupplierAccount_SupplierAccountShortName")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLSupplierAccountID).ValueGeneratedNever();

                entity.Property(e => e.AccountBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AccountOpened).HasColumnType("datetime");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ApplicationDate).HasColumnType("datetime");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreditReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateAccountDetailsLastChanged).HasColumnType("datetime");

                entity.Property(e => e.DateEuroAccountCopied).HasColumnType("datetime");

                entity.Property(e => e.DateOfLastTransaction).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultNominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultNominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultOrderPriority)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EarlySettlementDiscountPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EuroAccountNumberCopiedFromTo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.LastCreditReview).HasColumnType("datetime");

                entity.Property(e => e.MainFaxAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainFaxCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainFaxSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainTelephoneAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainTelephoneCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainTelephoneSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainWebsite)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NextCreditReview).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SagePaymentsIdentifier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatusReason)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountShortName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRegistrationNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TradingTerms)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ValueOfCurrentOrdersInPOP).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.DefaultSYSTaxRate)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.DefaultSYSTaxRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierAccount_SYSTaxRate");

                entity.HasOne(d => d.PLFactorHouse)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.PLFactorHouseID)
                    .HasConstraintName("FK_PLSupplierAccount_PLFactorHouse");

                entity.HasOne(d => d.PLPaymentGroup)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.PLPaymentGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierAccount_PLPaymentGroup");

                entity.HasOne(d => d.SYSAccountStatus)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.SYSAccountStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierAccount_SYSAccountStatus");

                entity.HasOne(d => d.SYSAccountType)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.SYSAccountTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierAccount_SYSAccountType");

                entity.HasOne(d => d.SYSCountryCode)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.SYSCountryCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierAccount_SYSCountryCode");

                entity.HasOne(d => d.SYSCreditBureau)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.SYSCreditBureauID)
                    .HasConstraintName("FK_PLSupplierAccount_SYSCreditBureau");

                entity.HasOne(d => d.SYSCreditPosition)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.SYSCreditPositionID)
                    .HasConstraintName("FK_PLSupplierAccount_SYSCreditPosition");

                entity.HasOne(d => d.SYSCurrency)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.SYSCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierAccount_SYSCurrency");

                entity.HasOne(d => d.SYSExchangeRateType)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.SYSExchangeRateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierAccount_SYSExchangeRateType");

                entity.HasOne(d => d.SYSPaymentTermsBasis)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.SYSPaymentTermsBasisID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierAccount_SYSPaymentTermsBasis");

                entity.HasOne(d => d.SagePaymentsStatus)
                    .WithMany(p => p.PLSupplierAccounts)
                    .HasForeignKey(d => d.SagePaymentsStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierAccount_SagePaymentsSupplierStatus");
            });

            modelBuilder.Entity<PLSupplierBank>(entity =>
            {
                entity.HasKey(e => e.PLSupplierBankID)
                    .HasName("PK_PLSupplierBankDetails")
                    .IsClustered(false);

                entity.ToTable("PLSupplierBank");

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLSupplierBank_PLSupplierAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLSupplierBankID).ValueGeneratedNever();

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AdditionalReference)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BACSReference)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BICNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.BankPaymentReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IBANNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NonUKSortCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RollNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SagePaymentsIdentifier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SagePaymentsNationalBankIdentifier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLSupplierBanks)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierBankDetails_PLSupplierAccount");
            });

            modelBuilder.Entity<PLSupplierContact>(entity =>
            {
                entity.ToTable("PLSupplierContact");

                entity.HasIndex(e => new { e.PLSupplierAccountID, e.PLSupplierContactID, e.PLSupplierLocationID }, "IX_PLSupplierContact_PLSupplierAccountID_PLSupplierContactID_PLSupplierLocationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLSupplierContactID).ValueGeneratedNever();

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactNamePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLSupplierContacts)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierContact_PLSupplierAccount");

                entity.HasOne(d => d.PLSupplierLocation)
                    .WithMany(p => p.PLSupplierContacts)
                    .HasForeignKey(d => d.PLSupplierLocationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierContact_PLSupplierLocation");

                entity.HasOne(d => d.Salutation)
                    .WithMany(p => p.PLSupplierContacts)
                    .HasForeignKey(d => d.SalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierContact_SalutationID");
            });

            modelBuilder.Entity<PLSupplierContactDefaultsVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLSupplierContactDefaultsVw");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactRoleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultEmail)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultFax)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultMobile)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultTelephone)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultWebsite)
                    .HasMaxLength(227)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLSupplierContactRole>(entity =>
            {
                entity.ToTable("PLSupplierContactRole");

                entity.HasIndex(e => e.PLSupplierContactID, "IX_PLSupplierContactRole_PLSupplierContactID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderContactRoleID, "IX_PLSupplierContactRole_SYSTraderContactRoleID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLSupplierContactRoleID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PLSupplierContact)
                    .WithMany(p => p.PLSupplierContactRoles)
                    .HasForeignKey(d => d.PLSupplierContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierContactRole_PLSupplierContact");

                entity.HasOne(d => d.SYSTraderContactRole)
                    .WithMany(p => p.PLSupplierContactRoles)
                    .HasForeignKey(d => d.SYSTraderContactRoleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierContactRole_SYSTraderContactRole");
            });

            modelBuilder.Entity<PLSupplierContactValue>(entity =>
            {
                entity.ToTable("PLSupplierContactValue");

                entity.HasIndex(e => new { e.PLSupplierContactID, e.SYSContactTypeID }, "IX_PLSupplierContactValue_SupplierContactID_ContactTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLSupplierContactValueID).ValueGeneratedNever();

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(227)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValuePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PLSupplierContact)
                    .WithMany(p => p.PLSupplierContactValues)
                    .HasForeignKey(d => d.PLSupplierContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierContactValue_PLSupplierContact");

                entity.HasOne(d => d.SYSContactType)
                    .WithMany(p => p.PLSupplierContactValues)
                    .HasForeignKey(d => d.SYSContactTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierContactValue_SYSContactType");
            });

            modelBuilder.Entity<PLSupplierDocument>(entity =>
            {
                entity.HasKey(e => e.PLSupplierDocumentID)
                    .IsClustered(false);

                entity.ToTable("PLSupplierDocument");

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLSupplierDocument_PLSupplierAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSDocumentLayoutVersionID, "IX_PLSupplierDocument_SYSDocumentLayoutVersionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSDocTransmissionMethodID, "IX_PLSupplierDocument_SYSDocumentTransmissionMethodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSDocumentTypeID, "IX_PLSupplierDocument_SYSDocumentTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SendToPLSupplierLocationID, "IX_PLSupplierDocument_SendToPLSupplierLocationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SendToPLSuppContactValueID, "IX_SendToPLSuppContactValueID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLSupplierDocumentID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLSupplierDocuments)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierDocument_PLSupplierAccount");

                entity.HasOne(d => d.SYSDocTransmissionMethod)
                    .WithMany(p => p.PLSupplierDocuments)
                    .HasForeignKey(d => d.SYSDocTransmissionMethodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierDocument_SYSDocumentTransmissionMethod");

                entity.HasOne(d => d.SYSDocumentLayoutVersion)
                    .WithMany(p => p.PLSupplierDocuments)
                    .HasForeignKey(d => d.SYSDocumentLayoutVersionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierDocument_SYSDocumentLayoutVersion");

                entity.HasOne(d => d.SYSDocumentType)
                    .WithMany(p => p.PLSupplierDocuments)
                    .HasForeignKey(d => d.SYSDocumentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierDocument_SYSDocumentType");

                entity.HasOne(d => d.SendToPLSuppContactValue)
                    .WithMany(p => p.PLSupplierDocuments)
                    .HasForeignKey(d => d.SendToPLSuppContactValueID)
                    .HasConstraintName("FK_PLSupplierDocument_PLSupplierContactValue");

                entity.HasOne(d => d.SendToPLSupplierLocation)
                    .WithMany(p => p.PLSupplierDocuments)
                    .HasForeignKey(d => d.SendToPLSupplierLocationID)
                    .HasConstraintName("FK_PLSupplierDocument_PLSupplierLocation");
            });

            modelBuilder.Entity<PLSupplierFactorHouse>(entity =>
            {
                entity.HasKey(e => e.PLSupplierFactorHouseID)
                    .IsClustered(false);

                entity.ToTable("PLSupplierFactorHouse");

                entity.HasIndex(e => e.PLFactorHouseID, "IX_PLSupplierFactorHouse_PLFactorHouseID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLSupplierFactorHouse_PLSupplierAccountID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLSupplierFactorHouseID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PLFactorHouse)
                    .WithMany(p => p.PLSupplierFactorHouses)
                    .HasForeignKey(d => d.PLFactorHouseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierFactorHouse_PLFactorHouse");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLSupplierFactorHouses)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierFactorHouse_PLSupplierAccount");
            });

            modelBuilder.Entity<PLSupplierLocation>(entity =>
            {
                entity.HasKey(e => e.PLSupplierLocationID)
                    .IsClustered(false);

                entity.ToTable("PLSupplierLocation");

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLSupplierLocation_PLSupplierAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PostCode, "IX_PLSupplierLocation_PostCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSCountryCodeID, "IX_PLSupplierLocation_SYSCountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderLocationTypeID, "IX_PLSupplierLocation_SYSTraderLocationTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLSupplierLocationID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.AddressCountry)
                    .WithMany(p => p.PLSupplierLocationAddressCountries)
                    .HasForeignKey(d => d.AddressCountryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierLocation_AddressCountryID");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLSupplierLocations)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierLocation_PLSupplierAccount");

                entity.HasOne(d => d.SYSCountryCode)
                    .WithMany(p => p.PLSupplierLocationSYSCountryCodes)
                    .HasForeignKey(d => d.SYSCountryCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierLocation_SYSCountryCode");

                entity.HasOne(d => d.SYSTraderLocationType)
                    .WithMany(p => p.PLSupplierLocations)
                    .HasForeignKey(d => d.SYSTraderLocationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierLocation_SYSTraderLocationType");
            });

            modelBuilder.Entity<PLSupplierPeriodValue>(entity =>
            {
                entity.HasKey(e => e.PLSupplierPeriodValueID)
                    .HasName("PK_SLSupplierPeriodValue")
                    .IsClustered(false);

                entity.ToTable("PLSupplierPeriodValue");

                entity.HasIndex(e => e.PLAnalysisPeriodID, "IX_PLSupplierPeriodValue_PLAnalysisPeriodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLSupplierPeriodValue_PLSupplierAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLSupplierPeriodValueID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRateGainOrLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TotalCashValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCashValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCredNoteValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCreditNoteValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalFinanceChargesApplied).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalInvoiceValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalInvoiceValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalProfitValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalProfitValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.PLAnalysisPeriod)
                    .WithMany(p => p.PLSupplierPeriodValues)
                    .HasForeignKey(d => d.PLAnalysisPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLSupplierPeriodValue_PLAnalysisPeriod");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLSupplierPeriodValues)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLSupplierPeriodValue_PLSupplierAccount");
            });

            modelBuilder.Entity<PLSupplierYearValue>(entity =>
            {
                entity.HasKey(e => e.PLSupplierYearValueID)
                    .IsClustered(false);

                entity.ToTable("PLSupplierYearValue");

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_PLSupplierYearValue_PLSupplierAccount")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSFinancialYearID, "IX_PLSupplierYearValue_SYSFinancialYear")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLSupplierYearValueID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRateGainOrLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TotalCashValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCashValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCredNoteValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCreditNoteValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalFinanceChargesApplied).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalInvoiceValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalInvoiceValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalProfitValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalProfitValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.PLSupplierYearValues)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierYearValue_PLSupplierAcount");

                entity.HasOne(d => d.SYSFinancialYear)
                    .WithMany(p => p.PLSupplierYearValues)
                    .HasForeignKey(d => d.SYSFinancialYearID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLSupplierYearValue_SYSFinancialYear");
            });

            modelBuilder.Entity<PLTotalOverdueBalancesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLTotalOverdueBalancesView");

                entity.Property(e => e.AllocatedValueTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueInAccountCurrencyTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountShortName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLTranMemo>(entity =>
            {
                entity.HasKey(e => e.PLTranMemoID)
                    .HasName("PK_PLTransactionMemo")
                    .IsClustered(false);

                entity.ToTable("PLTranMemo");

                entity.HasIndex(e => e.PLPostedSupplierTranID, "IX_PLTransactionMemo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLPostedSupplierTranID, "IX_PLTransactionMemo_PLPostedSupplierAccountTransactionID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLTranMemoID).ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MemoCreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MemoText)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TimeAndDateMemoCreated).HasColumnType("datetime");

                entity.Property(e => e.TimeAndDateMemoLastUpdated).HasColumnType("datetime");

                entity.HasOne(d => d.PLPostedSupplierTran)
                    .WithMany(p => p.PLTranMemos)
                    .HasForeignKey(d => d.PLPostedSupplierTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLAccountEntryMemo_PLPostedSupplierAccountTransaction");
            });

            modelBuilder.Entity<PLTransactionSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLTransactionSummary");

                entity.Property(e => e.CashValue).HasColumnType("decimal(21, 2)");

                entity.Property(e => e.CashValueInBase).HasColumnType("decimal(38, 13)");

                entity.Property(e => e.CreditNoteValue).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.CreditNoteValueInBase).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.ExchangeRateGainLoss).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.InvoiceValue).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.InvoiceValueInBase).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<PLUnauthNominalAnalysisItem>(entity =>
            {
                entity.ToTable("PLUnauthNominalAnalysisItem");

                entity.HasIndex(e => e.PLPostedSupplierTranID, "IX_PLUnauthNominalAnalysisItem_PLPostedSupplierTranID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PLUnauthNominalAnalysisItemID).ValueGeneratedNever();

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TransactionAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.PLPostedSupplierTran)
                    .WithMany(p => p.PLUnauthNominalAnalysisItems)
                    .HasForeignKey(d => d.PLPostedSupplierTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLUnauthNominalAnalysisItem_PLPostedSupplierTranID");
            });

            modelBuilder.Entity<POPAdditionalCharge>(entity =>
            {
                entity.ToTable("POPAdditionalCharge");

                entity.HasIndex(e => e.Code, "IX_POPAdditionalCharge_Code")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NominalCodeID, "IX_POPAdditionalCharge_NominalCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCodeID, "IX_POPAdditionalCharge_TaxCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPAdditionalChargeID).ValueGeneratedNever();

                entity.Property(e => e.ChargeValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NominalCode)
                    .WithMany(p => p.POPAdditionalCharges)
                    .HasForeignKey(d => d.NominalCodeID)
                    .HasConstraintName("FK_POPAdditionalCharge_NLNominalAccount");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.POPAdditionalCharges)
                    .HasForeignKey(d => d.TaxCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPAdditionalCharge_SYSTaxRate");
            });

            modelBuilder.Entity<POPAlternativeAuthoriser>(entity =>
            {
                entity.ToTable("POPAlternativeAuthoriser");

                entity.Property(e => e.POPAlternativeAuthoriserID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<POPAnalysisCode>(entity =>
            {
                entity.ToTable("POPAnalysisCode");

                entity.Property(e => e.POPAnalysisCodeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AnalysisCodeMapping)
                    .WithMany(p => p.POPAnalysisCodeAnalysisCodeMappings)
                    .HasForeignKey(d => d.AnalysisCodeMappingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPAnalysisCode_AnalysisCodeMapping");

                entity.HasOne(d => d.SupplierAnalysisCodeMapping)
                    .WithMany(p => p.POPAnalysisCodeSupplierAnalysisCodeMappings)
                    .HasForeignKey(d => d.SupplierAnalysisCodeMappingID)
                    .HasConstraintName("FK_POPAnalysisCode_SupplierAnalysisCodeMapping");

                entity.HasOne(d => d.TranHistAnalysisCodeMapping)
                    .WithMany(p => p.POPAnalysisCodeTranHistAnalysisCodeMappings)
                    .HasForeignKey(d => d.TranHistAnalysisCodeMappingID)
                    .HasConstraintName("FK_POPAnalysisCode_TranHistAnalysisCodeMapping");
            });

            modelBuilder.Entity<POPAuthAuditEvent>(entity =>
            {
                entity.ToTable("POPAuthAuditEvent");

                entity.Property(e => e.POPAuthAuditEventID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeNotificationCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.POPAuthAuditEventType)
                    .WithMany(p => p.POPAuthAuditEvents)
                    .HasForeignKey(d => d.POPAuthAuditEventTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPAuthAuditEvent_POPAuthAuditEventType");
            });

            modelBuilder.Entity<POPAuthAuditEventType>(entity =>
            {
                entity.ToTable("POPAuthAuditEventType");

                entity.Property(e => e.POPAuthAuditEventTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPAuthPrincipal>(entity =>
            {
                entity.ToTable("POPAuthPrincipal");

                entity.Property(e => e.POPAuthPrincipalID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.POPAuthRoleType)
                    .WithMany(p => p.POPAuthPrincipals)
                    .HasForeignKey(d => d.POPAuthRoleTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPAuthPrincipal_POPAuthRoleType");

                entity.HasOne(d => d.POPAuthRule)
                    .WithMany(p => p.POPAuthPrincipals)
                    .HasForeignKey(d => d.POPAuthRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPAuthPrincipal_POPAuthRule");
            });

            modelBuilder.Entity<POPAuthPrincipalContent>(entity =>
            {
                entity.ToTable("POPAuthPrincipalContent");

                entity.Property(e => e.POPAuthPrincipalContentID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.POPAuthPrincipalContentType)
                    .WithMany(p => p.POPAuthPrincipalContents)
                    .HasForeignKey(d => d.POPAuthPrincipalContentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPAuthPrincipalContent_POPAuthPrincipalContentType");

                entity.HasOne(d => d.POPAuthPrincipal)
                    .WithMany(p => p.POPAuthPrincipalContents)
                    .HasForeignKey(d => d.POPAuthPrincipalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPAuthPrincipalContent_POPAuthPrincipal");

                entity.HasOne(d => d.Source)
                    .WithMany(p => p.POPAuthPrincipalContents)
                    .HasForeignKey(d => d.SourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPAuthPrincipalContent_SYSModule");
            });

            modelBuilder.Entity<POPAuthPrincipalContentType>(entity =>
            {
                entity.ToTable("POPAuthPrincipalContentType");

                entity.Property(e => e.POPAuthPrincipalContentTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPAuthRoleType>(entity =>
            {
                entity.ToTable("POPAuthRoleType");

                entity.Property(e => e.POPAuthRoleTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPAuthRule>(entity =>
            {
                entity.ToTable("POPAuthRule");

                entity.Property(e => e.POPAuthRuleID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GreaterThanOrEqualValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LessThanValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.POPAuthRuleSource)
                    .WithMany(p => p.POPAuthRules)
                    .HasForeignKey(d => d.POPAuthRuleSourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPAuthRule_POPAuthRuleSource");
            });

            modelBuilder.Entity<POPAuthRuleSource>(entity =>
            {
                entity.ToTable("POPAuthRuleSource");

                entity.Property(e => e.POPAuthRuleSourceID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPAuthRuleView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("POPAuthRuleView");

                entity.Property(e => e.GreaterThanOrEqualValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LessThanValue).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<POPCancelledLine>(entity =>
            {
                entity.ToTable("POPCancelledLine");

                entity.HasIndex(e => e.ItemCode, "IX_POPCancelledLine_ItemCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnID, "IX_POPCancelledLine_POPOrderReturnID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPCancelledLineID).ValueGeneratedNever();

                entity.Property(e => e.BuyingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CancelledDate).HasColumnType("datetime");

                entity.Property(e => e.CancelledQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StockUnitCancelledQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.POPOrderReturn)
                    .WithMany(p => p.POPCancelledLines)
                    .HasForeignKey(d => d.POPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPCancelledLine_POPOrderReturn");
            });

            modelBuilder.Entity<POPCancelledLineArch>(entity =>
            {
                entity.HasKey(e => e.POPCancelledLineID);

                entity.ToTable("POPCancelledLineArch");

                entity.HasIndex(e => e.ItemCode, "IX_POPCancelledLineArch_ItemCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnID, "IX_POPCancelledLineArch_POPOrderReturnID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPCancelledLineID).ValueGeneratedNever();

                entity.Property(e => e.BuyingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CancelledDate).HasColumnType("datetime");

                entity.Property(e => e.CancelledQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StockUnitCancelledQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.POPOrderReturn)
                    .WithMany(p => p.POPCancelledLineArches)
                    .HasForeignKey(d => d.POPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPCancelledLineArch_POPOrderReturnArch");
            });

            modelBuilder.Entity<POPDisputeCode>(entity =>
            {
                entity.ToTable("POPDisputeCode");

                entity.HasIndex(e => e.Code, "IX_POPDisputeCode")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPDisputeCodeID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<POPDocDelAddress>(entity =>
            {
                entity.ToTable("POPDocDelAddress");

                entity.HasIndex(e => e.CountryCodeID, "IX_POPDocDelAddress_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnID, "IX_POPDocDelAddress_POPOrderReturnID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPDocDelAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.POPDocDelAddresses)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_POPDocDelAddress_SYSCountryCode");

                entity.HasOne(d => d.POPOrderReturn)
                    .WithOne(p => p.POPDocDelAddress)
                    .HasForeignKey<POPDocDelAddress>(d => d.POPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPDocDelAddress_POPOrderReturn1");
            });

            modelBuilder.Entity<POPDocDelAddressArch>(entity =>
            {
                entity.HasKey(e => e.POPDocDelAddressID);

                entity.ToTable("POPDocDelAddressArch");

                entity.HasIndex(e => e.CountryCodeID, "IX_POPDocDelAddressArch_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnID, "IX_POPDocDelAddressArch_POPOrderReturnID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPDocDelAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.POPDocDelAddressArches)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_POPDocDelAddressArch_SYSCountryCode");

                entity.HasOne(d => d.POPOrderReturn)
                    .WithOne(p => p.POPDocDelAddressArch)
                    .HasForeignKey<POPDocDelAddressArch>(d => d.POPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPDocDelAddressArch_POPOrderReturnArch");
            });

            modelBuilder.Entity<POPGRNNumber>(entity =>
            {
                entity.ToTable("POPGRNNumber");

                entity.Property(e => e.POPGRNNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<POPIntrastatVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("POPIntrastatVw");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommodityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentCountryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MultipleOfBaseUnit).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.OriginCountryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitLineQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitRcptRtnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplementaryUnitConversionRatio).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.SupplierAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierCountryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("decimal(15, 4)");
            });

            modelBuilder.Entity<POPInvCredDispute>(entity =>
            {
                entity.ToTable("POPInvCredDispute");

                entity.HasIndex(e => e.POPDisputeCodeID, "IX_POPInvCredDispute_POPDisputeCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPInvoiceCreditTypeID, "IX_POPInvCredDispute_POPInvoiceCreditTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierID, "IX_POPInvCredDispute_SupplierID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPInvCredDisputeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DisputeComment)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvCredGoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvCredTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.POPDisputeCode)
                    .WithMany(p => p.POPInvCredDisputes)
                    .HasForeignKey(d => d.POPDisputeCodeID)
                    .HasConstraintName("FK_POPInvCredDispute_POPDisputeCode");

                entity.HasOne(d => d.POPInvoiceCreditType)
                    .WithMany(p => p.POPInvCredDisputes)
                    .HasForeignKey(d => d.POPInvoiceCreditTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPInvCredDispute_POPInvoiceCreditType");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.POPInvCredDisputes)
                    .HasForeignKey(d => d.SupplierID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPInvCredDispute_PLSupplierAccount");
            });

            modelBuilder.Entity<POPInvCreditLineArch>(entity =>
            {
                entity.HasKey(e => e.POPInvoiceCreditLineID);

                entity.ToTable("POPInvCreditLineArch");

                entity.HasIndex(e => e.POPInvCredDisputeID, "IX_POPInvCreditLineArch_POPInvCredDisputeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPInvoiceCreditNo, "IX_POPInvCreditLineArch_POPInvoiceCreditNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPInvoiceCreditTypeID, "IX_POPInvCreditLineArch_POPInvoiceCreditTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnLineID, "IX_POPInvCreditLineArch_POPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPInvoiceCreditLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountedUnitPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoiceCreditDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.POPInvoiceCreditNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitInvCredQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitRcptRtnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.POPInvoiceCreditType)
                    .WithMany(p => p.POPInvCreditLineArches)
                    .HasForeignKey(d => d.POPInvoiceCreditTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPInvoiceCreditLineArch_POPInvoiceCreditType");

                entity.HasOne(d => d.POPOrderReturnLine)
                    .WithMany(p => p.POPInvCreditLineArches)
                    .HasForeignKey(d => d.POPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPInvoiceCreditLineArch_POPOrderReturnLineArch");
            });

            modelBuilder.Entity<POPInvoiceCreditLine>(entity =>
            {
                entity.ToTable("POPInvoiceCreditLine");

                entity.HasIndex(e => e.POPInvCredDisputeID, "IX_POPInvoiceCreditLine_POPInvCredDisputeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPInvoiceCreditNo, "IX_POPInvoiceCreditLine_POPInvoiceCreditNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPInvoiceCreditTypeID, "IX_POPInvoiceCreditLine_POPInvoiceCreditTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnLineID, "IX_POPInvoiceCreditLine_POPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPInvoiceCreditLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountedUnitPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoiceCreditDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.POPInvoiceCreditNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitInvCredQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitRcptRtnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.POPInvCredDispute)
                    .WithMany(p => p.POPInvoiceCreditLines)
                    .HasForeignKey(d => d.POPInvCredDisputeID)
                    .HasConstraintName("FK_POPInvoiceCreditLine_POPInvCredDispute");

                entity.HasOne(d => d.POPInvoiceCreditType)
                    .WithMany(p => p.POPInvoiceCreditLines)
                    .HasForeignKey(d => d.POPInvoiceCreditTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPInvoiceCreditLine_POPInvoiceCreditType");

                entity.HasOne(d => d.POPOrderReturnLine)
                    .WithMany(p => p.POPInvoiceCreditLines)
                    .HasForeignKey(d => d.POPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPInvoiceCreditLine_POPOrderReturnLine");
            });

            modelBuilder.Entity<POPInvoiceCreditType>(entity =>
            {
                entity.ToTable("POPInvoiceCreditType");

                entity.Property(e => e.POPInvoiceCreditTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPNonePartFullStatus>(entity =>
            {
                entity.ToTable("POPNonePartFullStatus");

                entity.Property(e => e.POPNonePartFullStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPOnOrderBalance>(entity =>
            {
                entity.ToTable("POPOnOrderBalance");

                entity.HasIndex(e => e.ItemID, "IX_POPOnOrderBalance_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseItemID, "IX_POPOnOrderBalance_WarehouseItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPOnOrderBalanceID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OnOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SecondRef)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.WarehouseItem)
                    .WithMany(p => p.POPOnOrderBalances)
                    .HasForeignKey(d => d.WarehouseItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOnOrderBalance_WarehouseItem");
            });

            modelBuilder.Entity<POPOnOrderLine>(entity =>
            {
                entity.ToTable("POPOnOrderLine");

                entity.HasIndex(e => e.POPOnOrderBalanceID, "IX_POPOnOrderLine_POPOnOrderBalanceID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnLineID, "IX_POPOnOrderLine_POPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPOnOrderLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OnOrderDate).HasColumnType("datetime");

                entity.Property(e => e.OnOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StockUnitOnOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.POPOnOrderBalance)
                    .WithOne(p => p.POPOnOrderLine)
                    .HasForeignKey<POPOnOrderLine>(d => d.POPOnOrderBalanceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOnOrderLine_POPOnOrderBalance");

                entity.HasOne(d => d.POPOrderReturnLine)
                    .WithMany(p => p.POPOnOrderLines)
                    .HasForeignKey(d => d.POPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOnOrderLine_POPOrderReturnLine");
            });

            modelBuilder.Entity<POPOrdReturnLineDelAddrArch>(entity =>
            {
                entity.HasKey(e => e.POPOrdReturnLineDelAddressID)
                    .HasName("PK_POPOrderReturnLineDelAddressArch");

                entity.ToTable("POPOrdReturnLineDelAddrArch");

                entity.HasIndex(e => e.CountryCodeID, "IX_POPOrderReturnLineDelAddressArch_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnLineAddrTypeID, "IX_POPOrderReturnLineDelAddressArch_POPOrderReturnLineAddressTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPOrdReturnLineDelAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.POPOrdReturnLineDelAddrArches)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_POPOrderReturnLineDelAddressArch_SYSCountryCode");

                entity.HasOne(d => d.POPOrderReturnLineAddrType)
                    .WithMany(p => p.POPOrdReturnLineDelAddrArches)
                    .HasForeignKey(d => d.POPOrderReturnLineAddrTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLineDelAddressArch_POPOrderReturnLineAddressType");
            });

            modelBuilder.Entity<POPOrdReturnLineDelAddress>(entity =>
            {
                entity.ToTable("POPOrdReturnLineDelAddress");

                entity.HasIndex(e => e.CountryCodeID, "IX_POPOrderReturnLineDelAddress_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnLineAddrTypeID, "IX_POPOrderReturnLineDelAddress_POPOrderReturnLineAddressTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPOrdReturnLineDelAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.POPOrdReturnLineDelAddresses)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_POPOrderReturnLineDelAddress_SYSCountryCode");

                entity.HasOne(d => d.POPOrderReturnLineAddrType)
                    .WithMany(p => p.POPOrdReturnLineDelAddresses)
                    .HasForeignKey(d => d.POPOrderReturnLineAddrTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLineDelAddress_POPOrderReturnLineAddressType");
            });

            modelBuilder.Entity<POPOrderAuthoriser>(entity =>
            {
                entity.ToTable("POPOrderAuthoriser");

                entity.Property(e => e.POPOrderAuthoriserID).ValueGeneratedNever();

                entity.Property(e => e.AuthoriserLogonName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuthoriserName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.POPOrderReturn)
                    .WithMany(p => p.POPOrderAuthorisers)
                    .HasForeignKey(d => d.POPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderAuthoriser_POPOrderReturn");
            });

            modelBuilder.Entity<POPOrderAuthoriserAlternativeVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("POPOrderAuthoriserAlternativeVw");
            });

            modelBuilder.Entity<POPOrderGenerationType>(entity =>
            {
                entity.ToTable("POPOrderGenerationType");

                entity.Property(e => e.POPOrderGenerationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPOrderNotification>(entity =>
            {
                entity.ToTable("POPOrderNotification");

                entity.Property(e => e.POPOrderNotificationID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.POPOrderNotificationType)
                    .WithMany(p => p.POPOrderNotifications)
                    .HasForeignKey(d => d.POPOrderNotificationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderNotification_POPOrderNotificationType");

                entity.HasOne(d => d.POPOrderReturn)
                    .WithMany(p => p.POPOrderNotifications)
                    .HasForeignKey(d => d.POPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderNotification_POPOrderReturn");

                entity.HasOne(d => d.SYSNotification)
                    .WithMany(p => p.POPOrderNotifications)
                    .HasForeignKey(d => d.SYSNotificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderNotification_SYSNotification");
            });

            modelBuilder.Entity<POPOrderNotificationType>(entity =>
            {
                entity.ToTable("POPOrderNotificationType");

                entity.Property(e => e.POPOrderNotificationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPOrderNotificationView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("POPOrderNotificationView");

                entity.Property(e => e.BodyText)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.SubjectText)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TimeAndDateNotifCreated).HasColumnType("datetime");

                entity.Property(e => e.UserFromName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPOrderNumber>(entity =>
            {
                entity.ToTable("POPOrderNumber");

                entity.Property(e => e.POPOrderNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<POPOrderReturn>(entity =>
            {
                entity.ToTable("POPOrderReturn");

                entity.HasIndex(e => e.AuthorisationStatusID, "IX_POPOrderReturn_AuthorisationStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentDate, "IX_POPOrderReturn_DocumentDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentNo, "IX_POPOrderReturn_DocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentPrintStatusID, "IX_POPOrderReturn_DocumentPrintStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentStatusID, "IX_POPOrderReturn_DocumentStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.DocumentTypeID, e.DocumentNo }, "IX_POPOrderReturn_DocumentTypeID_DocumentNo")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.DocumentTypeID, e.DocumentStatusID, e.DocumentNo }, "IX_POPOrderReturn_DocumentTypeID_DocumentStatusID_DocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceTypeID, "IX_POPOrderReturn_SourceTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierDocumentNo, "IX_POPOrderReturn_SupplierDocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierID, "IX_POPOrderReturn_SupplierID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_POPOrderReturn_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPOrderReturnID).ValueGeneratedNever();

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentOriginatorName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IntrastatStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SettlementDiscPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SourceDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubtotalChargesNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalChargesTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalGoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalLandedCosts).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SupplierDocumentNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalAccrualValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalTaxValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.AuthorisationStatus)
                    .WithMany(p => p.POPOrderReturns)
                    .HasForeignKey(d => d.AuthorisationStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturn_AuthorisationStatus");

                entity.HasOne(d => d.DefaultDeliveryAddress)
                    .WithMany(p => p.POPOrderReturns)
                    .HasForeignKey(d => d.DefaultDeliveryAddressID)
                    .HasConstraintName("FK_POPOrderReturn_DefaultDeliveryAddressID");

                entity.HasOne(d => d.DocumentPrintStatus)
                    .WithMany(p => p.POPOrderReturns)
                    .HasForeignKey(d => d.DocumentPrintStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturn_DocumentPrintStatus1");

                entity.HasOne(d => d.DocumentStatus)
                    .WithMany(p => p.POPOrderReturns)
                    .HasForeignKey(d => d.DocumentStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturn_DocumentStatus");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.POPOrderReturnDocumentTypes)
                    .HasForeignKey(d => d.DocumentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturn_POPOrderReturnType");

                entity.HasOne(d => d.SourceType)
                    .WithMany(p => p.POPOrderReturnSourceTypes)
                    .HasForeignKey(d => d.SourceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturn_POPOrderReturnType1");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.POPOrderReturns)
                    .HasForeignKey(d => d.SupplierID)
                    .HasConstraintName("FK_POPOrderReturn_PLSupplierAccount");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.POPOrderReturns)
                    .HasForeignKey(d => d.WarehouseID)
                    .HasConstraintName("FK_POPOrderReturn_Warehouse");
            });

            modelBuilder.Entity<POPOrderReturnArch>(entity =>
            {
                entity.HasKey(e => e.POPOrderReturnID);

                entity.ToTable("POPOrderReturnArch");

                entity.HasIndex(e => e.AuthorisationStatusID, "IX_POPOrderReturnArch_AuthorisationStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentDate, "IX_POPOrderReturnArch_DocumentDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentNo, "IX_POPOrderReturnArch_DocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentPrintStatusID, "IX_POPOrderReturnArch_DocumentPrintStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentStatusID, "IX_POPOrderReturnArch_DocumentStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.DocumentTypeID, e.DocumentNo }, "IX_POPOrderReturnArch_DocumentTypeID_DocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceTypeID, "IX_POPOrderReturnArch_SourceTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierDocumentNo, "IX_POPOrderReturnArch_SupplierDocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierID, "IX_POPOrderReturnArch_SupplierID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_POPOrderReturnArch_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPOrderReturnID).ValueGeneratedNever();

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentOriginatorName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SettlementDiscPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SourceDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubtotalChargesNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalChargesTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalGoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalLandedCosts).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SupplierDocumentNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalAccrualValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalTaxValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.AuthorisationStatus)
                    .WithMany(p => p.POPOrderReturnArches)
                    .HasForeignKey(d => d.AuthorisationStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnArch_AuthorisationStatus");

                entity.HasOne(d => d.DefaultDeliveryAddress)
                    .WithMany(p => p.POPOrderReturnArches)
                    .HasForeignKey(d => d.DefaultDeliveryAddressID)
                    .HasConstraintName("FK_POPOrderReturnArch_DefaultDeliveryAddressID");

                entity.HasOne(d => d.DocumentPrintStatus)
                    .WithMany(p => p.POPOrderReturnArches)
                    .HasForeignKey(d => d.DocumentPrintStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnArch_DocumentPrintStatus");

                entity.HasOne(d => d.DocumentStatus)
                    .WithMany(p => p.POPOrderReturnArches)
                    .HasForeignKey(d => d.DocumentStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnArch_DocumentStatus");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.POPOrderReturnArchDocumentTypes)
                    .HasForeignKey(d => d.DocumentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnArch_POPOrderReturnType");

                entity.HasOne(d => d.SourceType)
                    .WithMany(p => p.POPOrderReturnArchSourceTypes)
                    .HasForeignKey(d => d.SourceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnArch_POPOrderReturnType1");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.POPOrderReturnArches)
                    .HasForeignKey(d => d.SupplierID)
                    .HasConstraintName("FK_POPOrderReturnArch_PLSupplierAccount");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.POPOrderReturnArches)
                    .HasForeignKey(d => d.WarehouseID)
                    .HasConstraintName("FK_POPOrderReturnArch_Warehouse");
            });

            modelBuilder.Entity<POPOrderReturnLine>(entity =>
            {
                entity.ToTable("POPOrderReturnLine");

                entity.HasIndex(e => e.LineTypeID, "IX_POPOrderReturnLine_LineTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnID, "IX_POPOrderReturnLine_POPOrderReturnID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrdReturnLineDelAddressID, "IX_POPOrderReturnLine_POPOrderReturnLineDelAddressID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemTypeID, "IX_POPOrderReturnLine_StockItemTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCodeID, "IX_POPOrderReturnLine_TaxCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableTypeID, "IX_POPOrderReturnLine_TraceableTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPOrderReturnLineID).ValueGeneratedNever();

                entity.Property(e => e.AddChargeInvoiceValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuyingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuyingUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DisputedAddChargeValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DisputedInvCredQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LandedCostsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OnOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PricingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PricingUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ShowOnSupplierDocs)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockUnitDisputedInvCredQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitInvCredQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitLineQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StockUnitOnOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitRcptRtnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierPartRef)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.UnitBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.UnitDiscountValue).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.ConfirmationIntentType)
                    .WithMany(p => p.POPOrderReturnLines)
                    .HasForeignKey(d => d.ConfirmationIntentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLine_ConfirmationIntentType1");

                entity.HasOne(d => d.LandedCostsType)
                    .WithMany(p => p.POPOrderReturnLines)
                    .HasForeignKey(d => d.LandedCostsTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLine_LandedCostsType");

                entity.HasOne(d => d.LineType)
                    .WithMany(p => p.POPOrderReturnLines)
                    .HasForeignKey(d => d.LineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLine_OrderReturnLineType");

                entity.HasOne(d => d.POPOrdReturnLineDelAddress)
                    .WithMany(p => p.POPOrderReturnLines)
                    .HasForeignKey(d => d.POPOrdReturnLineDelAddressID)
                    .HasConstraintName("FK_POPOrderReturnLine_POPOrderReturnLineDelAddress");

                entity.HasOne(d => d.POPOrderReturn)
                    .WithMany(p => p.POPOrderReturnLines)
                    .HasForeignKey(d => d.POPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLine_POPOrderReturn");

                entity.HasOne(d => d.StockItemType)
                    .WithMany(p => p.POPOrderReturnLines)
                    .HasForeignKey(d => d.StockItemTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLine_StockItemType");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.POPOrderReturnLines)
                    .HasForeignKey(d => d.TaxCodeID)
                    .HasConstraintName("FK_POPOrderReturnLine_SYSTaxRate");

                entity.HasOne(d => d.TraceableType)
                    .WithMany(p => p.POPOrderReturnLines)
                    .HasForeignKey(d => d.TraceableTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLine_TraceableType");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.POPOrderReturnLines)
                    .HasForeignKey(d => d.WarehouseID)
                    .HasConstraintName("FK_POPOrderReturnLine_Warehouse");
            });

            modelBuilder.Entity<POPOrderReturnLineAddrType>(entity =>
            {
                entity.ToTable("POPOrderReturnLineAddrType");

                entity.Property(e => e.POPOrderReturnLineAddrTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPOrderReturnLineArch>(entity =>
            {
                entity.HasKey(e => e.POPOrderReturnLineID);

                entity.ToTable("POPOrderReturnLineArch");

                entity.HasIndex(e => e.LineTypeID, "IX_POPOrderReturnLineArch_LineTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnID, "IX_POPOrderReturnLineArch_POPOrderReturnID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrdReturnLineDelAddressID, "IX_POPOrderReturnLineArch_POPOrderReturnLineDelAddressID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemTypeID, "IX_POPOrderReturnLineArch_StockItemTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableTypeID, "IX_POPOrderReturnLineArch_TraceableTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPOrderReturnLineID).ValueGeneratedNever();

                entity.Property(e => e.AddChargeInvoiceValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuyingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuyingUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DisputedAddChargeValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DisputedInvCredQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LandedCostsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OnOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PricingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PricingUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ShowOnSupplierDocs)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockUnitDisputedInvCredQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitInvCredQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitLineQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StockUnitOnOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitRcptRtnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierPartRef)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.UnitBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.UnitDiscountValue).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.ConfirmationIntentType)
                    .WithMany(p => p.POPOrderReturnLineArches)
                    .HasForeignKey(d => d.ConfirmationIntentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLineArch_ConfirmationIntentType");

                entity.HasOne(d => d.LandedCostsType)
                    .WithMany(p => p.POPOrderReturnLineArches)
                    .HasForeignKey(d => d.LandedCostsTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLineArch_LandedCostsType");

                entity.HasOne(d => d.LineType)
                    .WithMany(p => p.POPOrderReturnLineArches)
                    .HasForeignKey(d => d.LineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLineArch_OrderReturnLineType");

                entity.HasOne(d => d.POPOrdReturnLineDelAddress)
                    .WithMany(p => p.POPOrderReturnLineArches)
                    .HasForeignKey(d => d.POPOrdReturnLineDelAddressID)
                    .HasConstraintName("FK_POPOrderReturnLineArch_POPOrderReturnLineDelAddressArch");

                entity.HasOne(d => d.POPOrderReturn)
                    .WithMany(p => p.POPOrderReturnLineArches)
                    .HasForeignKey(d => d.POPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLineArch_POPOrderReturnArch");

                entity.HasOne(d => d.StockItemType)
                    .WithMany(p => p.POPOrderReturnLineArches)
                    .HasForeignKey(d => d.StockItemTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLineArch_StockItemType");

                entity.HasOne(d => d.TraceableType)
                    .WithMany(p => p.POPOrderReturnLineArches)
                    .HasForeignKey(d => d.TraceableTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPOrderReturnLineArch_TraceableType");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.POPOrderReturnLineArches)
                    .HasForeignKey(d => d.WarehouseID)
                    .HasConstraintName("FK_POPOrderReturnLineArch_Warehouse");
            });

            modelBuilder.Entity<POPOrderReturnType>(entity =>
            {
                entity.ToTable("POPOrderReturnType");

                entity.Property(e => e.POPOrderReturnTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPOrdersCurrentValuesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("POPOrdersCurrentValuesView");

                entity.Property(e => e.SumGross).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Symbol)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.ValueOfCurrentOrdersInPOP).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<POPRcptReturnLineArch>(entity =>
            {
                entity.HasKey(e => e.POPReceiptReturnLineID)
                    .HasName("PK_POPReceiptReturnLineArch");

                entity.ToTable("POPRcptReturnLineArch");

                entity.HasIndex(e => e.BinItemID, "IX_POPRcptReturnLineArch_BinItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnLineID, "IX_POPRcptReturnLineArch_POPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPRcptRtnLineSourceID, "IX_POPRcptReturnLineArch_POPRcptRtnLineSourceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPReceiptReturnID, "IX_POPRcptReturnLineArch_POPReceiptReturnID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPReceiptReturnLineID).ValueGeneratedNever();

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderReturnNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptReturnNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitBuyingPrice).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StockUnitInvCredQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitRcptRtnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierDocumentNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.BinItem)
                    .WithMany(p => p.POPRcptReturnLineArches)
                    .HasForeignKey(d => d.BinItemID)
                    .HasConstraintName("FK_POPReceiptReturnLineArch_BinItem");

                entity.HasOne(d => d.IntrastatStatus)
                    .WithMany(p => p.POPRcptReturnLineArches)
                    .HasForeignKey(d => d.IntrastatStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRcptReturnLineArch_IntrastatStatusID");

                entity.HasOne(d => d.POPOrderReturnLine)
                    .WithMany(p => p.POPRcptReturnLineArches)
                    .HasForeignKey(d => d.POPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPReceiptReturnLineArch_POPOrderReturnLineArch");

                entity.HasOne(d => d.POPRcptRtnLineSource)
                    .WithMany(p => p.POPRcptReturnLineArches)
                    .HasForeignKey(d => d.POPRcptRtnLineSourceID)
                    .HasConstraintName("FK_POPReceiptReturnLineArch_POPRcptRtnLineSource");
            });

            modelBuilder.Entity<POPRcptRtnInvCrdLineArch>(entity =>
            {
                entity.HasKey(e => e.POPRcptRtnInvCredLineID);

                entity.ToTable("POPRcptRtnInvCrdLineArch");

                entity.HasIndex(e => e.POPInvoiceCreditLineID, "IX_POPRcptRtnInvCrdLineArch_POPInvoiceCreditLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPReceiptReturnLineID, "IX_POPRcptRtnInvCrdLineArch_POPReceiptReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPRcptRtnInvCredLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StockUnitInvCredQuantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.IntrastatStatus)
                    .WithMany(p => p.POPRcptRtnInvCrdLineArches)
                    .HasForeignKey(d => d.IntrastatStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRcptRtnInvCrdLineArch_IntrastatStatusID");

                entity.HasOne(d => d.POPInvoiceCreditLine)
                    .WithMany(p => p.POPRcptRtnInvCrdLineArches)
                    .HasForeignKey(d => d.POPInvoiceCreditLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRcptRtnInvCrdLineArch_POPInvoiceCreditLineArch");

                entity.HasOne(d => d.POPReceiptReturnLine)
                    .WithMany(p => p.POPRcptRtnInvCrdLineArches)
                    .HasForeignKey(d => d.POPReceiptReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRcptRtnInvCrdLineArch_POPReceiptReturnLineArch");
            });

            modelBuilder.Entity<POPRcptRtnInvCredLine>(entity =>
            {
                entity.ToTable("POPRcptRtnInvCredLine");

                entity.HasIndex(e => e.POPInvoiceCreditLineID, "IX_POPRcptRtnInvCredLine_POPInvoiceCreditLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPReceiptReturnLineID, "IX_POPRcptRtnInvCredLine_POPReceiptReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPRcptRtnInvCredLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StockUnitInvCredQuantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.IntrastatStatus)
                    .WithMany(p => p.POPRcptRtnInvCredLines)
                    .HasForeignKey(d => d.IntrastatStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRcptRtnInvCredLine_IntrastatStatusID");

                entity.HasOne(d => d.POPInvoiceCreditLine)
                    .WithMany(p => p.POPRcptRtnInvCredLines)
                    .HasForeignKey(d => d.POPInvoiceCreditLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRcptRtnInvCredLine_POPInvoiceCreditLine");

                entity.HasOne(d => d.POPReceiptReturnLine)
                    .WithMany(p => p.POPRcptRtnInvCredLines)
                    .HasForeignKey(d => d.POPReceiptReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRcptRtnInvCredLine_POPReceiptReturnLine");
            });

            modelBuilder.Entity<POPRcptRtnLineSource>(entity =>
            {
                entity.ToTable("POPRcptRtnLineSource");

                entity.Property(e => e.POPRcptRtnLineSourceID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPReceiptReturn>(entity =>
            {
                entity.ToTable("POPReceiptReturn");

                entity.HasIndex(e => new { e.POPReceiptReturnTypeID, e.DocumentNo }, "IX_POPReceiptReturn_POPReceiptReturnTypeID_DocumentNo")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPReceiptReturnID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SupplierDocumentDate).HasColumnType("datetime");

                entity.Property(e => e.SupplierDocumentNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.POPReceiptReturnType)
                    .WithMany(p => p.POPReceiptReturns)
                    .HasForeignKey(d => d.POPReceiptReturnTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPReceiptReturn_POPReceiptReturnType");
            });

            modelBuilder.Entity<POPReceiptReturnLine>(entity =>
            {
                entity.ToTable("POPReceiptReturnLine");

                entity.HasIndex(e => e.BinItemID, "IX_POPReceiptReturnLine_BinItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnLineID, "IX_POPReceiptReturnLine_POPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPRcptRtnLineSourceID, "IX_POPReceiptReturnLine_POPRcptRtnLineSourceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPReceiptReturnID, "IX_POPReceiptReturnLine_POPReceiptReturnID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPReceiptReturnLineID).ValueGeneratedNever();

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderReturnNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptReturnNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockUnitInvCredQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitRcptRtnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.BinItem)
                    .WithMany(p => p.POPReceiptReturnLines)
                    .HasForeignKey(d => d.BinItemID)
                    .HasConstraintName("FK_POPReceiptReturnLine_BinItem");

                entity.HasOne(d => d.IntrastatStatus)
                    .WithMany(p => p.POPReceiptReturnLines)
                    .HasForeignKey(d => d.IntrastatStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPReceiptReturnLine_IntrastatStatusID");

                entity.HasOne(d => d.POPOrderReturnLine)
                    .WithMany(p => p.POPReceiptReturnLines)
                    .HasForeignKey(d => d.POPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPReceiptReturnLine_POPOrderReturnLine");

                entity.HasOne(d => d.POPRcptRtnLineSource)
                    .WithMany(p => p.POPReceiptReturnLines)
                    .HasForeignKey(d => d.POPRcptRtnLineSourceID)
                    .HasConstraintName("FK_POPReceiptReturnLine_POPRcptRtnLineSource");

                entity.HasOne(d => d.POPReceiptReturn)
                    .WithMany(p => p.POPReceiptReturnLines)
                    .HasForeignKey(d => d.POPReceiptReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPReceiptReturnLine_POPReceiptReturn");

                entity.HasOne(d => d.STKLabelPrintingOptionType)
                    .WithMany(p => p.POPReceiptReturnLines)
                    .HasForeignKey(d => d.STKLabelPrintingOptionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPReceiptReturnLine_STKLabelPrintingOptionTypeID");
            });

            modelBuilder.Entity<POPReceiptReturnType>(entity =>
            {
                entity.ToTable("POPReceiptReturnType");

                entity.Property(e => e.POPReceiptReturnTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPReorderLineStatus>(entity =>
            {
                entity.ToTable("POPReorderLineStatus");

                entity.Property(e => e.POPReorderLineStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPRequisition>(entity =>
            {
                entity.ToTable("POPRequisition");

                entity.HasIndex(e => e.DocumentNo, "IX_POPRequisition_DocumentNo")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPRequisitionID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.POPRequisitionCreatedByUserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RequesterComment)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.POPRequisitionAuthorisationStatus)
                    .WithMany(p => p.POPRequisitionPOPRequisitionAuthorisationStatuses)
                    .HasForeignKey(d => d.POPRequisitionAuthorisationStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRequisition_POPRequisitionAuthorisationStatus");

                entity.HasOne(d => d.POPRequisitionRejectedStatus)
                    .WithMany(p => p.POPRequisitionPOPRequisitionRejectedStatuses)
                    .HasForeignKey(d => d.POPRequisitionRejectedStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRequisition_POPRequisitionRejectedStatus");

                entity.HasOne(d => d.POPRequisitionStatus)
                    .WithMany(p => p.POPRequisitions)
                    .HasForeignKey(d => d.POPRequisitionStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRequisition_POPRequisitionStatus");
            });

            modelBuilder.Entity<POPRequisitionFulfilmentLine>(entity =>
            {
                entity.ToTable("POPRequisitionFulfilmentLine");

                entity.Property(e => e.POPRequisitionFulfilmentLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LinkedReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NominalAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.UnitBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.POPRequisitionFulfilmentLineType)
                    .WithMany(p => p.POPRequisitionFulfilmentLines)
                    .HasForeignKey(d => d.POPRequisitionFulfilmentLineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRequisitionFulfilmentLine_POPRequisitionFulfilmentLineType");

                entity.HasOne(d => d.POPRequisitionLine)
                    .WithMany(p => p.POPRequisitionFulfilmentLines)
                    .HasForeignKey(d => d.POPRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRequisitionFulfilmentLine_POPRequisitionLine");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.POPRequisitionFulfilmentLines)
                    .HasForeignKey(d => d.SupplierID)
                    .HasConstraintName("FK_POPRequisitionFulfilmentLine_Supplier");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.POPRequisitionFulfilmentLines)
                    .HasForeignKey(d => d.WarehouseID)
                    .HasConstraintName("FK_POPRequisitionFulfilmentLine_Warehouse");

                entity.HasOne(d => d.WarehouseItem)
                    .WithMany(p => p.POPRequisitionFulfilmentLines)
                    .HasForeignKey(d => d.WarehouseItemID)
                    .HasConstraintName("FK_POPRequisitionFulfilmentLine_WarehouseItem");
            });

            modelBuilder.Entity<POPRequisitionFulfilmentLineType>(entity =>
            {
                entity.ToTable("POPRequisitionFulfilmentLineType");

                entity.Property(e => e.POPRequisitionFulfilmentLineTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPRequisitionLine>(entity =>
            {
                entity.ToTable("POPRequisitionLine");

                entity.Property(e => e.POPRequisitionLineID).ValueGeneratedNever();

                entity.Property(e => e.AuthorisedDate).HasColumnType("datetime");

                entity.Property(e => e.AuthoriserComment)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuthoriserUserName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BuyingUnitDescription)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencySymbol)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NominalAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.QuantityFulfilled).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityToFulfil).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxRateName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UnitBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.NLReportCategoryBudget)
                    .WithMany(p => p.POPRequisitionLines)
                    .HasForeignKey(d => d.NLReportCategoryBudgetID)
                    .HasConstraintName("FK_POPRequisitionLine_NLReportCategoryBudget");

                entity.HasOne(d => d.POPRequisition)
                    .WithMany(p => p.POPRequisitionLines)
                    .HasForeignKey(d => d.POPRequisitionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRequisitionLine_POPRequisition");

                entity.HasOne(d => d.POPRequisitionStatus)
                    .WithMany(p => p.POPRequisitionLines)
                    .HasForeignKey(d => d.POPRequisitionStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPRequisitionLine_POPRequisitionStatus");
            });

            modelBuilder.Entity<POPRequisitionNumber>(entity =>
            {
                entity.ToTable("POPRequisitionNumber");

                entity.Property(e => e.POPRequisitionNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<POPRequisitionStatus>(entity =>
            {
                entity.ToTable("POPRequisitionStatus");

                entity.Property(e => e.POPRequisitionStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPReturnNumber>(entity =>
            {
                entity.ToTable("POPReturnNumber");

                entity.Property(e => e.POPReturnNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<POPSetting>(entity =>
            {
                entity.ToTable("POPSetting");

                entity.HasIndex(e => e.ModeOfTransportID, "IX_POPSetting_ModeOfTransportID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NatureOfTransCodeID, "IX_POPSetting_NatureOfTransCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TermsOfDeliveryID, "IX_POPSetting_TermsOfDeliveryID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPSettingID).ValueGeneratedNever();

                entity.Property(e => e.AllowUnauthorisedOrderProcessing)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AmendHeaderAnalysisCodes)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ArchiveLastPurgedUpTo).HasColumnType("datetime");

                entity.Property(e => e.AuthorisationThreshold).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CommittedIncludesGoodsReceived)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultFreeTextConfirmIntent).HasDefaultValueSql("((1))");

                entity.Property(e => e.DefaultServLabConfirmIntent).HasDefaultValueSql("((1))");

                entity.Property(e => e.IncludeBackToBackInOrderGeneration)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IntrastatDateTypeID).HasDefaultValueSql("((1))");

                entity.Property(e => e.LastArchiveRunBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastArchiveRunOn).HasColumnType("datetime");

                entity.Property(e => e.LastProveBalancesRunBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastProveBalancesRunOn).HasColumnType("datetime");

                entity.Property(e => e.LastPurgeArchiveRunBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastPurgeArchiveRunOn).HasColumnType("datetime");

                entity.Property(e => e.MarkServLabAsReceived)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MarkTextAsReceived)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MatchInvCredToOrdRetOnly)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrdRtnsLastArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.OrderListLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.ShowQtyGoodsReceived)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StockNominalAcctSameAs)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseOrderExchangeRateForPrices)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UserLogonAsOrderTaker)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VariancesNomAccountRef)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VariancesNomCostCentre)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VariancesNomDepartment)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.DefaultFreeTextConfirmIntentNavigation)
                    .WithMany(p => p.POPSettingDefaultFreeTextConfirmIntentNavigations)
                    .HasForeignKey(d => d.DefaultFreeTextConfirmIntent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPSetting_ConfirmationIntentType2");

                entity.HasOne(d => d.DefaultServLabConfirmIntentNavigation)
                    .WithMany(p => p.POPSettingDefaultServLabConfirmIntentNavigations)
                    .HasForeignKey(d => d.DefaultServLabConfirmIntent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPSetting_ConfirmationIntentType1");

                entity.HasOne(d => d.IntrastatDateType)
                    .WithMany(p => p.POPSettings)
                    .HasForeignKey(d => d.IntrastatDateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPSetting_IntrastatDateType");

                entity.HasOne(d => d.ModeOfTransport)
                    .WithMany(p => p.POPSettings)
                    .HasForeignKey(d => d.ModeOfTransportID)
                    .HasConstraintName("FK_POPSetting_ModeOfTransport");

                entity.HasOne(d => d.NatureOfTransCode)
                    .WithMany(p => p.POPSettings)
                    .HasForeignKey(d => d.NatureOfTransCodeID)
                    .HasConstraintName("FK_POPSetting_NatureOfTransCode");

                entity.HasOne(d => d.POPOrderGenerationType)
                    .WithMany(p => p.POPSettings)
                    .HasForeignKey(d => d.POPOrderGenerationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPSetting_POPOrderGenerationType");

                entity.HasOne(d => d.PriceDifferenceNLAccount)
                    .WithMany(p => p.POPSettings)
                    .HasForeignKey(d => d.PriceDifferenceNLAccountID)
                    .HasConstraintName("FK_POPSetting_NLNominalAccount");

                entity.HasOne(d => d.TermsOfDelivery)
                    .WithMany(p => p.POPSettings)
                    .HasForeignKey(d => d.TermsOfDeliveryID)
                    .HasConstraintName("FK_POPSetting_TermsOfDelivery");
            });

            modelBuilder.Entity<POPStandardItemLink>(entity =>
            {
                entity.ToTable("POPStandardItemLink");

                entity.HasIndex(e => e.BuyingPriceUnitID, "IX_POPStandardItemLink_BuyingPriceUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BuyingUnitID, "IX_POPStandardItemLink_BuyingUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ItemID, "IX_POPStandardItemLink_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnLineID, "IX_POPStandardItemLink_POPOrderReturnLineID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseItemID, "IX_POPStandardItemLink_WarehouseItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPStandardItemLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.BuyingPriceUnit)
                    .WithMany(p => p.POPStandardItemLinkBuyingPriceUnits)
                    .HasForeignKey(d => d.BuyingPriceUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPStandardItemLink_StockItemUnit1");

                entity.HasOne(d => d.BuyingUnit)
                    .WithMany(p => p.POPStandardItemLinkBuyingUnits)
                    .HasForeignKey(d => d.BuyingUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPStandardItemLink_StockItemUnit");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.POPStandardItemLinks)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPStandardItemLink_StockItem");

                entity.HasOne(d => d.POPOrderReturnLine)
                    .WithOne(p => p.POPStandardItemLink)
                    .HasForeignKey<POPStandardItemLink>(d => d.POPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPStandardItemLink_POPOrderReturnLine");

                entity.HasOne(d => d.WarehouseItem)
                    .WithMany(p => p.POPStandardItemLinks)
                    .HasForeignKey(d => d.WarehouseItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPStandardItemLink_WarehouseItem");
            });

            modelBuilder.Entity<POPStandardItemLinkArch>(entity =>
            {
                entity.HasKey(e => e.POPStandardItemLinkID);

                entity.ToTable("POPStandardItemLinkArch");

                entity.HasIndex(e => e.BuyingPriceUnitID, "IX_POPStandardItemLinkArch_BuyingPriceUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BuyingUnitID, "IX_POPStandardItemLinkArch_BuyingUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ItemID, "IX_POPStandardItemLinkArch_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnLineID, "IX_POPStandardItemLinkArch_POPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseItemID, "IX_POPStandardItemLinkArch_WarehouseItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPStandardItemLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.BuyingPriceUnit)
                    .WithMany(p => p.POPStandardItemLinkArchBuyingPriceUnits)
                    .HasForeignKey(d => d.BuyingPriceUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPStandardItemLinkArch_StockItemUnit1");

                entity.HasOne(d => d.BuyingUnit)
                    .WithMany(p => p.POPStandardItemLinkArchBuyingUnits)
                    .HasForeignKey(d => d.BuyingUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPStandardItemLinkArch_StockItemUnit");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.POPStandardItemLinkArches)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPStandardItemLinkArch_StockItem");

                entity.HasOne(d => d.POPOrderReturnLine)
                    .WithMany(p => p.POPStandardItemLinkArches)
                    .HasForeignKey(d => d.POPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPStandardItemLinkArch_POPOrderReturnLineArch");

                entity.HasOne(d => d.WarehouseItem)
                    .WithMany(p => p.POPStandardItemLinkArches)
                    .HasForeignKey(d => d.WarehouseItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPStandardItemLinkArch_WarehouseItem");
            });

            modelBuilder.Entity<POPToReorderItem>(entity =>
            {
                entity.ToTable("POPToReorderItem");

                entity.HasIndex(e => e.ItemID, "IX_POPToReorderItem_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ToReorderItemStatusID, "IX_POPToReorderItem_ToReorderItemStatusID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPToReorderItemID).ValueGeneratedNever();

                entity.Property(e => e.ConfirmedPurchaseValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityConfirmed).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityRequired).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnit)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.POPToReorderItems)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPToReorderItem_StockItem");

                entity.HasOne(d => d.ToReorderItemStatus)
                    .WithMany(p => p.POPToReorderItems)
                    .HasForeignKey(d => d.ToReorderItemStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPToReorderItem_POPToReorderItemStatus");
            });

            modelBuilder.Entity<POPToReorderItemStatus>(entity =>
            {
                entity.ToTable("POPToReorderItemStatus");

                entity.Property(e => e.POPToReorderItemStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POPToReorderSOPLine>(entity =>
            {
                entity.ToTable("POPToReorderSOPLine");

                entity.HasIndex(e => e.POPReorderLineStatusID, "IX_POPToReorderSOPLine_POPReorderLineStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPToReorderWarehouseID, "IX_POPToReorderSOPLine_POPToReorderWarehouseID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnID, "IX_POPToReorderSOPLine_SOPOrderReturnID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnLineID, "IX_POPToReorderSOPLine_SOPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPToReorderSOPLineID).ValueGeneratedNever();

                entity.Property(e => e.CustomerAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityRequired).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SOPOrderDate).HasColumnType("datetime");

                entity.Property(e => e.SOPOrderNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.POPReorderLineStatus)
                    .WithMany(p => p.POPToReorderSOPLines)
                    .HasForeignKey(d => d.POPReorderLineStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPToReorderSOPLine_POPReorderLineStatus");

                entity.HasOne(d => d.POPToReorderWarehouse)
                    .WithMany(p => p.POPToReorderSOPLines)
                    .HasForeignKey(d => d.POPToReorderWarehouseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPToReorderSOPLine_POPToReorderWarehouse");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.POPToReorderSOPLines)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .HasConstraintName("FK_POPToReorderSOPLine_SOPOrderReturn");

                entity.HasOne(d => d.SOPOrderReturnLine)
                    .WithMany(p => p.POPToReorderSOPLines)
                    .HasForeignKey(d => d.SOPOrderReturnLineID)
                    .HasConstraintName("FK_POPToReorderSOPLine_SOPOrderReturnLine");
            });

            modelBuilder.Entity<POPToReorderWarehouse>(entity =>
            {
                entity.ToTable("POPToReorderWarehouse");

                entity.HasIndex(e => e.POPToReorderItemID, "IX_POPToReorderWarehouse_POPToReorderItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierID, "IX_POPToReorderWarehouse_SupplierID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseItemID, "IX_POPToReorderWarehouse_WarehouseItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POPToReorderWarehouseID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityRequired).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityToPurchase).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WarehouseReorderLevel).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.POPToReorderItem)
                    .WithMany(p => p.POPToReorderWarehouses)
                    .HasForeignKey(d => d.POPToReorderItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPToReorderWarehouse_POPToReorderItem");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.POPToReorderWarehouses)
                    .HasForeignKey(d => d.SupplierID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPToReorderWarehouse_PLSupplierAccount");

                entity.HasOne(d => d.WarehouseItem)
                    .WithMany(p => p.POPToReorderWarehouses)
                    .HasForeignKey(d => d.WarehouseItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_POPToReorderWarehouse_WarehouseItem");
            });

            modelBuilder.Entity<PSCondOperatorDescriptor>(entity =>
            {
                entity.ToTable("PSCondOperatorDescriptor");

                entity.HasIndex(e => e.PSCondOperatorTypeID, "IX_PSCondOperatorDescriptor_PSCondOperatorTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PSCondOperatorDescriptorID).ValueGeneratedNever();

                entity.HasOne(d => d.PSCondOperatorType)
                    .WithMany(p => p.PSCondOperatorDescriptors)
                    .HasForeignKey(d => d.PSCondOperatorTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PSCondOperatorDescriptor_PSCondOperatorType");
            });

            modelBuilder.Entity<PSCondOperatorType>(entity =>
            {
                entity.ToTable("PSCondOperatorType");

                entity.Property(e => e.PSCondOperatorTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PSDisplayField>(entity =>
            {
                entity.ToTable("PSDisplayField");

                entity.HasIndex(e => e.PSFieldDescriptorID, "IX_PSDisplayField_PSFieldDescriptorID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PSSearchID, "IX_PSDisplayField_PSSearchID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PSDisplayFieldID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PSFieldDescriptor)
                    .WithMany(p => p.PSDisplayFields)
                    .HasForeignKey(d => d.PSFieldDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PSDisplayField_PSFieldDescriptor");

                entity.HasOne(d => d.PSSearch)
                    .WithMany(p => p.PSDisplayFields)
                    .HasForeignKey(d => d.PSSearchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PSDisplayField_PSSearch");
            });

            modelBuilder.Entity<PSExpressionLine>(entity =>
            {
                entity.ToTable("PSExpressionLine");

                entity.HasIndex(e => e.PSCondOperatorDescriptorID, "IX_PSExpressionLine_PSCondOperatorDescriptorID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PSFieldDescriptorID, "IX_PSExpressionLine_PSFieldDescriptorID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PSLogicalOperatorDescriptorID, "IX_PSExpressionLine_PSLogicalOperatorDescriptorID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PSSearchID, "IX_PSExpressionLine_PSSearchID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PSExpressionLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.PSCondOperatorDescriptor)
                    .WithMany(p => p.PSExpressionLines)
                    .HasForeignKey(d => d.PSCondOperatorDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PSExpressionLine_PSCondOperatorDescriptor");

                entity.HasOne(d => d.PSFieldDescriptor)
                    .WithMany(p => p.PSExpressionLines)
                    .HasForeignKey(d => d.PSFieldDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PSExpressionLine_PSFieldDescriptor");

                entity.HasOne(d => d.PSLogicalOperatorDescriptor)
                    .WithMany(p => p.PSExpressionLines)
                    .HasForeignKey(d => d.PSLogicalOperatorDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PSExpressionLine_PSLogicalOperatorDescriptor");

                entity.HasOne(d => d.PSSearch)
                    .WithMany(p => p.PSExpressionLines)
                    .HasForeignKey(d => d.PSSearchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PSExpressionLine_PSSearch");
            });

            modelBuilder.Entity<PSFieldDescriptor>(entity =>
            {
                entity.ToTable("PSFieldDescriptor");

                entity.Property(e => e.PSFieldDescriptorID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PSLogicalOperatorDescriptor>(entity =>
            {
                entity.ToTable("PSLogicalOperatorDescriptor");

                entity.HasIndex(e => e.PSLogicalOperatorTypeID, "IX_PSLogicalOperatorDescriptor_PSLogicalOperatorTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PSLogicalOperatorDescriptorID).ValueGeneratedNever();

                entity.HasOne(d => d.PSLogicalOperatorType)
                    .WithMany(p => p.PSLogicalOperatorDescriptors)
                    .HasForeignKey(d => d.PSLogicalOperatorTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PSLogicalOperatorDescriptor_PSLogicalOperatorType");
            });

            modelBuilder.Entity<PSLogicalOperatorType>(entity =>
            {
                entity.ToTable("PSLogicalOperatorType");

                entity.Property(e => e.PSLogicalOperatorTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PSSearch>(entity =>
            {
                entity.ToTable("PSSearch");

                entity.Property(e => e.PSSearchID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PSSearchField>(entity =>
            {
                entity.ToTable("PSSearchField");

                entity.HasIndex(e => e.PSFieldDescriptorID, "IX_PSSearchField_PSFieldDescriptorID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PSSearchID, "IX_PSSearchField_PSSearchID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PSSearchFieldID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PSFieldDescriptor)
                    .WithMany(p => p.PSSearchFields)
                    .HasForeignKey(d => d.PSFieldDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PSSearchField_PSFieldDescriptor");

                entity.HasOne(d => d.PSSearch)
                    .WithMany(p => p.PSSearchFields)
                    .HasForeignKey(d => d.PSSearchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PSSearchField_PSSearch");
            });

            modelBuilder.Entity<PayPortGroupDiscVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PayPortGroupDiscVw");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DiscGrpName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DiscountPercentValue).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PriceBandName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityMoreThan).HasColumnType("decimal(15, 5)");
            });

            modelBuilder.Entity<PayPortItemDiscVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PayPortItemDiscVw");

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.DiscGrpName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DiscountAmountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DiscountPercentValue).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PriceBandName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityMoreThan).HasColumnType("decimal(15, 5)");
            });

            modelBuilder.Entity<PaymentCloudPayNowMessage>(entity =>
            {
                entity.ToTable("PaymentCloudPayNowMessage");

                entity.Property(e => e.PaymentCloudPayNowMessageID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PaymentCloudPaymentStatusType>(entity =>
            {
                entity.ToTable("PaymentCloudPaymentStatusType");

                entity.Property(e => e.PaymentCloudPaymentStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PaymentCloudSetting>(entity =>
            {
                entity.ToTable("PaymentCloudSetting");

                entity.Property(e => e.PaymentCloudSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentCloudDownloadDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PaymentInvCredLineType>(entity =>
            {
                entity.ToTable("PaymentInvCredLineType");

                entity.Property(e => e.PaymentInvCredLineTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PaymentInvoiceStatus>(entity =>
            {
                entity.ToTable("PaymentInvoiceStatus");

                entity.Property(e => e.PaymentInvoiceStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PaymentType>(entity =>
            {
                entity.ToTable("PaymentType");

                entity.Property(e => e.PaymentTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PlanMakeForStock>(entity =>
            {
                entity.ToTable("PlanMakeForStock");

                entity.HasIndex(e => e.ProductCode, "IX_PlanMakeForStock_ProductCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_PlanMakeForStock_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding)
                    .HasColumnType("decimal(19, 5)")
                    .HasComputedColumnSql("([Quantity]-[QtyCompleted])", false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(6)
                    .HasComputedColumnSql("(right('000000'+CONVERT([nvarchar],[ID],(0)),(6)))", false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('Entered')");
            });

            modelBuilder.Entity<PlanMpsItem>(entity =>
            {
                entity.HasIndex(e => e.Header, "IX_PlanMpsItems_Header")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StageID, "IX_PlanMpsItems_StageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueIdentifier, "IX_PlanMpsItems_UniqueIdentifier")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_PlanMpsItems_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AccRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Category).HasDefaultValueSql("((0))");

                entity.Property(e => e.Comment_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Comment_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustOrderNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerAnalysis_1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerAnalysis_2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerAnalysis_3)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ExclusionReason)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LinkedTo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UniqueIdentifier).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<PlanMrpDemand>(entity =>
            {
                entity.ToTable("PlanMrpDemand");

                entity.HasIndex(e => e.Category, "IX_PlanMrpDemand_Category")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OpID, "IX_PlanMrpDemand_OpID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProductCode, "IX_PlanMrpDemand_ProductCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StageID, "IX_PlanMrpDemand_StageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueIdentifier, "IX_PlanMrpDemand_UniqueIdentifier")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_PlanMrpDemand_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Category).HasDefaultValueSql("((0))");

                entity.Property(e => e.Comment_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Comment_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSuppAcc)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EstSuppAccRef)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpSource)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WarehouseID).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PlanMrpException>(entity =>
            {
                entity.HasIndex(e => e.ProductCode, "IX_PlanMrpExceptions_ProductCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceItem)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<PlanMrpOpeningStock>(entity =>
            {
                entity.ToTable("PlanMrpOpeningStock");

                entity.HasIndex(e => e.ProductCode, "IX_PlanMrpOpeningStock_ProductCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ProductCode, e.WarehouseID }, "IX_PlanMrpOpeningStock_ProductCode+WarehouseID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_PlanMrpOpeningStock_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeRead).HasColumnType("datetime");

                entity.Property(e => e.PhysicalStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<PlanMrpRecommendation>(entity =>
            {
                entity.HasIndex(e => new { e.RecNumber, e.ID, e.StartDate }, "IX_PlanMRPRecommendations_WorksOrdersView")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomID, "IX_PlanMrpRecommendations_BomID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BuyerCodeSalutationID, "IX_PlanMrpRecommendations_BuyerCodeSalutationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DelAddressCountryID, "IX_PlanMrpRecommendations_DelAddressCountryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OpID, "IX_PlanMrpRecommendations_OpID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProductCode, "IX_PlanMrpRecommendations_ProductCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SplitID, "IX_PlanMrpRecommendations_SplitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StageID, "IX_PlanMrpRecommendations_StageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_PlanMrpRecommendations_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WoID, "IX_PlanMrpRecommendations_WoID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuyerCode)
                    .IsRequired()
                    .HasMaxLength(235)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuyerCodeFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuyerCodeLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuyerCodeMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BuyerCodePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreatedReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddress_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddress_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddress_3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddress_4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddress_5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DemandQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueInQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NetFree).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpSource)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PONumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentTag)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PhysicalStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Priority).HasDefaultValueSql("((9))");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rec1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Rec2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecNumber)
                    .HasMaxLength(9)
                    .HasComputedColumnSql("('MRP'+right('000000'+CONVERT([nvarchar],[ID],0),(6)))", false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('Entered')");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WarehouseID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.BuyerCodeSalutation)
                    .WithMany(p => p.PlanMrpRecommendations)
                    .HasForeignKey(d => d.BuyerCodeSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanMrpRecommendations_BuyerCodeSalutationID");

                entity.HasOne(d => d.DelAddressCountry)
                    .WithMany(p => p.PlanMrpRecommendations)
                    .HasForeignKey(d => d.DelAddressCountryID)
                    .HasConstraintName("FK_PlanMrpRecommendations_DelAddressCountryID");
            });

            modelBuilder.Entity<PlanMrpRecommendationsRouting>(entity =>
            {
                entity.ToTable("PlanMrpRecommendationsRouting");

                entity.HasIndex(e => e.HeaderID, "IX_PlanMrpRecommendationsRouting_HeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DelayHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelayMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupHrs).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople)
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LabourReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Overlap).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RunTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.RunTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5To).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupStart).HasColumnType("datetime");

                entity.Property(e => e.SetupTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContLeadTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubContractProcess_).HasColumnName("SubContractProcess?");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.PlanMrpRecommendationsRoutings)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PlanMrpRecommendationsRouting_PlanMrpRecommendations");
            });

            modelBuilder.Entity<PlanMrpRecommendationsTag>(entity =>
            {
                entity.HasIndex(e => new { e.DestinationItem, e.SourceItem, e.SourceItemDisplay }, "IX_PlanMRPRecommendationsTags_WorksOrdersView")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceItem, "IX_PlanMrpRecommendationsTags_SourceItem")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DestinationItem).HasMaxLength(100);

                entity.Property(e => e.DestinationItemDisplay).HasMaxLength(100);

                entity.Property(e => e.SourceItem).HasMaxLength(100);

                entity.Property(e => e.SourceItemDisplay).HasMaxLength(100);

                entity.Property(e => e.UniqueIdentifier).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PlanMrpReplenishment>(entity =>
            {
                entity.HasIndex(e => e.ProductCode, "IX_PlanMrpReplenishments_ProductCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_PlanMrpReplenishments_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.PoLineReference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QtyIn).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyUsed).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WarehouseID).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PlanMrpUsageLevel>(entity =>
            {
                entity.HasKey(e => e.ProductCode);

                entity.HasIndex(e => e.ProductCode, "IX_PlanMrpUsageLevels_ProductCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<PriceBand>(entity =>
            {
                entity.ToTable("PriceBand");

                entity.HasIndex(e => e.Name, "IX_PriceBand")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CurrencyID, "IX_PriceBand_CurrencyID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PriceBandID).ValueGeneratedNever();

                entity.Property(e => e.ActiveDateTimeFrom).HasColumnType("datetime");

                entity.Property(e => e.ActiveDateTimeTo).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PriceBandTypeID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.PriceBands)
                    .HasForeignKey(d => d.CurrencyID)
                    .HasConstraintName("FK_PriceBand_SYSCurrency");

                entity.HasOne(d => d.PriceBandType)
                    .WithMany(p => p.PriceBands)
                    .HasForeignKey(d => d.PriceBandTypeID)
                    .HasConstraintName("FK_PriceBand_PriceBand");
            });

            modelBuilder.Entity<PriceBandType>(entity =>
            {
                entity.ToTable("PriceBandType");

                entity.Property(e => e.PriceBandTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PriceBookSetting>(entity =>
            {
                entity.ToTable("PriceBookSetting");

                entity.Property(e => e.PriceBookSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ProdGroupNominalCode>(entity =>
            {
                entity.HasKey(e => new { e.ProductGroupID, e.NominalUsageID });

                entity.ToTable("ProdGroupNominalCode");

                entity.HasIndex(e => e.NominalCodeID, "IX_ProdGroupNominalCode_NominalCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NominalUsageID, "IX_ProdGroupNominalCode_NominalUsageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProdGroupNominalCodeID, "IX_ProdGroupNominalCode_ProdGroupNominalCodeID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NominalCode)
                    .WithMany(p => p.ProdGroupNominalCodes)
                    .HasForeignKey(d => d.NominalCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdGroupNominalCode_NLNominalAccount");

                entity.HasOne(d => d.NominalUsage)
                    .WithMany(p => p.ProdGroupNominalCodes)
                    .HasForeignKey(d => d.NominalUsageID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdGroupNominalCode_NominalUsage");

                entity.HasOne(d => d.ProductGroup)
                    .WithMany(p => p.ProdGroupNominalCodes)
                    .HasForeignKey(d => d.ProductGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdGroupNominalCode_ProductGroup");
            });

            modelBuilder.Entity<ProdGroupQtyDiscBreak>(entity =>
            {
                entity.ToTable("ProdGroupQtyDiscBreak");

                entity.HasIndex(e => e.ProductGroupDiscountID, "IX_ProdGroupQtyDiscBreak_ProductGroupDiscountID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ProdGroupQtyDiscBreakID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountPercentValue).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityMoreThan).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.ProductGroupDiscount)
                    .WithMany(p => p.ProdGroupQtyDiscBreaks)
                    .HasForeignKey(d => d.ProductGroupDiscountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdGroupQtyDiscBreak_ProductGroupDiscount");
            });

            modelBuilder.Entity<ProdGroupSearchCat>(entity =>
            {
                entity.HasKey(e => new { e.ProductGroupID, e.SearchCategoryID });

                entity.ToTable("ProdGroupSearchCat");

                entity.HasIndex(e => e.ProdGroupSearchCatID, "IX_ProdGroupSearchCat_ProdGroupSearchCatID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProductGroupID, "IX_ProdGroupSearchCat_ProductGroupID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SearchCategoryID, "IX_ProdGroupSearchCat_SearchCategoryID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ProductGroup)
                    .WithMany(p => p.ProdGroupSearchCats)
                    .HasForeignKey(d => d.ProductGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdGroupSearchCat_ProductGroup");

                entity.HasOne(d => d.SearchCategory)
                    .WithMany(p => p.ProdGroupSearchCats)
                    .HasForeignKey(d => d.SearchCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdGroupSearchCat_SearchCategory");
            });

            modelBuilder.Entity<ProdGroupSearchVal>(entity =>
            {
                entity.HasKey(e => new { e.ProdGroupSearchCatID, e.SearchValueID });

                entity.ToTable("ProdGroupSearchVal");

                entity.HasIndex(e => e.ProdGroupSearchValID, "IX_ProdGroupSearchVal_ProdGroupSeachValID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProdGroupSearchCatID, "IX_ProdGroupSearchVal_ProdGroupSearchCatID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SearchValueID, "IX_ProdGroupSearchVal_SearchValueID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ProdGroupSearchCat)
                    .WithMany(p => p.ProdGroupSearchVals)
                    .HasPrincipalKey(p => p.ProdGroupSearchCatID)
                    .HasForeignKey(d => d.ProdGroupSearchCatID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdGroupSearchVal_ProdGroupSearchCat1");

                entity.HasOne(d => d.SearchValue)
                    .WithMany(p => p.ProdGroupSearchVals)
                    .HasForeignKey(d => d.SearchValueID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdGroupSearchVal_SearchValue");
            });

            modelBuilder.Entity<ProductGroup>(entity =>
            {
                entity.ToTable("ProductGroup");

                entity.HasIndex(e => e.Code, "IX_ProductGroup_Code")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CostingMethodID, "IX_ProductGroup_CostingMethodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemTypeID, "IX_ProductGroup_StockItemTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableTypeID, "IX_ProductGroup_TraceableTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ProductGroupID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DoItemsMaintainHistory)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LandedCostsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LastArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.LastTraceArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.MarkupPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CostingMethod)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.CostingMethodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroup_CostingMethod");

                entity.HasOne(d => d.LandedCostsType)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.LandedCostsTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroup_LandedCostsType");

                entity.HasOne(d => d.STKLabelPrintingOptionType)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.STKLabelPrintingOptionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroup_STKLabelPrintingOptionTypeID");

                entity.HasOne(d => d.StockItemType)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.StockItemTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroup_StockItemType");

                entity.HasOne(d => d.TraceableType)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.TraceableTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroup_TraceableType");
            });

            modelBuilder.Entity<ProductGroupBatchAttribute>(entity =>
            {
                entity.ToTable("ProductGroupBatchAttribute");

                entity.HasIndex(e => e.ProductGroupID, "IX_ProductGroupBatchAttribute_ProductGroupID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ProductGroupBatchAttributeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultValue)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.IsInUse)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.ProductGroup)
                    .WithMany(p => p.ProductGroupBatchAttributes)
                    .HasForeignKey(d => d.ProductGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroupBatchAttribute_ProductGroup");
            });

            modelBuilder.Entity<ProductGroupDiscount>(entity =>
            {
                entity.ToTable("ProductGroupDiscount");

                entity.HasIndex(e => e.Name, "IX_ProductGroupDiscount_Name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ProductGroupID, e.Name }, "IX_ProductGroupDiscount_ProductGroupID_Name")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ProductGroupDiscountID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ProductGroup)
                    .WithMany(p => p.ProductGroupDiscounts)
                    .HasForeignKey(d => d.ProductGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroupDiscount_ProductGroup");
            });

            modelBuilder.Entity<ProductGroupUnit>(entity =>
            {
                entity.ToTable("ProductGroupUnit");

                entity.HasIndex(e => e.ProductGroupID, "IX_ProductGroupUnit_ProductGroupID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UnitID, "IX_ProductGroupUnit_UnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UnitOfMeasureTypeID, "IX_ProductGroupUnit_UnitOfMeasureTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ProductGroupUnitID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MultipleOfBaseUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UnitPrecision).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.ProductGroup)
                    .WithMany(p => p.ProductGroupUnits)
                    .HasForeignKey(d => d.ProductGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroupUnit_ProductGroup");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ProductGroupUnits)
                    .HasForeignKey(d => d.UnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroupUnit_Unit");

                entity.HasOne(d => d.UnitOfMeasureType)
                    .WithMany(p => p.ProductGroupUnits)
                    .HasForeignKey(d => d.UnitOfMeasureTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroupUnit_UnitOfMeasureType");
            });

            modelBuilder.Entity<Prospect>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_ProspectsPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.AccountRef, "IX_ProspectsAccountRef")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.AccountManagerSalutationID, "IX_Prospects_AccountManagerSalutationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.AddressCountryID, "IX_Prospects_AddressCountryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ContactSalutationID, "IX_Prospects_ContactSalutationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DelAddressCountryID, "IX_Prospects_DelAddressCountryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DelContactSalutationID, "IX_Prospects_DelContactSalutationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SalesRepSalutationID, "IX_Prospects_SalesRepSalutationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TradeContactSalutationID, "IX_Prospects_TradeContactSalutationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AccountManager)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.AccountManagerFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountManagerLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountManagerMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountManagerPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.AddressCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#1");

                entity.Property(e => e.Address_2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#2");

                entity.Property(e => e.Address_3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#3");

                entity.Property(e => e.Address_4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#4");

                entity.Property(e => e.Address_5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#5");

                entity.Property(e => e.Contact)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustName).HasMaxLength(60);

                entity.Property(e => e.DelAddressCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelAddress_1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DelAddress#1");

                entity.Property(e => e.DelAddress_2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DelAddress#2");

                entity.Property(e => e.DelAddress_3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DelAddress#3");

                entity.Property(e => e.DelAddress_4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DelAddress#4");

                entity.Property(e => e.DelAddress_5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DelAddress#5");

                entity.Property(e => e.DelContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelContactName)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.DelContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelFaxAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelFaxCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelFaxNumber)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DelFaxPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelFaxSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelTelNumber)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DelTelephoneAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelTelephoneCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelTelephonePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelTelephoneSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EMailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FaxAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.FaxPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.SalesRep)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRepFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesRepLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesRepMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesRepPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelNumber_1)
                    .HasMaxLength(227)
                    .IsUnicode(false)
                    .HasColumnName("TelNumber#1");

                entity.Property(e => e.TelNumber_2)
                    .HasMaxLength(227)
                    .IsUnicode(false)
                    .HasColumnName("TelNumber#2");

                entity.Property(e => e.Telephone1AreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telephone1CountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telephone1PreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telephone1SubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telephone2AreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telephone2CountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telephone2PreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telephone2SubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TradeContact)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.TradeContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TradeContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TradeContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TradeContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VatRegNumber).HasMaxLength(30);

                entity.Property(e => e.WebAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.AccountManagerSalutation)
                    .WithMany(p => p.ProspectAccountManagerSalutations)
                    .HasForeignKey(d => d.AccountManagerSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Prospects_AccountManagerSalutationID");

                entity.HasOne(d => d.AddressCountry)
                    .WithMany(p => p.ProspectAddressCountries)
                    .HasForeignKey(d => d.AddressCountryID)
                    .HasConstraintName("FK_Prospects_AddressCountryID");

                entity.HasOne(d => d.ContactSalutation)
                    .WithMany(p => p.ProspectContactSalutations)
                    .HasForeignKey(d => d.ContactSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Prospects_ContactSalutationID");

                entity.HasOne(d => d.DelAddressCountry)
                    .WithMany(p => p.ProspectDelAddressCountries)
                    .HasForeignKey(d => d.DelAddressCountryID)
                    .HasConstraintName("FK_Prospects_DelAddressCountryID");

                entity.HasOne(d => d.DelContactSalutation)
                    .WithMany(p => p.ProspectDelContactSalutations)
                    .HasForeignKey(d => d.DelContactSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Prospects_DelContactSalutationID");

                entity.HasOne(d => d.SalesRepSalutation)
                    .WithMany(p => p.ProspectSalesRepSalutations)
                    .HasForeignKey(d => d.SalesRepSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Prospects_SalesRepSalutationID");

                entity.HasOne(d => d.TradeContactSalutation)
                    .WithMany(p => p.ProspectTradeContactSalutations)
                    .HasForeignKey(d => d.TradeContactSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Prospects_TradeContactSalutationID");
            });

            modelBuilder.Entity<RTLActiveLock>(entity =>
            {
                entity.HasKey(e => e.LockId);

                entity.ToTable("RTLActiveLock");

                entity.HasIndex(e => e.SYSUserLoginID, "IX_RTLActiveLock_SYSUserLoginID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LockId).ValueGeneratedNever();

                entity.Property(e => e.Data)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OptionName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.TimeCreated).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Workstation)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLActivityLog>(entity =>
            {
                entity.HasKey(e => e.ActLogId);

                entity.ToTable("RTLActivityLog");

                entity.Property(e => e.ActLogId).ValueGeneratedNever();

                entity.Property(e => e.ActDateTime).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MachineName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLBarCode>(entity =>
            {
                entity.HasKey(e => e.BarCodeId);

                entity.HasIndex(e => e.BarCode, "IX_RTLBarCodes_BarCode")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BarCodeTypeId, "IX_RTLBarCodes_BarCodeTypeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLBarCodes_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemCode, "IX_RTLBarCodes_StockItemCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierReference, "IX_RTLBarCodes_SupplierReference")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BarCodeId).ValueGeneratedNever();

                entity.Property(e => e.BarCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StockItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierReference)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLBarCodeType>(entity =>
            {
                entity.HasKey(e => e.BarCodeTypeId);

                entity.Property(e => e.BarCodeTypeId).ValueGeneratedNever();

                entity.Property(e => e.BarCodeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLDeliveryRoute>(entity =>
            {
                entity.HasKey(e => e.DelRouteId)
                    .HasName("PK_DeliveryRoutes");

                entity.Property(e => e.DelRouteId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLDimensionSet>(entity =>
            {
                entity.HasKey(e => e.DimeSetId);

                entity.HasIndex(e => e.DimeSetId, "IX_RTLDimensionSets")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DimeId, "IX_RTLDimensionSets_DimeId")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DimeSetId).ValueGeneratedNever();

                entity.Property(e => e.Caption)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLDimensionSetsBreakup>(entity =>
            {
                entity.HasKey(e => e.DimeSetSubId);

                entity.ToTable("RTLDimensionSetsBreakup");

                entity.HasIndex(e => e.Description, "IX_RTLDimensionSetsBreakup_Description")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DimeId, "IX_RTLDimensionSetsBreakup_DimeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DimeSetId, "IX_RTLDimensionSetsBreakup_DimeSetId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DimeSetSubId, "IX_RTLDimensionSetsBreakup_DimeSetSubId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DimeSubId, "IX_RTLDimensionSetsBreakup_DimeSubId")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DimeSetSubId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLDimensionType>(entity =>
            {
                entity.HasKey(e => e.DimeId)
                    .HasName("PK_DimensionTypes");

                entity.Property(e => e.DimeId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLDimensionsBreakup>(entity =>
            {
                entity.HasKey(e => e.DimeSubId)
                    .HasName("PK_DimensionsBreakup");

                entity.ToTable("RTLDimensionsBreakup");

                entity.HasIndex(e => e.Description, "IX_RTLDimensionsBreakup_Description")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DimeId, "IX_RTLDimensionsBreakup_DimeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DimeSubId, "IX_RTLDimensionsBreakup_DimeSubId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DimeSubId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLDispatch>(entity =>
            {
                entity.HasKey(e => e.DispatchId);

                entity.HasIndex(e => e.DispatchId, "IX_RTLDispatches_DispatchId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HierNodeId, "IX_RTLDispatches_HierNodeId")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DispatchId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DispatchDate).HasColumnType("datetime");

                entity.Property(e => e.DispatchRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchUser)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLDispatchBreakup>(entity =>
            {
                entity.HasKey(e => e.DispatchBrkId);

                entity.ToTable("RTLDispatchBreakup");

                entity.HasIndex(e => e.DispatchBrkId, "IX_RTLDispatchBreakup_DispatchBrkId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DispatchId, "IX_RTLDispatchBreakup_DispatchId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLDispatchBreakup_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DispatchBrkId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PickListRef)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLEmployee>(entity =>
            {
                entity.HasKey(e => e.EmployeeId)
                    .HasName("PK_Employees");

                entity.HasIndex(e => e.EmployeeId, "IX_RTLEmployees_EmployeeId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.EmployeeId).ValueGeneratedNever();

                entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleInitial)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PosSignOn)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Rank)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SurName)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLErrorCode>(entity =>
            {
                entity.HasKey(e => e.ErrorId);

                entity.ToTable("RTLErrorCode");

                entity.Property(e => e.ErrorId).ValueGeneratedNever();

                entity.Property(e => e.Caption)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClassName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MethodName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLExceptionLog>(entity =>
            {
                entity.HasKey(e => e.ExpLogId)
                    .HasName("PK_ExceptionLog");

                entity.ToTable("RTLExceptionLog");

                entity.HasIndex(e => e.ModuleName, "IX_RTLExceptionLog")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ExpLogId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ExpDateTime).HasColumnType("datetime");

                entity.Property(e => e.MachineName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLExceptionType>(entity =>
            {
                entity.HasKey(e => e.ExpTypeId)
                    .HasName("RTLExceptionTypes_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.ExpTypeId, "RTLExceptionTypesCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ExpTypeId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLHierarchy>(entity =>
            {
                entity.HasKey(e => e.HierNodeId)
                    .HasName("PK_Hierarchy");

                entity.ToTable("RTLHierarchy");

                entity.HasIndex(e => e.HierNodeId, "IX_RTLHierarchy_HierNodeId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.LevelId, "IX_RTLHierarchy_LevelId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StoreId, "IX_RTLHierarchy_StoreId")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.HierNodeId).ValueGeneratedNever();

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HierNodeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NodesGuid)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Phone1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Phone3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PostalName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLLevel>(entity =>
            {
                entity.HasKey(e => e.LevelId)
                    .HasName("PK_Levels");

                entity.Property(e => e.LevelId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LevelName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLLocationType>(entity =>
            {
                entity.HasKey(e => e.LocationTypeId)
                    .HasName("PK_LocationTypes");

                entity.Property(e => e.LocationTypeId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLMemo>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.MemoId, "RTLMemosCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLNext>(entity =>
            {
                entity.HasKey(e => e.NextId);

                entity.ToTable("RTLNext");

                entity.Property(e => e.NextId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LockTime).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLOperationalStatus>(entity =>
            {
                entity.HasKey(e => e.OperationalStatusId)
                    .HasName("PK_OperationalStatuses");

                entity.Property(e => e.OperationalStatusId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPoss>(entity =>
            {
                entity.HasKey(e => e.PosId)
                    .HasName("PK_Poss");

                entity.ToTable("RTLPoss");

                entity.HasIndex(e => e.PosId, "IX_RTLPoss_PosId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StoreId, "IX_RTLPoss_StoreId")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PosId).ValueGeneratedNever();

                entity.Property(e => e.DataPath)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PosType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SLAccount)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Version).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<RTLPrdHierarchy>(entity =>
            {
                entity.HasKey(e => e.PrdHierNodeId)
                    .HasName("PK_PrdHierarchy");

                entity.ToTable("RTLPrdHierarchy");

                entity.HasIndex(e => e.BarCode, "IX_RTLPrdHierarchy_BarCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HierNodeName, "IX_RTLPrdHierarchy_HierNodeName")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ParentPrdHierNodeId, "IX_RTLPrdHierarchy_ParentPrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLPrdHierarchy_PrdHierNodeId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PrdLevelId, "IX_RTLPrdHierarchy_PrdLevelId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProductId, "IX_RTLPrdHierarchy_ProductId")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PrdHierNodeId).ValueGeneratedNever();

                entity.Property(e => e.BarCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.HierNodeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VariantSeparatorChar)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPrdLevel>(entity =>
            {
                entity.HasKey(e => e.PrdLevelId)
                    .HasName("PK_PrdLevels");

                entity.HasIndex(e => e.PrdLevelId, "IX_RTLPrdLevels_PrdLevelsId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PrdLevelId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LevelName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLPricing>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.PricingId, "IX_RTLPricings_PricingId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingId, "RTLPricingsCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PriceEnding).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PriceFormulaValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PricingCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPricingBuyer>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.BuyerId, "IX_RTLPricingBuyers_BuyerId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BuyerId, "RTLPricingBuyersCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPricingDefault>(entity =>
            {
                entity.HasKey(e => e.PricingDefId)
                    .HasName("RTLPricingDefaults_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLPricingDefaults_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingDefId, "IX_RTLPricingDefaults_PricingDefId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemCode, "IX_RTLPricingDefaults_StockItemCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingDefId, "RTLPricingDefaultsCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PricingDefId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Margin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Markup).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StockItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPricingDefaultsAllPrice>(entity =>
            {
                entity.HasKey(e => e.PricingDefAllId)
                    .HasName("RTLPricingDefaultsAllPrices_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.PricingDefAllId, "IX_RTLPricingDefaultsAllPrices")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ParentPrdHierNodeId, "IX_RTLPricingDefaultsAllPrices_ParentPrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLPricingDefaultsAllPrices_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemCode, "IX_RTLPricingDefaultsAllPrices_StockItemCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierCode, "IX_RTLPricingDefaultsAllPrices_SupplierCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PricingDefAllId).ValueGeneratedNever();

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Margin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Markup).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StockItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPricingDefaultsSupplier>(entity =>
            {
                entity.HasKey(e => e.PricingDefSuppsId)
                    .HasName("RTLPricingDefaultsSuppliers_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLPricingDefaultsSuppliers_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingDefSuppsId, "IX_RTLPricingDefaultsSuppliers_PricingDefSuppsId")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierCode, "IX_RTLPricingDefaultsSuppliers_SupplierCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PricingDefSuppsId).ValueGeneratedNever();

                entity.Property(e => e.DateListPriceChanged).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastBuyingPrice)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ListPrice)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ListPriceExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SupplierCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPricingHistory>(entity =>
            {
                entity.HasKey(e => e.PricingHistId);

                entity.ToTable("RTLPricingHistory");

                entity.HasIndex(e => e.ParentPrdHierNodeId, "IX_RTLPricingHistory_ParentPrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLPricingHistory_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingDefAllId, "IX_RTLPricingHistory_PricingDefAllId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingHistId, "IX_RTLPricingHistory_PricingHistId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemCode, "IX_RTLPricingHistory_StockItemCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierCode, "IX_RTLPricingHistory_SupplierCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PricingHistId).ValueGeneratedNever();

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LandedCosts).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Margin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Markup).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PriceBand)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Standard')");

                entity.Property(e => e.StockItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPricingLocation>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.HierNodeId, "IX_RTLPricingLocations_HierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingId, "IX_RTLPricingLocations_PricingId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingLocId, "IX_RTLPricingLocations_PricingLocId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingLocId, "RTLPricingLocationsCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLPricingPriceTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RTLPricingPriceTable");

                entity.HasIndex(e => e.PriceTableId, "IX_RTLPricingPriceTable_PriceTableId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PriceTableId, "RTLPricingPriceTableCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<RTLPricingProduct>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLPricingProducts_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingId, "IX_RTLPricingProducts_PricingId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingPrdId, "IX_RTLPricingProducts_PricingPrdId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PricingPrdId, "RTLPricingProductsCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLPricingReason>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.ReasonId, "IX_RTLPricingReasons_ReasonId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ReasonId, "RTLPricingReasonsCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPricingRounding>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.RoundingId, "IX_RTLPricingRoundings_RoundingId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.RoundingId, "RTLPricingRoundingsCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPromoProduct>(entity =>
            {
                entity.HasKey(e => e.PromoPrdId)
                    .HasName("RTLPromoProducts_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLPromoProducts_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PromoId, "IX_RTLPromoProducts_PromoId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PromoPrdId, "IX_RTLPromoProducts_PromoLocId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PromoPrdId, "RTLPromoProductsCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PromoPrdId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SageStockItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPromoRewardType>(entity =>
            {
                entity.HasKey(e => e.RewardTypeId)
                    .HasName("RTLPromoRewardTypes_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.RewardTypeId, "IX_RTLPromoRewardTypes_RewardTypeId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.RewardTypeId, "RTLPromoRewardTypesCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.RewardTypeId).ValueGeneratedNever();

                entity.Property(e => e.RewardType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLPromotion>(entity =>
            {
                entity.HasKey(e => e.PromoId)
                    .HasName("RTLPromotions_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.PromoId, "IX_RTLPromotions_PromoId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.RewardTypeId, "IX_RTLPromotions_RewardTypeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PromoId, "RTLPromotionsCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PromoId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LastAmendDateTime).HasColumnType("datetime");

                entity.Property(e => e.LastAmendUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PromoCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<RTLReplenishmentMethod>(entity =>
            {
                entity.HasKey(e => e.ReplMethodId)
                    .HasName("PK_ReplenishmentMethods");

                entity.HasIndex(e => e.ReplMethodId, "IX_RTLReplenishmentMethods_ReplMethodId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ReplMethodId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLReplenishmentSource>(entity =>
            {
                entity.HasKey(e => e.ReplSourceId)
                    .HasName("PK_ReplenishmentSource");

                entity.HasIndex(e => e.ReplSourceId, "IX_RTLReplenishmentSources_ReplSourceId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ReplSourceId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLStockAlternativeItem>(entity =>
            {
                entity.HasKey(e => e.SIAltId)
                    .HasName("RTLStockAlternativeItems_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLStockAlternativeItems_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SIAltId, "IX_RTLStockAlternativeItems_SIAltId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SIAltId, "RTLStockAlternativeItemsCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SIAltId).ValueGeneratedNever();

                entity.Property(e => e.AltStockItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLStockBinItem>(entity =>
            {
                entity.HasKey(e => e.SIBId)
                    .HasName("RTLStockBinItems_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.Bin, "IX_RTLStockBinItems_Bin")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLStockBinItems_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SIBId, "IX_RTLStockBinItems_SIBId")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseCode, "IX_RTLStockBinItems_WarehouseCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SIBId).ValueGeneratedNever();

                entity.Property(e => e.Bin)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MaximumAmount).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MinimumAmount).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ReOrderAmount).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.WarehouseCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLStockItem>(entity =>
            {
                entity.HasKey(e => e.PrdHierNodeId)
                    .HasName("RTLStockItems_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.Code, "IX_RTLStockItems_Code")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLStockItems_PrdHierNodeId")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PrdHierNodeId).ValueGeneratedNever();

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.BomDetails)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommodityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CostMethod)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InactiveDate).HasColumnType("datetime");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LandedCostsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Memos).HasColumnType("text");

                entity.Property(e => e.NomAccruedAcRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NomAccruedCc)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NomAccruedDept)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NomIssuesAcRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NomIssuesCc)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NomIssuesDept)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NomRevenueAcRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NomRevenueCc)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NomRevenueDept)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NomStockAcRef)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NomStockCc)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NomStockDept)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PartNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StandardCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("decimal(15, 4)");
            });

            modelBuilder.Entity<RTLStockItemPrice>(entity =>
            {
                entity.HasKey(e => new { e.PrdHierNodeId, e.PriceBandID })
                    .HasName("PK_RtlStockItemPrice");

                entity.ToTable("RTLStockItemPrice");

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RtlStockItemPrice_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PriceBandID, "IX_RtlStockItemPrice_PriceBandID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemPriceID, "IX_RtlStockItemPrice_StockItemPriceID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Price).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<RTLStockItemSupplier>(entity =>
            {
                entity.HasKey(e => e.SISId)
                    .HasName("RTLStockItemSuppliers_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLStockItemSuppliers_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SISId, "IX_RTLStockItemSuppliers_SISId")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierCode, "IX_RTLStockItemSuppliers_SupplierCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SISId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LandedCostsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LeadTimeUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderQuantityYtd).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.OrderValueYtd).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.QuantityOnOrder).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.SupplierCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierStockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsualOrderQuantity).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<RTLStockSearchCategory>(entity =>
            {
                entity.HasKey(e => e.SearchId);

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLStockSearchCategories_PrdHierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SearchCategoryId, "IX_RTLStockSearchCategories_SearchCategoryId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SearchId, "IX_RTLStockSearchCategories_SearchId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SearchValueId, "IX_RTLStockSearchCategories_SearchValueId")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SearchId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RTLStore>(entity =>
            {
                entity.HasKey(e => e.StoreId)
                    .HasName("PK_mms_Stores");

                entity.HasIndex(e => e.HierNodeId, "IX_RTLStores_HierNodeId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StoreId, "IX_RTLStores_StoreId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StoreId).ValueGeneratedNever();

                entity.Property(e => e.Address1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CloseDate).HasColumnType("datetime");

                entity.Property(e => e.Contact)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Memo).HasColumnType("text");

                entity.Property(e => e.NominalDetail1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDetail2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDetail3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDetail4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OpenDate).HasColumnType("datetime");

                entity.Property(e => e.Phone1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Phone3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PostalName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StoreName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StoreShortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLStoreStatus>(entity =>
            {
                entity.HasKey(e => e.StoreStatusId)
                    .HasName("PK_StoreStatus");

                entity.HasIndex(e => e.StoreStatusId, "IX_RTLStoreStatuses_StoreStatusId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StoreStatusId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLStoreType>(entity =>
            {
                entity.HasKey(e => e.StoreTypeId)
                    .HasName("PK_StoreTypes");

                entity.HasIndex(e => e.StoreTypeId, "IX_RTLStoreTypes_StoreTypeId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StoreTypeId).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLSystemSetting>(entity =>
            {
                entity.HasKey(e => e.SettingId);

                entity.Property(e => e.SettingId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VariantSeparatorChar)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<RTLTransactionLog>(entity =>
            {
                entity.HasKey(e => e.TrsLogId)
                    .HasName("PK_TransactionLog");

                entity.ToTable("RTLTransactionLog");

                entity.HasIndex(e => e.TrsLogId, "IX_RTLTransactionLog_TrsLogId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TrsLogId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MachineName)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TrsDateTimeEnd).HasColumnType("datetime");

                entity.Property(e => e.TrsDateTimeStart).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLVariantStructure>(entity =>
            {
                entity.HasKey(e => e.PrdHierNodeId)
                    .HasName("PK_VariantStructures");

                entity.HasIndex(e => e.PrdHierNodeId, "IX_RTLVariantStructures_PrdHierNodeId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PrdHierNodeId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SageProductGroupCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTLVariantStructuresBreakup>(entity =>
            {
                entity.HasKey(e => e.VarStructBrkId);

                entity.ToTable("RTLVariantStructuresBreakup");

                entity.HasIndex(e => e.VarStructBrkId, "IX_RTLVariantStructuresBreakup_VarStructBrkId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.VarStructBrkId).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<RepBomCostingAuditTrail>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_RepBomCostPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("RepBomCostingAuditTrail");

                entity.HasIndex(e => e.BomID, "IX_RepBomCostBomID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SessionID, "IX_RepBomCostSessionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomID).HasDefaultValueSql("((0))");

                entity.Property(e => e.BomRef).HasMaxLength(30);

                entity.Property(e => e.CostedOn).HasColumnType("datetime");

                entity.Property(e => e.LabCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Level).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OldLabCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OldMachCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OldMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OldQtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OldSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OldStdMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OldSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OldSuggSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OldToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OldUnitCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PreviouslyCosted).HasColumnType("datetime");

                entity.Property(e => e.QtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SessionID).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StdMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SuggSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<RepBomWorksOrderCosting>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("aaaaaRepBomWorksOrderCosting_PK")
                    .IsClustered(false);

                entity.ToTable("RepBomWorksOrderCosting");

                entity.HasIndex(e => e.BomReference, "BOMReference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomID, "IX_RepWoCostBomID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SessionID, "IX_RepWoCostSessionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SessionID, e.Sequence, e.Reference }, "IX_RepWoCostSessionID+Seq+Ref")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WoID, "IX_RepWoCostWoID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WorksOrderNumber, "IX_RepWoCostWorksOrderNumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomID).HasDefaultValueSql("((0))");

                entity.Property(e => e.BomReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWork).HasMaxLength(1);

                entity.Property(e => e.QtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.SessionID).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfMeasure).HasColumnType("ntext");

                entity.Property(e => e.WoID).HasDefaultValueSql("((0))");

                entity.Property(e => e.WorksOrderNumber)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<RepCostingStockFigure>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_RepCostStkPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.SessionID, "IX_RepCostStkSessionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockCode, "IX_RepCostStkStockCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.InStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SessionID).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockCode).HasMaxLength(30);
            });

            modelBuilder.Entity<RepFreeStock>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_RepFreeStkPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("RepFreeStock");

                entity.HasIndex(e => e.Reference, "IX_RepFreeStkReference")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SessionId, e.Reference }, "IX_RepFreeStkSessionID+Ref")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SessionId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<RepIndentedPartsList>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_RepIndentedPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("RepIndentedPartsList");

                entity.HasIndex(e => e.BomID, "IX_RepIndentedBomID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomReference, "IX_RepIndentedBomReference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProductCode, "IX_RepIndentedProductCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SessionID, "IX_RepIndentedSessionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.BomID).HasDefaultValueSql("((0))");

                entity.Property(e => e.BomQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BomReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CompID).HasDefaultValueSql("((0))");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Level).HasDefaultValueSql("((0))");

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.SessionID).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitofMeasure)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<RepMaximumBuild>(entity =>
            {
                entity.ToTable("RepMaximumBuild");

                entity.Property(e => e.BomDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BomFreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CanMake).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaxBuildQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockItem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PossibleStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QtyOnBom).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Sequence)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<RepRequirement>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_RepReqPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.BomID, "IX_RepReqBomID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Reference, "IX_RepReqRef")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SessionID, e.BomReference, e.Reference, e.ItemType }, "IX_RepReqSessionID+Bom+Ref+Type")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SessionID, e.PlanID, e.BomReference, e.Reference, e.ItemType }, "IX_RepReqSessionID+Plan+Bom+Ref+Type")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SessionID, e.Reference, e.ItemType }, "IX_RepReqSessionID+Ref+Type")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WOrderID, "IX_RepReqWOrderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.BomID).HasDefaultValueSql("((0))");

                entity.Property(e => e.BomReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ItemType).HasMaxLength(1);

                entity.Property(e => e.JobStartDate).HasColumnType("datetime");

                entity.Property(e => e.PlanID).HasDefaultValueSql("((0))");

                entity.Property(e => e.PlanReference).HasMaxLength(30);

                entity.Property(e => e.QtyOnOrder).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ReorderQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shortage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContLeadTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.WOrderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.WOrderReference).HasMaxLength(30);
            });

            modelBuilder.Entity<Repairableitemsview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Repairableitemsview");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportBomComparisonItem>(entity =>
            {
                entity.ToTable("ReportBomComparisonItem");

                entity.Property(e => e.ReportBomComparisonItemID).ValueGeneratedNever();

                entity.Property(e => e.Bom1Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Bom1Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bom1StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Bom1Version)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bom2Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Bom2Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bom2StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Bom2Version)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportBomComparisonItems)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportBomComparisonItem_ReportSession");
            });

            modelBuilder.Entity<ReportBomComparisonResult>(entity =>
            {
                entity.ToTable("ReportBomComparisonResult");

                entity.Property(e => e.ReportBomComparisonResultID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Description2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Difference)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reference1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Reference2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportBomComparisonItem)
                    .WithMany(p => p.ReportBomComparisonResults)
                    .HasForeignKey(d => d.ReportBomComparisonItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportBomComparisonResult_ReportBomComparisonItem");

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportBomComparisonResults)
                    .HasForeignKey(d => d.ReportSessionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportBomComparisonReport_ReportSession");
            });

            modelBuilder.Entity<ReportBomImplosionItem>(entity =>
            {
                entity.ToTable("ReportBomImplosionItem");

                entity.Property(e => e.ReportBomImplosionItemID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ImplosionRange)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImplosionType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ParentsSelection)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SelectVersionStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportBomImplosionItems)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportBomImplosionItem_ReportSession");
            });

            modelBuilder.Entity<ReportBomImplosionResult>(entity =>
            {
                entity.ToTable("ReportBomImplosionResult");

                entity.Property(e => e.ReportBomImplosionResultID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayReference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LineTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockUnitName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Version)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VersionStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportBomImplosionResults)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportBomImplosionResult_ReportSession");
            });

            modelBuilder.Entity<ReportCompany>(entity =>
            {
                entity.ToTable("ReportCompany");

                entity.Property(e => e.ReportCompanyID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Postcode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Product)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TelephoneNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VatCompanyCodeCountryName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.VatRegistrationNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WebAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportExplosionResult>(entity =>
            {
                entity.ToTable("ReportExplosionResult");

                entity.HasIndex(e => e.ReportExplosionResultID, "IX_ReportExplosionResult")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ReportExplosionResultID).ValueGeneratedNever();

                entity.Property(e => e.BomVersion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersionStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.IndentedReference)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LineType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportExplosionResults)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportExplosionResult_ReportExplosionResult");
            });

            modelBuilder.Entity<ReportExplosionSetting>(entity =>
            {
                entity.ToTable("ReportExplosionSetting");

                entity.Property(e => e.ReportExplosionSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExplodeQuantity)
                    .HasColumnType("decimal(12, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SelectVersionStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportExplosionSettings)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportExplosionSetting_ReportSession");
            });

            modelBuilder.Entity<ReportMaximumBuildItem>(entity =>
            {
                entity.ToTable("ReportMaximumBuildItem");

                entity.HasIndex(e => e.BomRecordID, "IX_ReportMaximumBuildItem_BomRecordID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BuildPackageID, "IX_ReportMaximumBuildItem_BuildPackageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ReportSessionID, "IX_ReportMaximumBuildItem_ReportSessionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ReportMaximumBuildItemID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FreeStockQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MaximumBuildQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PossibleStockQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportMaximumBuildItems)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportMaximumBuildItem_ReportSession");
            });

            modelBuilder.Entity<ReportMaximumBuildResult>(entity =>
            {
                entity.ToTable("ReportMaximumBuildResult");

                entity.HasIndex(e => e.ReportMaximumBuildItemID, "IX_ReportMaximumBuildResult_ReportMaximumBuildItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ReportSessionID, "IX_ReportMaximumBuildResult_ReportSessionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ReportMaximumBuildResultID).ValueGeneratedNever();

                entity.Property(e => e.CanMakeQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStockQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineTypeName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Properties)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityOnBom).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportMaximumBuildItem)
                    .WithMany(p => p.ReportMaximumBuildResults)
                    .HasForeignKey(d => d.ReportMaximumBuildItemID)
                    .HasConstraintName("FK_ReportMaximumBuildResult_ReportMaximumBuildItem");

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportMaximumBuildResults)
                    .HasForeignKey(d => d.ReportSessionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportMaximumBuildResult_ReportSession");
            });

            modelBuilder.Entity<ReportMaximumBuildWarehouse>(entity =>
            {
                entity.ToTable("ReportMaximumBuildWarehouse");

                entity.HasIndex(e => e.ReportMaximumBuildItemID, "IX_ReportMaximumBuildWarehouse_ReportMaximumBuildItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ReportSessionID, "IX_ReportMaximumBuildWarehouse_ReportSessionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ReportMaximumBuildWarehouseID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportMaximumBuildItem)
                    .WithMany(p => p.ReportMaximumBuildWarehouses)
                    .HasForeignKey(d => d.ReportMaximumBuildItemID)
                    .HasConstraintName("FK_ReportMaximumBuildWarehouse_ReportMaximumBuildItem");

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportMaximumBuildWarehouses)
                    .HasForeignKey(d => d.ReportSessionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportMaximumBuildWarehouse_ReportSession");
            });

            modelBuilder.Entity<ReportSession>(entity =>
            {
                entity.ToTable("ReportSession");

                entity.Property(e => e.ReportSessionID).ValueGeneratedNever();

                entity.Property(e => e.ComputerName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SessionGuid)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportTrialKittingOption>(entity =>
            {
                entity.ToTable("ReportTrialKittingOption");

                entity.HasIndex(e => e.ReportSessionID, "IX_ReportTrialKittingOption_ReportSessionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ReportTrialKittingOptionID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ShortagesOption)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.SubAssembliesOption)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportTrialKittingOptions)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportTrialKittingOption_ReportSession");
            });

            modelBuilder.Entity<ReportTrialKittingResult>(entity =>
            {
                entity.ToTable("ReportTrialKittingResult");

                entity.HasIndex(e => e.ReportSessionID, "IX_ReportTrialKittingResult_ReportSessionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ReportTrialKittingResultID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.GroupKey)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LineTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Properties)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityRequired).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ResultType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Shortage).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportTrialKittingResults)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportTrialKittingResult_ReportSession");
            });

            modelBuilder.Entity<ReportTrialKittingTask>(entity =>
            {
                entity.ToTable("ReportTrialKittingTask");

                entity.HasIndex(e => e.BuildPackageID, "IX_ReportTrialKittingTask_BuildPackageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ReportSessionID, "IX_ReportTrialKittingTask_ReportSessionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomRecordID, "[IX_ReportTrialKittingTask_BomRecordID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ReportTrialKittingTaskID).ValueGeneratedNever();

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CanBeBuilt)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportTrialKittingTasks)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportTrialKittingTask_ReportSession");
            });

            modelBuilder.Entity<ReportTrialKittingWarehouse>(entity =>
            {
                entity.ToTable("ReportTrialKittingWarehouse");

                entity.HasIndex(e => e.ReportSessionID, "IX_ReportTrialKittingWarehouse_ReportSessionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ReportTrialKittingWarehouseID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportTrialKittingWarehouses)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportTrialKittingWarehouse_ReportSession");
            });

            modelBuilder.Entity<ReportUndoAllocationComponent>(entity =>
            {
                entity.ToTable("ReportUndoAllocationComponent");

                entity.Property(e => e.ReportUndoAllocationComponentID).ValueGeneratedNever();

                entity.Property(e => e.ComponentDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ComponentReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ParentAssemblyDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ParentAssemblyReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityRemaining).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.QuantityUnallocated).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportUndoAllocationComponents)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportUndoAllocationComponent_ReportSession");
            });

            modelBuilder.Entity<ReportUndoAllocationFinishedItem>(entity =>
            {
                entity.ToTable("ReportUndoAllocationFinishedItem");

                entity.Property(e => e.ReportUndoAllocationFinishedItemID).ValueGeneratedNever();

                entity.Property(e => e.AllocationNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AllocationReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityRemaining).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.QuantityUnallocated).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ReportSession)
                    .WithMany(p => p.ReportUndoAllocationFinishedItems)
                    .HasForeignKey(d => d.ReportSessionID)
                    .HasConstraintName("FK_ReportUndoAllocationFinishedItem_ReportSession");
            });

            modelBuilder.Entity<RequestedDelDateArch>(entity =>
            {
                entity.HasKey(e => e.RequestedDeliveryDateID);

                entity.ToTable("RequestedDelDateArch");

                entity.HasIndex(e => e.POPOrderReturnLineID, "IX_RequestedDelDateArch_POPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.RequestedDeliveryDateID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.POPOrderReturnLine)
                    .WithMany(p => p.RequestedDelDateArches)
                    .HasForeignKey(d => d.POPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestedDelDateArch_POPOrderReturnLineArch");
            });

            modelBuilder.Entity<RequestedDeliveryDate>(entity =>
            {
                entity.ToTable("RequestedDeliveryDate");

                entity.HasIndex(e => e.POPOrderReturnLineID, "IX_RequestedDeliveryDate_POPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.RequestedDeliveryDateID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.POPOrderReturnLine)
                    .WithMany(p => p.RequestedDeliveryDates)
                    .HasForeignKey(d => d.POPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestedDeliveryDate_POPOrderReturnLine");
            });

            modelBuilder.Entity<SABRERAIL_DLP_KPI_GoodsIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRERAIL_DLP_KPI_GoodsIn");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MovementBalanceTypeName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionGroupName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionTypeName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRERAIL_KPI_GoodsOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRERAIL_KPI_GoodsOut");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionGroupName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_BC_Dry_prep_plan_2014>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_BC_Dry_prep_plan_2014");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_BC_Operation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_BC_Operations");

                entity.Property(e => e.Next_Op_Code)
                    .HasMaxLength(30)
                    .HasColumnName("Next Op Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");
            });

            modelBuilder.Entity<SABRE_BC_Production_Margin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_BC_Production_Margins");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Despatch_Qty)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Despatch Qty");

                entity.Property(e => e.Despatched_Month).HasColumnName("Despatched Month");

                entity.Property(e => e.Despatched_Year).HasColumnName("Despatched Year");

                entity.Property(e => e.Gross_Margin)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("Gross Margin");

                entity.Property(e => e.Material_Cost_of_Sales)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("Material Cost of Sales");

                entity.Property(e => e.Operations_Labour_Cost)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("Operations Labour Cost");

                entity.Property(e => e.Turnover).HasColumnType("decimal(38, 10)");
            });

            modelBuilder.Entity<SABRE_BC_Repairables_Received>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_BC_Repairables_Received");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_CMM_Overdue_Order>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_CMM_Overdue Orders");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Days_Late).HasColumnName("Days Late");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SABRE_DLP_12Month_NoSOR>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_12Month_NoSOR");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_12MonthsAboveZero>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_12MonthsAboveZero");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_1Month_NoSOR>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_1Month_NoSOR");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_2018_2019_PGValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_2018-2019_PGValue");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<SABRE_DLP_2018_2019_PMValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_2018-2019_PMValue");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<SABRE_DLP_24MonthUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_24MonthUse");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_36MonthUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_36MonthUse");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_3Month_NoSOR>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_3Month_NoSOR");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_48MonthUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_48MonthUse");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_A_PARENT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_A_PARENT");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_Accounts_PODelivery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Accounts_PODeliveries");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.UnitBuyingPrice).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_ActiveStocktake>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ActiveStocktake");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.StocktakeName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_BOMComponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_BOMComponents");

                entity.Property(e => e.BomCommentLine)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Instructions)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ScrapPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SequenceNumber).HasColumnType("decimal(15, 6)");

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e._12M)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12M");
            });

            modelBuilder.Entity<SABRE_DLP_BOMOperationTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_BOMOperationTimes");

                entity.Property(e => e.AssemblyDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AssemblyNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FixedLengthQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ManningLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OverlapPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OverlapQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityPerRun).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_BOM_WHEREUSE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_BOM_WHEREUSE");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Item).HasMaxLength(60);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Revision).HasMaxLength(30);

                entity.Property(e => e.StockCode).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_Below_ROL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Below_ROL");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_BomComp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_BomComps");
            });

            modelBuilder.Entity<SABRE_DLP_BomRepMissMATCH>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_BomRepMissMATCH");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Item).HasMaxLength(60);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Revision).HasMaxLength(30);

                entity.Property(e => e.StockCode).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_Bom_Missing_Component>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Bom Missing Components");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_BookingInSubContact>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_BookingInSubContact");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_BringForward>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_BringForward");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateCheck).HasColumnType("datetime");

                entity.Property(e => e.Days_Stock)
                    .HasColumnType("decimal(38, 19)")
                    .HasColumnName("Days Stock");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Free_Stock)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Free Stock");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OnOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e._1MonthUsage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("1MonthUsage");
            });

            modelBuilder.Entity<SABRE_DLP_BulkIssueReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_BulkIssueReport");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_COSHH_Usage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_COSHH_Usage");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.IssueMethod)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MSDSApprovedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MSDSApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductClassification)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WareHouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e._12Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12Month");

                entity.Property(e => e._1Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("1Month");

                entity.Property(e => e._3Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("3Month");
            });

            modelBuilder.Entity<SABRE_DLP_CatList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_CatList");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_CheckedOutBom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_CheckedOutBoms");

                entity.Property(e => e.BomVersion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CheckedOutBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CheckedOutDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_Countsheet_Variance_Value>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Countsheet_Variance_Value");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastCostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.StocktakeName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Value).HasColumnType("decimal(35, 10)");

                entity.Property(e => e.Variance).HasColumnType("decimal(16, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_CycleCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_CycleCount");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Average_Monthly_Usage)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("Average Monthly Usage");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Stock_Value)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("Stock Value");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e._12Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12Month Usage");

                entity.Property(e => e._24Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("24Month Usage");
            });

            modelBuilder.Entity<SABRE_DLP_DailyTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DailyTransactions");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SABRE_DLP_Despatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Despatches");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cust_Acc)
                    .IsUnicode(false)
                    .HasColumnName("Cust Acc");

                entity.Property(e => e.Cust_Name)
                    .IsUnicode(false)
                    .HasColumnName("Cust Name");

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Desp_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Desp Date");

                entity.Property(e => e.Desp_Quantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Desp Quantity");

                entity.Property(e => e.GRN_Number)
                    .IsUnicode(false)
                    .HasColumnName("GRN Number");

                entity.Property(e => e.InvoiceCreditNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Line_Number).HasColumnName("Line Number");

                entity.Property(e => e.Line_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Line Qty");

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Promised_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Date");

                entity.Property(e => e.Requested_Del_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Requested Del Date");

                entity.Property(e => e.SOR)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SO_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("SO Date");

                entity.Property(e => e.SO_Number)
                    .IsUnicode(false)
                    .HasColumnName("SO Number");

                entity.Property(e => e.Stock_Code)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Stock_Description)
                    .IsUnicode(false)
                    .HasColumnName("Stock Description");

                entity.Property(e => e.WO_Project_Number)
                    .HasMaxLength(50)
                    .HasColumnName("WO Project Number");

                entity.Property(e => e.WorksOrderNumber).IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DespatchesByCu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DespatchesByCus");

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportActiveSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportActiveSuppliers");

                entity.Property(e => e.DateOfLastTransaction).HasColumnType("datetime");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportBomComponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportBomComponents");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Item).HasMaxLength(60);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Revision).HasMaxLength(30);

                entity.Property(e => e.StockCode).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportBomItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportBomItems");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportBomTiming>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportBomTimings");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportDespatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportDespatches");

                entity.Property(e => e.Cust_Acc)
                    .IsUnicode(false)
                    .HasColumnName("Cust Acc");

                entity.Property(e => e.Cust_Name)
                    .IsUnicode(false)
                    .HasColumnName("Cust Name");

                entity.Property(e => e.Date_Reps_Recv_d)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Recv'd");

                entity.Property(e => e.Desp_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Desp Date");

                entity.Property(e => e.Desp_Quantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Desp Quantity");

                entity.Property(e => e.GRN_Number)
                    .IsUnicode(false)
                    .HasColumnName("GRN Number");

                entity.Property(e => e.Line_Number).HasColumnName("Line Number");

                entity.Property(e => e.Line_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Line Qty");

                entity.Property(e => e.Product_Group)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Promised_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Date");

                entity.Property(e => e.Requested_Del_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Requested Del Date");

                entity.Property(e => e.SO_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("SO Date");

                entity.Property(e => e.SO_Number)
                    .IsUnicode(false)
                    .HasColumnName("SO Number");

                entity.Property(e => e.Stock_Code)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Stock_Description)
                    .IsUnicode(false)
                    .HasColumnName("Stock Description");

                entity.Property(e => e.WO_Project_Number)
                    .HasMaxLength(50)
                    .HasColumnName("WO Project Number");

                entity.Property(e => e.WorksOrderNumber).IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportDistributorKanBan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportDistributorKanBan");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportFGUsage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportFGUsage");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_24_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 24 Month");

                entity.Property(e => e.Usage_36_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 36 Month");

                entity.Property(e => e.Usage_48_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 48 Month");
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportInspectionTransfer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportInspectionTransfers");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionTypeName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportKANBAN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportKANBAN");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.KanBanQty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastCostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e._12Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12Month");

                entity.Property(e => e._1Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("1Month");

                entity.Property(e => e._3Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("3Month");
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportNonFGUsage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportNonFGUsage");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_24_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 24 Month");

                entity.Property(e => e.Usage_36_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 36 Month");

                entity.Property(e => e.Usage_48_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 48 Month");
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportPastWorksOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportPastWorksOrders");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Days_Late).HasColumnName("Days Late");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SalesOrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderQty).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.WorksOrderQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportSOR_WO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportSOR_WO");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.DateRep_sRecived_)
                    .HasColumnType("datetime")
                    .HasColumnName("DateRep'sRecived'");

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LastCompletedDate).HasColumnType("datetime");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportStockList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportStockList");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BOMItemType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommodityCode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateOfLastSale).HasColumnType("datetime");

                entity.Property(e => e.DefaultDespatchNoteComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultPickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock_All_)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("FreeStock(All)");

                entity.Property(e => e.FreeStock_Main_)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("FreeStock(Main)");

                entity.Property(e => e.HoldingValueAtBuyPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.InactiveDate).HasColumnType("datetime");

                entity.Property(e => e.LandedCostsType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.MRPReplenishmentMultipleValue).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MaximumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PreReceiptAllocationQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.QuantityAllocatedBOM).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedSOP).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityReceived).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SOPOrderFulfilmentMethodName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.STKFulfilmentSequenceType)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.STKShelfLifeType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StandardCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockItemDiscount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StockItemStatusName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StoresIssue1Week).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.SupplementaryUnitConversionRatio).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TotalQuantityIssued).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.TraceableType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UnconfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.WOIssue).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Warehouse)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WorksOrderBatchMaxQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.WorksOrderBatchMinQty).HasColumnType("decimal(15, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportStockList_Basic>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportStockList_Basic");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportSupplierSpend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportSupplierSpend");

                entity.Property(e => e.AccountBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateOfLastTransaction).HasColumnType("datetime");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportUsageGoodsOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportUsageGoodsOut");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.TransactionGroupName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportUsagePOIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportUsagePOIn");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.TransactionGroupName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportUsageStoresIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportUsageStoresIssue");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.TransactionGroupName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportUsageWOIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportUsageWOIssue");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.TransactionGroupName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportWarehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportWarehouse");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateOfLastSale).HasColumnType("datetime");

                entity.Property(e => e.DateOfLastStockCount).HasColumnType("datetime");

                entity.Property(e => e.HoldingValueAtBuyPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaximumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PreReceiptAllocationQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedBOM).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedSOP).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnconfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReportWarehouseMain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReportWarehouseMain");

                entity.Property(e => e.ConfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateOfLastSale).HasColumnType("datetime");

                entity.Property(e => e.DateOfLastStockCount).HasColumnType("datetime");

                entity.Property(e => e.HoldingValueAtBuyPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaximumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PreReceiptAllocationQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedBOM).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedSOP).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnconfirmedQtyInStock).HasColumnType("decimal(15, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReport_Short>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReport_Shorts");

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.Available).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Issued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Short).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReport_Shorts_TotalComponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReport_Shorts_TotalComponent");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.TotalComponentShort).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReport_StockitemsCreatedDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReport_StockitemsCreatedDate");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReport_TotalBom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReport_TotalBoms");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReport_WOExplosion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReport_WOExplosion");

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.Available).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Issued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Short).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_DownloadReport_WOExplosion_TotalComponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_DownloadReport_WOExplosion_TotalComponents");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.TotalcomponentRequired).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_Dry_prep_plan_2015>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Dry_prep_plan_2015");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ExpediteData_Old_2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ExpediteData_Old 2");

                entity.Property(e => e.AccountExclusion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Exp_Contact)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription).IsUnicode(false);

                entity.Property(e => e.LineExclusion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OnOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.PO_Expedite)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PO_Role)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_ExpediteData_old>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ExpediteData_old");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription).IsUnicode(false);

                entity.Property(e => e.OnOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_ExpediteDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ExpediteData");

                entity.Property(e => e.AccountExclusion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentCreatedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Exp_Contact)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription).IsUnicode(false);

                entity.Property(e => e.LineExclusion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OnOrderQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.PO_Expedite)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PO_Role)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierPartRef)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_ExpediteRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ExpediteRole");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.PO_Expedite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_FACTCON_ST_2014>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_FACTCON_ST_2014");

                entity.Property(e => e.ActualQuantityInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_FG_Usage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_FG_Usage");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Poporders).IsRequired();

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 3 Month");
            });

            modelBuilder.Entity<SABRE_DLP_FactCon>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_FactCon");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Value)
                    .HasColumnType("decimal(35, 10)")
                    .HasColumnName("Stock Value");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e._12Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12Month Usage");

                entity.Property(e => e._24Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("24Month Usage");
            });

            modelBuilder.Entity<SABRE_DLP_ForcastAcc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ForcastAcc");

                entity.Property(e => e.Actual).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Adjustments).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.WeekStartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SABRE_DLP_ForcastDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ForcastDetails");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.sfdCustomerCode)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.sfdDate).HasColumnType("date");

                entity.Property(e => e.sfdDescription)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.sfdProductCode)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_ForecastStockList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ForecastStockList");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_INSPECTION_STK>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_INSPECTION_STK");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Qty_Free_Stock)
                    .HasColumnType("decimal(17, 5)")
                    .HasColumnName("Qty Free Stock");
            });

            modelBuilder.Entity<SABRE_DLP_Koni070>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Koni070");

                entity.Property(e => e.BomVersionStatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CatNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OperationCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_LAST360DAY>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LAST360DAYS");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Current_Average_Price)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("Current Average Price");
            });

            modelBuilder.Entity<SABRE_DLP_LAST60DAY>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LAST60DAYS");

                entity.Property(e => e.Average_Last_Year_Price)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("Average Last Year Price");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_LASTTANSACTION>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LASTTANSACTIONS");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionTypeName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_LASTTRANSACTIONQA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LASTTRANSACTIONQA");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionTypeName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_LastCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LastCost");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastCostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_LastTransactionIN_GurneyWay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LastTransactionIN_GurneyWay");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Transaction_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Transaction Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ManPartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");
            });

            modelBuilder.Entity<SABRE_DLP_LeadTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LeadTimes");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStockQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_LevelCalc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LevelCalcs");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.TheoMax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.TheoROL).HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<SABRE_DLP_ListPriceBySupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ListPriceBySupplier");

                entity.Property(e => e.DateListPriceChanged).HasColumnType("datetime");

                entity.Property(e => e.Last12MonthsUsage).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.ListPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_ListPriceReview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ListPriceReview");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ListBasePrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ListPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ListPriceExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierStockCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_LiveDelivery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LiveDelivery");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_LivePlan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LivePlan");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_LivePlan_old2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LivePlan-old2");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_LocationCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_LocationCheck");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_MRP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_MRP");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ActualQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AdjustedQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DemandQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OnOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ProductGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecNumber).HasMaxLength(9);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_MRPMakeRecomendation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_MRPMakeRecomendations");

                entity.Property(e => e.Action)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCode)
                    .IsRequired()
                    .HasMaxLength(235);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreatedReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CurrentDate).HasColumnType("datetime");

                entity.Property(e => e.DemandQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DestinationItem).HasMaxLength(100);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueInQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Linked)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NeededByDate).HasColumnType("datetime");

                entity.Property(e => e.NetFree).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.ParentTag).HasMaxLength(30);

                entity.Property(e => e.PhysicalStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlanPeriod).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Rec1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Rec2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecNumber).HasMaxLength(9);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_MRPReccomendation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_MRPReccomendations");

                entity.Property(e => e.Action)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCode)
                    .IsRequired()
                    .HasMaxLength(235);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreatedReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CurrentDate).HasColumnType("datetime");

                entity.Property(e => e.DemandQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DestinationItem).HasMaxLength(100);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueInQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Linked)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NeededByDate).HasColumnType("datetime");

                entity.Property(e => e.NetFree).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.ParentTag).HasMaxLength(30);

                entity.Property(e => e.PhysicalStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlanPeriod).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Rec1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Rec2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecNumber).HasMaxLength(9);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_Max_TransactionHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Max_TransactionHistory");

                entity.Property(e => e.Trans_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<SABRE_DLP_ORDERS_KPI>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ORDERS_KPI");

                entity.Property(e => e.Orders_Rasied_BY)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_OVERDUEWO_WITHPRJ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_OVERDUEWO_WITHPRJ");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Days_Late).HasColumnName("Days Late");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SalesOrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderQty).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.WorksOrderQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_OrderLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_OrderLines");

                entity.Property(e => e.DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_OrderLines_Total>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_OrderLines_Total");

                entity.Property(e => e.Lines_Rasied_By)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_OrdersCreated_Total>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_OrdersCreated_Total");

                entity.Property(e => e.Orders_Rasied_BY)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_OrdersRasied>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_OrdersRasied");

                entity.Property(e => e.DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<SABRE_DLP_OutputDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_OutputData");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.LastCostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityOnOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SOPItemPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.UnconfirmedQtyInStock).HasColumnType("decimal(15, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_OverduePO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_OverduePO");

                entity.Property(e => e.Date_Raised)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Raised");

                entity.Property(e => e.Days_Late).HasColumnName("Days Late");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_OverdueWO_SOR_on_Hold>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_OverdueWO_SOR_on_Hold");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Days_Late).HasColumnName("Days Late");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SalesOrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderQty).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.WorksOrderQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_OverdueWorksOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_OverdueWorksOrders");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Days_Late).HasColumnName("Days Late");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SalesOrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderQty).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.WorksOrderQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_Overdue_Order>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Overdue_Orders");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Days_Late).HasColumnName("Days Late");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_OverstockReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_OverstockReport");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStockQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MaximumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityOnOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_PARTS_TO_SUPPLIER>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_PARTS_TO_SUPPLIER");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_PBA_SlowStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_PBA_SlowStock");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Value)
                    .HasColumnType("decimal(35, 10)")
                    .HasColumnName("Stock Value");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e._12Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12Month Usage");

                entity.Property(e => e._24Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("24Month Usage");
            });

            modelBuilder.Entity<SABRE_DLP_PERIOD2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_PERIOD2");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_PERIOD3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_PERIOD3");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_PERIOD4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_PERIOD4");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_PERIOD5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_PERIOD5");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_PERIOD6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_PERIOD6");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_POPLinesUnitPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_POPLinesUnitPrice");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SABRE_DLP_PO_Due>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_PO_Due");

                entity.Property(e => e.Days_Till_Due).HasColumnName("Days Till Due");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_PO_SCHEDULE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_PO_SCHEDULE");

                entity.Property(e => e.Date_Raised)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Raised");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_PartShortages_1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_PartShortages_1");

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.FreeStockQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Issued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_Part_to_WO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Part_to_WO");

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Issued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_ProdPlan_Dev>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProdPlan_Dev");

                entity.Property(e => e.AccName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccNo)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AssemblySection)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.BatchNo).IsUnicode(false);

                entity.Property(e => e.BrCatNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Complete).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CustomerOrderNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateRepsRecd).IsUnicode(false);

                entity.Property(e => e.DeliverySection)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DismantlingSection)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.GRN).IsUnicode(false);

                entity.Property(e => e.NextOP).IsUnicode(false);

                entity.Property(e => e.NextOpName).IsUnicode(false);

                entity.Property(e => e.OrderStatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaintSection)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PickingListComment)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PlannedStartDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectNumber).HasMaxLength(50);

                entity.Property(e => e.PromisedDespatchDate).HasColumnType("datetime");

                entity.Property(e => e.QtyOnSite).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.RepsDueonSite).HasColumnType("datetime");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SabreOrderNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.WorksOrderNo).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_ProductGroupActiveLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductGroupActiveLines");

                entity.Property(e => e.product_Group)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("product Group");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlanJan2014>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlanJan2014");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlanV3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlanV3");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Item_Code)
                    .HasMaxLength(30)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Lookup_Point)
                    .HasColumnType("decimal(20, 5)")
                    .HasColumnName("Lookup Point");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlanV4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlanV4");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Received)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Received");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Item_Code)
                    .HasMaxLength(30)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Lookup_Point)
                    .HasColumnType("decimal(20, 5)")
                    .HasColumnName("Lookup Point");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlan_CAU>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlan_CAU");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Item_Code)
                    .HasMaxLength(30)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Lookup_Point)
                    .HasColumnType("decimal(20, 5)")
                    .HasColumnName("Lookup Point");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlan_Damper>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlan_Dampers");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Item_Code)
                    .HasMaxLength(30)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Lookup_Point)
                    .HasColumnType("decimal(20, 5)")
                    .HasColumnName("Lookup Point");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlan_Distributor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlan_Distributors");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Item_Code)
                    .HasMaxLength(30)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Lookup_Point)
                    .HasColumnType("decimal(20, 5)")
                    .HasColumnName("Lookup Point");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlan_FGDISTRIBUTOR>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlan_FGDISTRIBUTORS");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlan_FGVALVE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlan_FGVALVE");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlan_OTHERBRAKE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlan_OTHERBRAKES");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Item_Code)
                    .HasMaxLength(30)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Lookup_Point)
                    .HasColumnType("decimal(20, 5)")
                    .HasColumnName("Lookup Point");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlan_Reservoir>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlan_Reservoirs");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Item_Code)
                    .HasMaxLength(30)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Lookup_Point)
                    .HasColumnType("decimal(20, 5)")
                    .HasColumnName("Lookup Point");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlan_SlackAdjuster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlan_SlackAdjusters");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Item_Code)
                    .HasMaxLength(30)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Lookup_Point)
                    .HasColumnType("decimal(20, 5)")
                    .HasColumnName("Lookup Point");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlan_Valf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlan_Valves");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Item_Code)
                    .HasMaxLength(30)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Lookup_Point)
                    .HasColumnType("decimal(20, 5)")
                    .HasColumnName("Lookup Point");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_ProductionPlan_WithCosting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ProductionPlan_WithCostings");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_QtyOnOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_QtyOnOrder");

                entity.Property(e => e.Del_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Del Date");

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_Quarantine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Quarantine");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Qty_Free_Stock)
                    .HasColumnType("decimal(17, 5)")
                    .HasColumnName("Qty Free Stock");
            });

            modelBuilder.Entity<SABRE_DLP_ReorderReport24>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ReorderReport24");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Poporders).IsRequired();

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_24_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 24 Month");
            });

            modelBuilder.Entity<SABRE_DLP_ReorderReportAllWarehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ReorderReportAllWarehouses");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ManPartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Poporders).IsRequired();

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 3 Month");
            });

            modelBuilder.Entity<SABRE_DLP_ReorderReportConsignment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ReorderReportConsignment");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Poporders).IsRequired();

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 3 Month");
            });

            modelBuilder.Entity<SABRE_DLP_ReorderReportE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ReorderReportE");

                entity.Property(e => e.AnalysisCode1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.SabreSpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 3 Month");

                entity.Property(e => e.Usgae_12_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usgae 12 Month");

                entity.Property(e => e.Warehouse)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_ReorderReportE_old>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ReorderReportE_old");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Del_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Del Date");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ManPartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Poporders).IsRequired();

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 3 Month");
            });

            modelBuilder.Entity<SABRE_DLP_ReorderReportModified>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ReorderReportModified");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ManPartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Poporders).IsRequired();

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 3 Month");
            });

            modelBuilder.Entity<SABRE_DLP_ReorderReport_NoSORUsage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ReorderReport_NoSORUsage");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ManPartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Poporders).IsRequired();

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 3 Month");
            });

            modelBuilder.Entity<SABRE_DLP_RepFreeStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_RepFreeStock");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Qty_Free_Stock)
                    .HasColumnType("decimal(17, 5)")
                    .HasColumnName("Qty Free Stock");
            });

            modelBuilder.Entity<SABRE_DLP_SOPAwaitingInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SOPAwaitingInvoice");

                entity.Property(e => e.DespatchReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PostedInvoiceCreditQty).HasColumnType("decimal(15, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_SOPLinesUnitPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SOPLinesUnitPrice");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(36, 15)");
            });

            modelBuilder.Entity<SABRE_DLP_SOR_WO_Qty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SOR_WO_Qtys");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_SOR_Without_WO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SOR_Without_WO");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SalesOrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderQty).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.WOEndDate).HasColumnType("datetime");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.WorksOrderQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_SUPPLIER_LINE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SUPPLIER_LINES");

                entity.Property(e => e.Lines_Rasied_On)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_SUPPLIER_ORDER>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SUPPLIER_ORDERS");

                entity.Property(e => e.Orders_Rasied_On)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<SABRE_DLP_SabreParts_Supplier_Missmatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SabreParts_Supplier_Missmatch");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierStockCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_SalesOrderBook_V2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SalesOrderBook_V2");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SABRE_DLP_SalesOrderLines_KPI>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SalesOrderLines_KPI");

                entity.Property(e => e.Sales_Order_Lines_Rasied).HasColumnName("Sales Order Lines Rasied");

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<SABRE_DLP_SalesOrdersCosting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SalesOrdersCostings");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Labour_Cost).HasColumnType("decimal(38, 21)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Machine_Cost).HasColumnType("decimal(38, 21)");

                entity.Property(e => e.Materials_Cost).HasColumnType("decimal(38, 21)");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SalesOrderPromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SalesOrderRequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.Total_Cost).HasColumnType("decimal(38, 21)");

                entity.Property(e => e.UnitSellingPrice).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_SlowMovingStock_2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SlowMovingStock_2");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_24_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 24 Month");
            });

            modelBuilder.Entity<SABRE_DLP_SlowStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SlowStock");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Value)
                    .HasColumnType("decimal(35, 10)")
                    .HasColumnName("Stock Value");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e._12Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12Month Usage");

                entity.Property(e => e._24Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("24Month Usage");

                entity.Property(e => e._36Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("36Month");

                entity.Property(e => e._60Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("60Month");
            });

            modelBuilder.Entity<SABRE_DLP_SlowstockLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SlowstockLocations");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Value)
                    .HasColumnType("decimal(35, 10)")
                    .HasColumnName("Stock Value");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e._12Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12Month Usage");

                entity.Property(e => e._24Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("24Month Usage");
            });

            modelBuilder.Entity<SABRE_DLP_SparesPlan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SparesPlan");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStockQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.Suppliers).IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_StockCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_StockCal");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.MOQMax).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Theo1).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Theo12).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Theo3).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e._12_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12 Month");

                entity.Property(e => e._1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("1 Month");

                entity.Property(e => e._3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("3 Month");
            });

            modelBuilder.Entity<SABRE_DLP_StockReport_Cabin_4_SS>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_StockReport_Cabin 4 SS");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ManPartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e._12Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12Month Usage");

                entity.Property(e => e._24Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("24Month Usage");

                entity.Property(e => e._36Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("36Month");

                entity.Property(e => e._60Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("60Month");
            });

            modelBuilder.Entity<SABRE_DLP_StockReport_GURNEY_WAY>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_StockReport_GURNEY WAY");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ManPartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e._12Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12Month Usage");

                entity.Property(e => e._24Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("24Month Usage");

                entity.Property(e => e._36Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("36Month");

                entity.Property(e => e._60Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("60Month");
            });

            modelBuilder.Entity<SABRE_DLP_Suppler_Delivery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Suppler_Deliverys");

                entity.Property(e => e.ReceiptReturnDate).HasColumnType("datetime");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_SupplierOverDue_KPI>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SupplierOverDue_KPI");

                entity.Property(e => e.Days_Late).HasColumnName("Days Late");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.ReceiptReturnDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_SupplierReport12MTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SupplierReport12MTotals");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<SABRE_DLP_SupplierReport12MonthPO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SupplierReport12MonthPO");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<SABRE_DLP_SupplierReportLast12Month>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_SupplierReportLast12Months");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<SABRE_DLP_Supplier_Deliveries_Total>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Supplier_Deliveries_Total");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_Supplier_Late>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Supplier_Lates");

                entity.Property(e => e.Days_Late).HasColumnName("Days Late");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.Delivery_Month).HasColumnName("Delivery Month");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnDate).HasColumnType("datetime");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_Supplier_Lates_Total>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Supplier_Lates_Totals");

                entity.Property(e => e.Delivery_Month).HasColumnName("Delivery Month");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_Supplier_Performance_Monitor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Supplier_Performance_Monitor");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_Suppliers_Orders_KPI>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Suppliers_Orders_KPI");

                entity.Property(e => e.Lines_Rasied_On)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<SABRE_DLP_Transaction_History>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Transaction History");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TransactionTypeName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_UnsatisfiedLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_UnsatisfiedLines");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_Unspecified>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Unspecified");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_Use_with_stk_qty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_Use_with_stk_qty");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Qty_In_Stock)
                    .HasColumnType("decimal(16, 5)")
                    .HasColumnName("Qty In Stock");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_VTGDesptach>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_VTGDesptach");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1).HasMaxLength(60);

                entity.Property(e => e.Expr2).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.Expr3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Expr4).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Expr5).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Expr6).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Expr7).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Expr8).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Expr9).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastCompletedDate).HasColumnType("datetime");

                entity.Property(e => e.Man_Hrs_Per_Op).HasColumnName("Man Hrs Per Op");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QtyFinished).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Qty_Completed)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Qty Completed");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.Unit_Time_min).HasColumnName("Unit Time/min");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_VTGLivePlan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_VTGLivePlan");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_DLP_VTG_Download_PT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_VTG_Download_PT");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_VTG_Download_PTSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_VTG_Download_PTSum");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_VTG_Download_WIPSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_VTG_Download_WIPSum");

                entity.Property(e => e.Allocated).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Issued).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_VTG_Warehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_VTG_Warehouses");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityAllocatedBOM).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedSOP).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_VTG_Warehouses_Old>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_VTG_Warehouses_Old");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityAllocatedSOP).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_DLP_WO_Expedite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_WO_Expedite");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AccountNumber).HasMaxLength(8);

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LinkedTo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.QtyFinished).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<SABRE_DLP_WO_SO_NotMatchedEndDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_WO_SO_NotMatchedEndDates");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SalesOrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderQty).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.WOEndDate).HasColumnType("datetime");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.WorksOrderQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_ZeroMovement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ZeroMovement");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 3 Month");
            });

            modelBuilder.Entity<SABRE_DLP_ZeroValueStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_ZeroValueStock");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Value)
                    .HasColumnType("decimal(35, 10)")
                    .HasColumnName("Stock Value");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e._12_Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12 Month Usage");

                entity.Property(e => e._1_Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("1 Month Usage");

                entity.Property(e => e._3_Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("3 Month Usage");
            });

            modelBuilder.Entity<SABRE_DLP_vw_24MonthUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_vw_24MonthUse");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_vw_36MonthUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_vw_36MonthUse");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_vw_60MonthUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_vw_60MonthUse");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<SABRE_DLP_vw_StockItemLastINTransfer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_DLP_vw_StockItemLastINTransfer");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionTypeName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SABRE_ProductionPlan_FGResTank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_ProductionPlan_FGResTanks");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<SABRE_RAIL_DLP_SalesForecastDespatch_Month>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SABRE_RAIL_DLP_SalesForecastDespatch_Month");

                entity.Property(e => e.Cust_Acc)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Cust Acc");

                entity.Property(e => e.Cust_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Cust Name");

                entity.Property(e => e.DespatchQty).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Stock_Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Stock Description");
            });

            modelBuilder.Entity<SiWorksOrder>(entity =>
            {
                entity.ToTable("SiWorksOrder");

                entity.HasIndex(e => e.SiWorksOrderID, "SiWorksOrderID_index")
                    .IsUnique();

                entity.HasIndex(e => e.Deleted, "SiWorksOrder_Deleted");

                entity.HasIndex(e => new { e.Deleted, e.WOStatusEnumID }, "SiWorksOrder_index");

                entity.Property(e => e.SiWorksOrderID).ValueGeneratedNever();

                entity.Property(e => e.BomVersion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CostStatus)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.EstimateNumberOfHrsToComplete).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.FutureBuyPrice).HasColumnType("decimal(19, 7)");

                entity.Property(e => e.Margin).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.OriginalEstimateCost).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.OverheadRecovery).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.PercentStockCover).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.SOPLineWorksOrderText)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.SOPWorksOrderText)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.SpareMemo1).IsUnicode(false);

                entity.Property(e => e.SpareMemo2)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.SpareNumber4).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.SpareNumber5).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.SpareText1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText5)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalUnitSellingPrice).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.UPDATEDDATE).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDUSER)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WOComments)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.WOCost).HasColumnType("decimal(19, 7)");

                entity.Property(e => e.WOCreatedDate).HasColumnType("datetime");

                entity.Property(e => e.WODueDate).HasColumnType("datetime");

                entity.Property(e => e.WOGeneratedDate).HasColumnType("datetime");

                entity.Property(e => e.WOName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.WONumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WONumberSequence)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.WOPerBatchCost).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.WOPerUnitCost).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.WOProductionLeadTime).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.WOQuantity).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.WOStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WOWaterDeviation).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.Workshop)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLAccountInformationView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLAccountInformationView");

                entity.Property(e => e.mmsslai_AccountIsOnHold)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_CompanyType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_CurrencyName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_EarlySettlementDiscount)
                    .HasMaxLength(82)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_InvoiceDiscountPercent)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_InvoiceLineDiscountPercent)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_PaymentTermsDesc)
                    .HasMaxLength(86)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslai_PriceBandName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmsslai_TaxRateName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLAccountMemo>(entity =>
            {
                entity.HasKey(e => e.SLAccountMemoID)
                    .IsClustered(false);

                entity.ToTable("SLAccountMemo");

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_SLAccountMemo_SLCustomerAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLAccountMemoID).ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MemoCreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MemoText)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TimeAndDateMemoCreated).HasColumnType("datetime");

                entity.Property(e => e.TimeAndDateMemoLastUpdated).HasColumnType("datetime");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLAccountMemos)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLAccountMemo_SLCustomerAccount");

                entity.HasOne(d => d.SYSAccountMemoType)
                    .WithMany(p => p.SLAccountMemos)
                    .HasForeignKey(d => d.SYSAccountMemoTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLAccountMemo_SYSAccountMemoType");
            });

            modelBuilder.Entity<SLAgePeriodBalanceView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLAgePeriodBalanceView");

                entity.Property(e => e.mmsslapb_CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslapb_TransactionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SLAllocHeaderPostedEntryVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLAllocHeaderPostedEntryVw");

                entity.Property(e => e.AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.QueryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotalDebitAllocation).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLAllocationHeader>(entity =>
            {
                entity.HasKey(e => e.SLAllocationHeaderID)
                    .HasName("PK_AllocationHeader")
                    .IsClustered(false);

                entity.ToTable("SLAllocationHeader");

                entity.HasIndex(e => e.SLAllocationTypeID, "IX_SLAllocationHeader_SLAllocationTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_SLAllocationHeader_SLCustomerAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLAllocationHeaderID).ValueGeneratedNever();

                entity.Property(e => e.AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsComplete)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SLAllocationType)
                    .WithMany(p => p.SLAllocationHeaders)
                    .HasForeignKey(d => d.SLAllocationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLAllocationHeader_SLAllocationType");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLAllocationHeaders)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLAllocationHeader_SLCustomerAccount");
            });

            modelBuilder.Entity<SLAllocationTran>(entity =>
            {
                entity.HasKey(e => e.SLAllocationTranID)
                    .HasName("PK_SLAllocationTransaction")
                    .IsClustered(false);

                entity.ToTable("SLAllocationTran");

                entity.HasIndex(e => e.SLAllocationHeaderID, "IX_SLAllocationTransaction_SLAllocationHeaderID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLPostedCustomerTranID, "IX_SLAllocationTransaction_SLPostedCustomerAccountTransactionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLAllocationTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SLAllocationHeader)
                    .WithMany(p => p.SLAllocationTrans)
                    .HasForeignKey(d => d.SLAllocationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLAllocationTransaction_SLAllocationHeader");

                entity.HasOne(d => d.SLPostedCustomerTran)
                    .WithMany(p => p.SLAllocationTrans)
                    .HasForeignKey(d => d.SLPostedCustomerTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLAllocationTransaction_SLPostedCustomerAccountTransaction");
            });

            modelBuilder.Entity<SLAllocationType>(entity =>
            {
                entity.ToTable("SLAllocationType");

                entity.Property(e => e.SLAllocationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLAllocationsForInvoiceView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLAllocationsForInvoiceView");

                entity.Property(e => e.mmssia_AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.mmssia_AllocationType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssia_InvoiceRef)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssia_Source)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssia_TransactionReference)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssia_TransactionType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssia_UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLAnalysisPeriod>(entity =>
            {
                entity.HasKey(e => e.SLAnalysisPeriodID)
                    .IsClustered(false);

                entity.ToTable("SLAnalysisPeriod");

                entity.HasIndex(e => e.EndDate, "IX_SLAnalysisPeriod_EndDate")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLAnalysisPeriodID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PeriodReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SLCreditNoteInvoiceNumber>(entity =>
            {
                entity.ToTable("SLCreditNoteInvoiceNumber");

                entity.Property(e => e.SLCreditNoteInvoiceNumberID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SLCustomerAccount>(entity =>
            {
                entity.HasKey(e => e.SLCustomerAccountID)
                    .IsClustered(false);

                entity.ToTable("SLCustomerAccount");

                entity.HasIndex(e => new { e.SLCustomerAccountID, e.CustomerAccountNumber }, "IX_SLCustomerAccountID_CustomerAccountNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CustomerAccountNumber, "IX_SLCustomerAccount_CustomerAccountNumber")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CustomerAccountShortName, "IX_SLCustomerAccount_CustomerAccountShortName")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CustomerDiscountGroupID, "IX_SLCustomerAccount_CustomerDiscountGroupID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DefaultSYSTaxRateID, "IX_SLCustomerAccount_DefaultSYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OrderValueDiscountID, "IX_SLCustomerAccount_OrderValueDiscountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PriceBandID, "IX_SLCustomerAccount_PriceBandID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLFinanceChargeID, "IX_SLCustomerAccount_SLFinanceChargeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSAccountTypeID, "IX_SLCustomerAccount_SYSAccountTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSCountryCodeID, "IX_SLCustomerAccount_SYSCountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSCurrencyID, "IX_SLCustomerAccount_SYSCurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSExchangeRateTypeID, "IX_SLCustomerAccount_SYSExchangeRateTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSPaymentTermsBasisID, "IX_SLCustomerAccount_SYSPaymentTermsBasisID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLCustomerAccountID).ValueGeneratedNever();

                entity.Property(e => e.AccountBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AccountOpened).HasColumnType("datetime");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ApplicationDate).HasColumnType("datetime");

                entity.Property(e => e.AvgTimeToPayDateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreditReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountShortName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DUNSCode)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateAccountDetailsLastChanged)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateEuroAccountCopied).HasColumnType("datetime");

                entity.Property(e => e.DateFinanceChargeLastRun).HasColumnType("datetime");

                entity.Property(e => e.DateOfLastTransaction).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultNominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultNominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultOrderPriority)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EarlySettlementDiscountPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EuroAccountNumberCopiedFromTo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.InvoiceLineDiscountPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LastCreditReview).HasColumnType("datetime");

                entity.Property(e => e.MainFaxAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainFaxCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainFaxSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainTelephoneAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainTelephoneCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainTelephoneSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MainWebsite)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NextCreditReview).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentCloudCustomerID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatusReason)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxRegistrationNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TradingTerms)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ValueOfCurrentOrdersInSOP).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.AssociatedHeadOfficeAccount)
                    .WithMany(p => p.InverseAssociatedHeadOfficeAccount)
                    .HasForeignKey(d => d.AssociatedHeadOfficeAccountID)
                    .HasConstraintName("FK_SLCustomerAccount_SLCustomerAccount");

                entity.HasOne(d => d.CustomerDiscountGroup)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.CustomerDiscountGroupID)
                    .HasConstraintName("FK_SLCustomerAccount_CustomerDiscountGroup");

                entity.HasOne(d => d.DefaultSYSTaxRate)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.DefaultSYSTaxRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerAccount_SYSTaxRate");

                entity.HasOne(d => d.OrderValueDiscount)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.OrderValueDiscountID)
                    .HasConstraintName("FK_SLCustomerAccount_OrderValueDiscount");

                entity.HasOne(d => d.PriceBand)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.PriceBandID)
                    .HasConstraintName("FK_SLCustomerAccount_PriceBand");

                entity.HasOne(d => d.SLAssociatedOfficeType)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.SLAssociatedOfficeTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerAccount_SLOfficeType");

                entity.HasOne(d => d.SLCustomerSyncStatusType)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.SLCustomerSyncStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerAccount_SLCustomerSyncStatusType");

                entity.HasOne(d => d.SLFinanceCharge)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.SLFinanceChargeID)
                    .HasConstraintName("FK_SLCustomerAccount_SLFinanceCharge");

                entity.HasOne(d => d.SYSAccountStatus)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.SYSAccountStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerAccount_SYSAccountStatus");

                entity.HasOne(d => d.SYSAccountType)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.SYSAccountTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerAccount_SYSAccountType");

                entity.HasOne(d => d.SYSCountryCode)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.SYSCountryCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerAccount_SYSCountryCode");

                entity.HasOne(d => d.SYSCreditBureau)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.SYSCreditBureauID)
                    .HasConstraintName("FK_SLCustomerAccount_SYSCreditBureau");

                entity.HasOne(d => d.SYSCreditPosition)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.SYSCreditPositionID)
                    .HasConstraintName("FK_SLCustomerAccount_SYSCreditPosition");

                entity.HasOne(d => d.SYSCurrency)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.SYSCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerAccount_SYSCurrency");

                entity.HasOne(d => d.SYSExchangeRateType)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.SYSExchangeRateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerAccount_SYSExchangeRateType");

                entity.HasOne(d => d.SYSPaymentTermsBasis)
                    .WithMany(p => p.SLCustomerAccounts)
                    .HasForeignKey(d => d.SYSPaymentTermsBasisID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerAccount_SYSPaymentTermsBasis");
            });

            modelBuilder.Entity<SLCustomerAccountX>(entity =>
            {
                entity.ToTable("SLCustomerAccountX");

                entity.Property(e => e.SLCustomerAccountXID).ValueGeneratedNever();

                entity.Property(e => e.CustomerOrderMemo)
                    .HasMaxLength(1026)
                    .IsUnicode(false);

                entity.HasOne(d => d.SLCustomerAccountXNavigation)
                    .WithOne(p => p.SLCustomerAccountX)
                    .HasForeignKey<SLCustomerAccountX>(d => d.SLCustomerAccountXID)
                    .HasConstraintName("FK_SLCustomerAccountX_SLCustomerAccount");
            });

            modelBuilder.Entity<SLCustomerAlert>(entity =>
            {
                entity.HasKey(e => e.SLCustomerAlertID)
                    .HasName("PK_SLCusotomerAlert")
                    .IsClustered(false);

                entity.ToTable("SLCustomerAlert");

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_SLCustomerAlert_SLCustomerAccountID")
                    .IsClustered();

                entity.Property(e => e.SLCustomerAlertID).ValueGeneratedNever();

                entity.Property(e => e.AlertStatus)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AlertText)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AlertUpdatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLCustomerAlerts)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerAlert_SLCustomerAccount");
            });

            modelBuilder.Entity<SLCustomerCardReference>(entity =>
            {
                entity.ToTable("SLCustomerCardReference");

                entity.Property(e => e.SLCustomerCardReferenceID).ValueGeneratedNever();

                entity.Property(e => e.AuthNumber)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.CardProcessorTranCode)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUsedDate).HasColumnType("datetime");

                entity.Property(e => e.SecurityKey)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TranCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLCustomerCardReferences)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerCardReference_SLCustomerAccount");
            });

            modelBuilder.Entity<SLCustomerContact>(entity =>
            {
                entity.ToTable("SLCustomerContact");

                entity.HasIndex(e => new { e.SLCustomerAccountID, e.SLCustomerContactID, e.SLCustomerLocationID }, "IX_SLCustomerContact_SLCustomerAccountID_SLCustomerContactID_SLCustomerLocationID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLCustomerContactID).ValueGeneratedNever();

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactNamePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLCustomerContacts)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerContact_SLCustomerAccount");

                entity.HasOne(d => d.SLCustomerLocation)
                    .WithMany(p => p.SLCustomerContacts)
                    .HasForeignKey(d => d.SLCustomerLocationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerContact_SLCustomerLocation");

                entity.HasOne(d => d.Salutation)
                    .WithMany(p => p.SLCustomerContacts)
                    .HasForeignKey(d => d.SalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerContact_SalutationID");
            });

            modelBuilder.Entity<SLCustomerContactDefaultsVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLCustomerContactDefaultsVw");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactRoleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultEmail)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultFax)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultMobile)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultTelephone)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultWebsite)
                    .HasMaxLength(227)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLCustomerContactRole>(entity =>
            {
                entity.ToTable("SLCustomerContactRole");

                entity.HasIndex(e => e.SLCustomerContactID, "IX_SLCustomerContactRole_SLCustomerContactID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderContactRoleID, "IX_SLCustomerContactRole_SYSTraderContactRoleID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLCustomerContactRoleID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SLCustomerContact)
                    .WithMany(p => p.SLCustomerContactRoles)
                    .HasForeignKey(d => d.SLCustomerContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerContactRole_SLCustomerContact");

                entity.HasOne(d => d.SYSTraderContactRole)
                    .WithMany(p => p.SLCustomerContactRoles)
                    .HasForeignKey(d => d.SYSTraderContactRoleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerContactRole_SYSTraderContactRole");
            });

            modelBuilder.Entity<SLCustomerContactValue>(entity =>
            {
                entity.ToTable("SLCustomerContactValue");

                entity.HasIndex(e => new { e.SLCustomerContactID, e.SYSContactTypeID }, "IX_SLCustomerContactValue_CustomerContactID_ContactTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLCustomerContactValueID).ValueGeneratedNever();

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(227)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValuePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactValueSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SLCustomerContact)
                    .WithMany(p => p.SLCustomerContactValues)
                    .HasForeignKey(d => d.SLCustomerContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerContactValue_SLCustomerContact");

                entity.HasOne(d => d.SYSContactType)
                    .WithMany(p => p.SLCustomerContactValues)
                    .HasForeignKey(d => d.SYSContactTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerContactValue_SYSContactType");
            });

            modelBuilder.Entity<SLCustomerDocument>(entity =>
            {
                entity.HasKey(e => e.SLCustomerDocumentID)
                    .IsClustered(false);

                entity.ToTable("SLCustomerDocument");

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_SLCustomerDocument_SLCustomerAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSDocumentLayoutVersionID, "IX_SLCustomerDocument_SYSDocumentLayoutVersionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSDocTransmissionMethodID, "IX_SLCustomerDocument_SYSDocumentTransmissionMethodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSDocumentTypeID, "IX_SLCustomerDocument_SYSDocumentTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SendToSLCustomerLocationID, "IX_SLCustomerDocument_SendToSLCustomerLocationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SendToSLCustContactValueID, "IX_SendToSLCustContactValueID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLCustomerDocumentID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLCustomerDocuments)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerDocument_SLCustomerAccount");

                entity.HasOne(d => d.SYSDocTransmissionMethod)
                    .WithMany(p => p.SLCustomerDocuments)
                    .HasForeignKey(d => d.SYSDocTransmissionMethodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerDocument_SYSDocumentTransmissionMethod");

                entity.HasOne(d => d.SYSDocumentLayoutVersion)
                    .WithMany(p => p.SLCustomerDocuments)
                    .HasForeignKey(d => d.SYSDocumentLayoutVersionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerDocument_SYSDocumentLayoutVersion");

                entity.HasOne(d => d.SYSDocumentType)
                    .WithMany(p => p.SLCustomerDocuments)
                    .HasForeignKey(d => d.SYSDocumentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerDocument_SYSDocumentType");

                entity.HasOne(d => d.SendToSLCustContactValue)
                    .WithMany(p => p.SLCustomerDocuments)
                    .HasForeignKey(d => d.SendToSLCustContactValueID)
                    .HasConstraintName("FK_SLCustomerDocument_SLCustomerContactValue");

                entity.HasOne(d => d.SendToSLCustomerLocation)
                    .WithMany(p => p.SLCustomerDocuments)
                    .HasForeignKey(d => d.SendToSLCustomerLocationID)
                    .HasConstraintName("FK_SLCustomerDocument_SLCustomerLocation");
            });

            modelBuilder.Entity<SLCustomerLocation>(entity =>
            {
                entity.HasKey(e => e.SLCustomerLocationID)
                    .IsClustered(false);

                entity.ToTable("SLCustomerLocation");

                entity.HasIndex(e => e.PostCode, "IX_SLCustomerLocation_PostCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_SLCustomerLocation_SLCustomerAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSCountryCodeID, "IX_SLCustomerLocation_SYSCountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderLocationTypeID, "IX_SLCustomerLocation_SYSTraderLocationTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLCustomerLocationID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.AddressCountry)
                    .WithMany(p => p.SLCustomerLocationAddressCountries)
                    .HasForeignKey(d => d.AddressCountryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerLocation_AddressCountryID");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLCustomerLocations)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerLocation_SLCustomerAccount");

                entity.HasOne(d => d.SYSCountryCode)
                    .WithMany(p => p.SLCustomerLocationSYSCountryCodes)
                    .HasForeignKey(d => d.SYSCountryCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerLocation_SYSCountryCode");

                entity.HasOne(d => d.SYSTraderLocationType)
                    .WithMany(p => p.SLCustomerLocations)
                    .HasForeignKey(d => d.SYSTraderLocationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerLocation_SYSTraderLocationType");
            });

            modelBuilder.Entity<SLCustomerPeriodValue>(entity =>
            {
                entity.HasKey(e => e.SLCustomerPeriodValueID)
                    .IsClustered(false);

                entity.ToTable("SLCustomerPeriodValue");

                entity.HasIndex(e => e.SLAnalysisPeriodID, "IX_SLCustomerPeriodValue_SLAnalysisPeriodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_SLCustomerPeriodValue_SLCustomerAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLCustomerPeriodValueID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRateGainOrLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TotalCashValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCashValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCredNoteValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCreditNoteValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalFinanceChargesApplied).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalInvoiceValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalInvoiceValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalProfitValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalProfitValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.SLAnalysisPeriod)
                    .WithMany(p => p.SLCustomerPeriodValues)
                    .HasForeignKey(d => d.SLAnalysisPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerPeriodValue_SLAnalysisPeriod");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLCustomerPeriodValues)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerPeriodValue_SLCustomerAccount");
            });

            modelBuilder.Entity<SLCustomerPriceMapping>(entity =>
            {
                entity.ToTable("SLCustomerPriceMapping");

                entity.HasIndex(e => new { e.SLCustomerAccountID, e.PriceBandID }, "IX_SLCustomerPriceMapping_SLCustomerAccountID_PriceBandID")
                    .IsUnique();

                entity.Property(e => e.SLCustomerPriceMappingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PriceBand)
                    .WithMany(p => p.SLCustomerPriceMappings)
                    .HasForeignKey(d => d.PriceBandID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerPriceMapping_PriceBand");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLCustomerPriceMappings)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerPriceMapping_SLCustomerAccount");
            });

            modelBuilder.Entity<SLCustomerSyncStatusType>(entity =>
            {
                entity.ToTable("SLCustomerSyncStatusType");

                entity.Property(e => e.SLCustomerSyncStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLCustomerTurnoverView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLCustomerTurnoverView");

                entity.Property(e => e.mmsslt_CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslt_EndDate).HasColumnType("datetime");

                entity.Property(e => e.mmsslt_PeriodReference)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmsslt_StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SLCustomerYearValue>(entity =>
            {
                entity.HasKey(e => e.SLCustomerYearValueID)
                    .IsClustered(false);

                entity.ToTable("SLCustomerYearValue");

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_SLCustomerYearValue_SLCustomerAccount")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSFinancialYearID, "IX_SLCustomerYearValue_SYSFinancialYear")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLCustomerYearValueID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExchangeRateGainOrLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TotalCashValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCashValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCredNoteValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCreditNoteValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalFinanceChargesApplied).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalInvoiceValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalInvoiceValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalProfitValueToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalProfitValueToDateInBase).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLCustomerYearValues)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerYearValue_SLCustomerAcount");

                entity.HasOne(d => d.SYSFinancialYear)
                    .WithMany(p => p.SLCustomerYearValues)
                    .HasForeignKey(d => d.SYSFinancialYearID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLCustomerYearValue_SYSFinancialYear");
            });

            modelBuilder.Entity<SLDateToUseForAgeing>(entity =>
            {
                entity.ToTable("SLDateToUseForAgeing");

                entity.Property(e => e.SLDateToUseForAgeingID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLDocumentMessage>(entity =>
            {
                entity.ToTable("SLDocumentMessage");

                entity.HasIndex(e => e.SLDocumentMessageUsedForID, "IX_SLDocumentMessage_SLDocumentMessageUsedForID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLDocumentMessageID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MessageLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MessageLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MessageLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OmitIfAccountBalanceLessThan).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OmitIfCreditLimitGreaterThan).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SLDocumentMessageUsedFor)
                    .WithMany(p => p.SLDocumentMessages)
                    .HasForeignKey(d => d.SLDocumentMessageUsedForID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLDocumentMessage_SLDocumentMessageUsedFor");
            });

            modelBuilder.Entity<SLDocumentMessageUsedFor>(entity =>
            {
                entity.ToTable("SLDocumentMessageUsedFor");

                entity.Property(e => e.SLDocumentMessageUsedForID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLFinanceCharge>(entity =>
            {
                entity.HasKey(e => e.SLFinanceChargeID)
                    .IsClustered(false);

                entity.ToTable("SLFinanceCharge");

                entity.HasIndex(e => e.SLFinanceChargeID, "IX_SLFinanceCharge_FinanceChargeCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLFinanceChargeID, "SLFinanceChargeCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLFinanceChargeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MonthlyPercentageCharge).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SLHistRevalAllocationTran>(entity =>
            {
                entity.ToTable("SLHistRevalAllocationTran");

                entity.Property(e => e.SLHistRevalAllocationTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreAllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTransactionMovedToHistory).HasColumnType("datetime");

                entity.Property(e => e.DocumentToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.ExchangeGainLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.SLHistRevalAllocationTrans)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_SLHistRevalAllocationTran_SYSAccountingPeriod");

                entity.HasOne(d => d.SLHistoricalCustomerTran)
                    .WithMany(p => p.SLHistRevalAllocationTrans)
                    .HasForeignKey(d => d.SLHistoricalCustomerTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLHistRevalAllocationTran_SLHistoricalCustomerTran");

                entity.HasOne(d => d.SYSTraderRevalAllocType)
                    .WithMany(p => p.SLHistRevalAllocationTrans)
                    .HasForeignKey(d => d.SYSTraderRevalAllocTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLHistRevalAllocationTran_SYSTraderRevalAllocType");
            });

            modelBuilder.Entity<SLHistoricalCustomerTran>(entity =>
            {
                entity.HasKey(e => e.SLHistoricalCustomerTranID)
                    .HasName("PK_SLHistoricalCustomerAccountTransaction")
                    .IsClustered(false);

                entity.ToTable("SLHistoricalCustomerTran");

                entity.HasIndex(e => e.Source, "IX_SLHistoricalCustomerAccountTransaction")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CBAccountID, "IX_SLHistoricalCustomerAccountTransaction_CBAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_SLHistoricalCustomerAccountTransaction_SLCustomerAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderTranTypeID, "IX_SLHistoricalCustomerAccountTransaction_SYSTraderTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_SLHistoricalCustomerAccountTransaction_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransactionDate, "IX_SLHistoricalCustomerTran_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLHistoricalCustomerTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTransactionMovedToHistory).HasColumnType("datetime");

                entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentToAccountExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DocumentToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EffectiveExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FullSettlementDate).HasColumnType("datetime");

                entity.Property(e => e.GoodsValueInAccountCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentCloudPaymentID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.QueryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SalControlValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.SLHistoricalCustomerTrans)
                    .HasForeignKey(d => d.CBAccountID)
                    .HasConstraintName("FK_SLHistoricalCustomerAccountTransaction_CBAccount");

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.SLHistoricalCustomerTrans)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_SLHistoricalCustomerTran_SYSAccountingPeriod");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLHistoricalCustomerTrans)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLHistoricalCustomerAccountTransaction_SLCustomerAccount");

                entity.HasOne(d => d.SYSCorrectionTranType)
                    .WithMany(p => p.SLHistoricalCustomerTrans)
                    .HasForeignKey(d => d.SYSCorrectionTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLHistoricalCustomerTran_SYSCorrectionTranType");

                entity.HasOne(d => d.SYSTraderGenerateReasonType)
                    .WithMany(p => p.SLHistoricalCustomerTrans)
                    .HasForeignKey(d => d.SYSTraderGenerateReasonTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLHistoricalCustomerAccountTransaction_SYSTraderGenerationReasonType");

                entity.HasOne(d => d.SYSTraderTranType)
                    .WithMany(p => p.SLHistoricalCustomerTrans)
                    .HasForeignKey(d => d.SYSTraderTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLHistoricalCustomerAccountTransaction_SYSTraderTransactionType");
            });

            modelBuilder.Entity<SLInvoicesForOrdersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLInvoicesForOrdersView");

                entity.Property(e => e.mmsslin_DocumentStatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslin_InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.mmsslin_InvoiceNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmsslin_OrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLLiveAndHistRevAllocTranView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLLiveAndHistRevAllocTranView");

                entity.Property(e => e.CoreAllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentToBaseCurrencyRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.ExchangeGainLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLOfficeType>(entity =>
            {
                entity.HasKey(e => e.SLOfficeTypeID)
                    .IsClustered(false);

                entity.ToTable("SLOfficeType");

                entity.HasIndex(e => e.Name, "IX_SLOfficeType_Name")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLOfficeTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLPostAndHistCustomerTranView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLPostAndHistCustomerTranView");

                entity.Property(e => e.GoodsValueInBaseCurrency).HasColumnType("decimal(38, 16)");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLPostedCustomerTran>(entity =>
            {
                entity.HasKey(e => e.SLPostedCustomerTranID)
                    .HasName("PK_SLPostedCustomerAccountTransaction")
                    .IsClustered(false);

                entity.ToTable("SLPostedCustomerTran");

                entity.HasIndex(e => e.CBAccountID, "IX_SLPostedCustomerAccountTransaction_CBAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_SLPostedCustomerAccountTransaction_SLCustomerAccountID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderTranTypeID, "IX_SLPostedCustomerAccountTransaction_SYSTraderTransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_SLPostedCustomerAccountTransaction_UniqueReferenceNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransactionDate, "IX_SLPostedCustomerTran_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.UniqueReferenceNumber, e.TransactionDate }, "IX_SLPostedCustomerTran_URN_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLPostedCustomerTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentToAccountExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DocumentToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EffectiveExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FullSettlementDate).HasColumnType("datetime");

                entity.Property(e => e.GoodsValueInAccountCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentCloudPaymentID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.QueryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SalControlValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.SLPostedCustomerTrans)
                    .HasForeignKey(d => d.CBAccountID)
                    .HasConstraintName("FK_SLPostedCustomerAccountTransaction_CBAccount");

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.SLPostedCustomerTrans)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_SLPostedCustomerTran_NominalAccountingPeriod");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SLPostedCustomerTrans)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLPostedCustomerAccountTransaction_SLCustomerAccount");

                entity.HasOne(d => d.SYSCorrectionTranType)
                    .WithMany(p => p.SLPostedCustomerTrans)
                    .HasForeignKey(d => d.SYSCorrectionTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLPostedCustomerTran_SYSCorrectionTranType");

                entity.HasOne(d => d.SYSTraderGenerateReasonType)
                    .WithMany(p => p.SLPostedCustomerTrans)
                    .HasForeignKey(d => d.SYSTraderGenerateReasonTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLPostedCustomerAccountTransaction_SYSTraderGenerationReasonType");

                entity.HasOne(d => d.SYSTraderTranType)
                    .WithMany(p => p.SLPostedCustomerTrans)
                    .HasForeignKey(d => d.SYSTraderTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLPostedCustomerAccountTransaction_SYSTraderTransactionType");
            });

            modelBuilder.Entity<SLReportMessage>(entity =>
            {
                entity.ToTable("SLReportMessage");

                entity.Property(e => e.SLReportMessageID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Line1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Line2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Line3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MinimumCreditLimit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SLReportMessageType>(entity =>
            {
                entity.ToTable("SLReportMessageType");

                entity.Property(e => e.SLReportMessageTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLRevalAllocationTran>(entity =>
            {
                entity.ToTable("SLRevalAllocationTran");

                entity.HasIndex(e => e.SLPostedCustomerTranID, "IX_SLRevaluationAllocationTransaction_SLPostedCustomerAccountTransactionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTraderRevalAllocTypeID, "IX_SLRevaluationAllocationTransaction_SYSTraderRevaluationAllocationTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLRevalAllocationTranID).ValueGeneratedNever();

                entity.Property(e => e.AllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreAllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.ExchangeGainLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.SLRevalAllocationTrans)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_SLRevalAllocationTran_SYSAccountingPeriod");

                entity.HasOne(d => d.SLPostedCustomerTran)
                    .WithMany(p => p.SLRevalAllocationTrans)
                    .HasForeignKey(d => d.SLPostedCustomerTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLRevaluationAllocationTransaction_SLPostedCustomerAccountTransaction");

                entity.HasOne(d => d.SYSTraderRevalAllocType)
                    .WithMany(p => p.SLRevalAllocationTrans)
                    .HasForeignKey(d => d.SYSTraderRevalAllocTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLRevaluationAllocationTransaction_SYSTraderRevaluationAllocationType");
            });

            modelBuilder.Entity<SLSetting>(entity =>
            {
                entity.ToTable("SLSetting");

                entity.HasIndex(e => e.DefaultSYSTaxRateID, "IX_SLSetting_DefaultSYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLDateToUseForAgeingID, "IX_SLSetting_SLDateToUseForAgeingID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLTranToShowOnStatementsID, "IX_SLSetting_SLTransactionsToShowOnStatementsID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSPaymentTermsBasisID, "IX_SLSetting_SYSPaymentTermsBasisID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultSYSTaxRateID).HasDefaultValueSql("((1))");

                entity.Property(e => e.DefaultTermsAgreed)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EarlySettlementDiscountPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NextAccountNumber).HasDefaultValueSql("('')");

                entity.Property(e => e.NumberOfAgeingPeriods).HasDefaultValueSql("((3))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ShowOutstandingTrans)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseAccountPeriodsAsTradPeriods)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.DefaultSYSTaxRate)
                    .WithMany(p => p.SLSettings)
                    .HasForeignKey(d => d.DefaultSYSTaxRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLSetting_SYSTaxRate");

                entity.HasOne(d => d.SLDateToUseForAgeing)
                    .WithMany(p => p.SLSettings)
                    .HasForeignKey(d => d.SLDateToUseForAgeingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLSetting_SLDateToUseForAging");

                entity.HasOne(d => d.SLTranToShowOnStatements)
                    .WithMany(p => p.SLSettings)
                    .HasForeignKey(d => d.SLTranToShowOnStatementsID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLSetting_SLTransactionsToShowOnStatements");

                entity.HasOne(d => d.SYSPaymentTermsBasis)
                    .WithMany(p => p.SLSettings)
                    .HasForeignKey(d => d.SYSPaymentTermsBasisID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLSetting_SYSPaymentTermsBasis");
            });

            modelBuilder.Entity<SLTotalOverdueBalancesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLTotalOverdueBalancesView");

                entity.Property(e => e.AllocatedValueTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountShortName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.GoodsValueInAccountCurrencyTotal).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<SLTranMemo>(entity =>
            {
                entity.HasKey(e => e.SLTranMemoID)
                    .HasName("PK_SLTransactionMemo")
                    .IsClustered(false);

                entity.ToTable("SLTranMemo");

                entity.HasIndex(e => e.SLPostedCustomerTranID, "IX_SLTransactionMemo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SLPostedCustomerTranID, "IX_SLTransactionMemo_SLPostedCustomerAccountTransactionID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SLTranMemoID).ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MemoCreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MemoText)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TimeAndDateMemoCreated).HasColumnType("datetime");

                entity.Property(e => e.TimeAndDateMemoLastUpdated).HasColumnType("datetime");

                entity.HasOne(d => d.SLPostedCustomerTran)
                    .WithMany(p => p.SLTranMemos)
                    .HasForeignKey(d => d.SLPostedCustomerTranID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SLTransactionMemo_SLPostedCustomerAccountTransaction");
            });

            modelBuilder.Entity<SLTranToShowOnStatement>(entity =>
            {
                entity.HasKey(e => e.SLTranToShowOnStatementsID)
                    .HasName("PK_SLTransactionsToShowOnStatements");

                entity.Property(e => e.SLTranToShowOnStatementsID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SLTransactionSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SLTransactionSummary");

                entity.Property(e => e.CashValue).HasColumnType("decimal(21, 2)");

                entity.Property(e => e.CashValueInBase).HasColumnType("decimal(38, 13)");

                entity.Property(e => e.CreditNoteValue).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.CreditNoteValueInBase).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.ExchangeRateGainLoss).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.InvoiceValue).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.InvoiceValueInBase).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SOBackToBackPOView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOBackToBackPOView");

                entity.Property(e => e.mmssobo_OrderDate).HasColumnType("datetime");

                entity.Property(e => e.mmssobo_PODocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssobo_ReqDelDate).HasColumnType("datetime");

                entity.Property(e => e.mmssobo_SODocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssobo_StockItem)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssobo_SupplierName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPAdditionalCharge>(entity =>
            {
                entity.ToTable("SOPAdditionalCharge");

                entity.HasIndex(e => e.Code, "IX_SOPAdditionalCharge_Code")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NominalCodeID, "IX_SOPAdditionalCharge_NominalCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCodeID, "IX_SOPAdditionalCharge_TaxCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPAdditionalChargeID).ValueGeneratedNever();

                entity.Property(e => e.ChargeValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NotionalCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NominalCode)
                    .WithMany(p => p.SOPAdditionalCharges)
                    .HasForeignKey(d => d.NominalCodeID)
                    .HasConstraintName("FK_SOPAdditionalCharge_NLNominalAccount");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.SOPAdditionalCharges)
                    .HasForeignKey(d => d.TaxCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPAdditionalCharge_SYSTaxRate");
            });

            modelBuilder.Entity<SOPAdditionalChargeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPAdditionalChargeView");

                entity.Property(e => e.mmssac_ChargeName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssac_Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssac_LineTaxValue)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssac_LineTotalValue)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssac_TaxName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPAllocationLine>(entity =>
            {
                entity.ToTable("SOPAllocationLine");

                entity.HasIndex(e => e.AllocationID, "IX_SOPAllocationLine_AllocationID")
                    .IsUnique();

                entity.HasIndex(e => e.OrderNumber, "IX_SOPAllocationLine_OrderNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PickingListPrintStatusID, "IX_SOPAllocationLine_PickingListPrintStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnLineID, "IX_SOPAllocationLine_SOPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPAllocationLineID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedDate).HasColumnType("datetime");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DespatchedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StockUnitAllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitDespatchedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Allocation)
                    .WithOne(p => p.SOPAllocationLine)
                    .HasForeignKey<SOPAllocationLine>(d => d.AllocationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AllocationLine_AllocationBalance");

                entity.HasOne(d => d.PickingListPrintStatus)
                    .WithMany(p => p.SOPAllocationLines)
                    .HasForeignKey(d => d.PickingListPrintStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPAllocationLine_DocumentPrintStatus");

                entity.HasOne(d => d.SOPOrderReturnLine)
                    .WithMany(p => p.SOPAllocationLines)
                    .HasForeignKey(d => d.SOPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPAllocationLine_SOPOrderReturnLine");
            });

            modelBuilder.Entity<SOPAnalysisCode>(entity =>
            {
                entity.ToTable("SOPAnalysisCode");

                entity.Property(e => e.SOPAnalysisCodeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AnalysisCodeMapping)
                    .WithMany(p => p.SOPAnalysisCodeAnalysisCodeMappings)
                    .HasForeignKey(d => d.AnalysisCodeMappingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPAnalysisCode_AnalysisCodeMapping");

                entity.HasOne(d => d.CustomerAnalysisCodeMapping)
                    .WithMany(p => p.SOPAnalysisCodeCustomerAnalysisCodeMappings)
                    .HasForeignKey(d => d.CustomerAnalysisCodeMappingID)
                    .HasConstraintName("FK_SOPAnalysisCode_CustomerAnalysisCodeMapping");

                entity.HasOne(d => d.TranHistAnalysisCodeMapping)
                    .WithMany(p => p.SOPAnalysisCodeTranHistAnalysisCodeMappings)
                    .HasForeignKey(d => d.TranHistAnalysisCodeMappingID)
                    .HasConstraintName("FK_SOPAnalysisCode_TranHistAnalysisCodeMapping");
            });

            modelBuilder.Entity<SOPCancelledLine>(entity =>
            {
                entity.ToTable("SOPCancelledLine");

                entity.HasIndex(e => e.ItemCode, "IX_SOPCancelledLine_ItemCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnID, "IX_SOPCancelledLine_SOPOrderReturnID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPCancelledLineID).ValueGeneratedNever();

                entity.Property(e => e.CancelledDate).HasColumnType("datetime");

                entity.Property(e => e.CancelledQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SellingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StockUnitCancelledQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.SOPCancelledLines)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPCancelledLine_SOPOrderReturn");
            });

            modelBuilder.Entity<SOPCancelledLineArch>(entity =>
            {
                entity.HasKey(e => e.SOPCancelledLineID);

                entity.ToTable("SOPCancelledLineArch");

                entity.HasIndex(e => e.ItemCode, "IX_SOPCancelledLineArch_ItemCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnID, "IX_SOPCancelledLineArch_SOPOrderReturnID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPCancelledLineID).ValueGeneratedNever();

                entity.Property(e => e.CancelledDate).HasColumnType("datetime");

                entity.Property(e => e.CancelledQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SellingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StockUnitCancelledQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.SOPCancelledLineArches)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPCancelledLineArch_SOPOrderReturnArch");
            });

            modelBuilder.Entity<SOPCreditCISRCText>(entity =>
            {
                entity.ToTable("SOPCreditCISRCText");

                entity.Property(e => e.SOPCreditCISRCTextID).ValueGeneratedNever();

                entity.Property(e => e.ReverseChargeText)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPDespatchLineProfitAnalysis>(entity =>
            {
                entity.ToTable("SOPDespatchLineProfitAnalysis");

                entity.HasIndex(e => e.SOPDespatchReceiptLineID, "IX_SOPDespatchLineProfitAnalysis_SOPDespatchReceiptLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPDespatchLineProfitAnalysisID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EstProfitPercentOnCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstProfitPercentOnRev).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedProfitValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.IssueRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RealisedCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitPercentOnCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitPercentOnRev).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedQuantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.SOPDespatchReceiptLine)
                    .WithMany(p => p.SOPDespatchLineProfitAnalyses)
                    .HasForeignKey(d => d.SOPDespatchReceiptLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPDespatchLineProfitAnalysis_SOPDespatchReceiptLine");
            });

            modelBuilder.Entity<SOPDespatchNoteNumber>(entity =>
            {
                entity.ToTable("SOPDespatchNoteNumber");

                entity.Property(e => e.SOPDespatchNoteNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<SOPDespatchReceipt>(entity =>
            {
                entity.ToTable("SOPDespatchReceipt");

                entity.HasIndex(e => new { e.SOPDespatchReceiptTypeID, e.DocumentNo }, "IX_SOPDespatchReceipt_SOPDespatchReceiptTypeID_DocumentNo")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderID, "IX_SOPDespatchReceipt_SOPOrderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPDespatchReceiptID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DespatchReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SOPDespatchReceiptType)
                    .WithMany(p => p.SOPDespatchReceipts)
                    .HasForeignKey(d => d.SOPDespatchReceiptTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPDespatchReceipt_SOPDespatchReceiptType");

                entity.HasOne(d => d.SOPOrder)
                    .WithMany(p => p.SOPDespatchReceipts)
                    .HasForeignKey(d => d.SOPOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPDespatchReceipt_SOPOrderReturn");
            });

            modelBuilder.Entity<SOPDespatchReceiptLine>(entity =>
            {
                entity.ToTable("SOPDespatchReceiptLine");

                entity.HasIndex(e => e.IntrastatStatusID, "IX_SOPDespatchReceiptLine_IntrastatStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPDespatchReceiptID, "IX_SOPDespatchReceiptLine_SOPDespatchReceiptID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPInvoiceCreditLineID, "IX_SOPDespatchReceiptLine_SOPInvoiceCreditLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnLineID, "IX_SOPDespatchReceiptLine_SOPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPDespatchReceiptLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DespatchReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.DespatchReceiptNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.InvoiceCreditNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderReturnNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitDespRcptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IntrastatStatus)
                    .WithMany(p => p.SOPDespatchReceiptLines)
                    .HasForeignKey(d => d.IntrastatStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPDespatchReceiptLine_IntrastatStatusID");

                entity.HasOne(d => d.SOPDespatchReceipt)
                    .WithMany(p => p.SOPDespatchReceiptLines)
                    .HasForeignKey(d => d.SOPDespatchReceiptID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DespatchLine_DespatchNote");

                entity.HasOne(d => d.SOPInvoiceCreditLine)
                    .WithMany(p => p.SOPDespatchReceiptLines)
                    .HasForeignKey(d => d.SOPInvoiceCreditLineID)
                    .HasConstraintName("FK_DespatchLine_InvoiceLine");

                entity.HasOne(d => d.SOPOrderReturnLine)
                    .WithMany(p => p.SOPDespatchReceiptLines)
                    .HasForeignKey(d => d.SOPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPDespatchReceiptLine_SOPOrderReturnLine");
            });

            modelBuilder.Entity<SOPDespatchReceiptLineShortfall>(entity =>
            {
                entity.HasKey(e => e.SOPDespatchReceiptLineShortfallID)
                    .IsClustered(false);

                entity.ToTable("SOPDespatchReceiptLineShortfall");

                entity.HasIndex(e => e.SOPDespatchReceiptLineShortfallID, "SOPDespatchReceiptLineShortfallCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPDespatchReceiptLineShortfallID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.MovementBalance)
                    .WithMany(p => p.SOPDespatchReceiptLineShortfalls)
                    .HasForeignKey(d => d.MovementBalanceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPDespatchReceiptLineShortfall_MovementBalance");

                entity.HasOne(d => d.SOPDespatchReceiptLine)
                    .WithMany(p => p.SOPDespatchReceiptLineShortfalls)
                    .HasForeignKey(d => d.SOPDespatchReceiptLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPDespatchReceiptLineShortfall_SOPDespatchReceiptLine");
            });

            modelBuilder.Entity<SOPDespatchReceiptType>(entity =>
            {
                entity.ToTable("SOPDespatchReceiptType");

                entity.Property(e => e.SOPDespatchReceiptTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPDocDelAddress>(entity =>
            {
                entity.ToTable("SOPDocDelAddress");

                entity.HasIndex(e => e.CountryCodeID, "IX_SOPDocDelAddress_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnID, "IX_SOPDocDelAddress_SOPOrderReturnID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCodeID, "IX_SOPDocDelAddress_TaxCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SOPOrderReturnID, e.SOPDocDelAddressID }, "IX_SOPOrderReturnID_SOPDocDelAddressID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPDocDelAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.SOPDocDelAddresses)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_SOPDocDelAddress_SYSCountryCode");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithOne(p => p.SOPDocDelAddress)
                    .HasForeignKey<SOPDocDelAddress>(d => d.SOPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPDocDelAddress_SOPOrderReturn");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.SOPDocDelAddresses)
                    .HasForeignKey(d => d.TaxCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPDocDelAddress_SYSTaxRate");
            });

            modelBuilder.Entity<SOPDocDelAddressArch>(entity =>
            {
                entity.HasKey(e => e.SOPDocDelAddressID);

                entity.ToTable("SOPDocDelAddressArch");

                entity.HasIndex(e => e.CountryCodeID, "IX_SOPDocDelAddressArch_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnID, "IX_SOPDocDelAddressArch_SOPOrderReturnID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPDocDelAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.SOPDocDelAddressArches)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_SOPDocDelAddressArch_SYSCountryCode");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithOne(p => p.SOPDocDelAddressArch)
                    .HasForeignKey<SOPDocDelAddressArch>(d => d.SOPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPDocDelAddressArch_SOPOrderReturnArch");
            });

            modelBuilder.Entity<SOPIntrastatVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPIntrastatVw");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommodityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DestinationCountryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.InvoiceCreditNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MultipleOfBaseUnit).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.OriginCountryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.StockUnitDespRcptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitInvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitLineQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplementaryUnitConversionRatio).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.Weight).HasColumnType("decimal(15, 4)");
            });

            modelBuilder.Entity<SOPInvCredAddress>(entity =>
            {
                entity.ToTable("SOPInvCredAddress");

                entity.HasIndex(e => e.SOPInvoiceCreditID, "IX_SOPInvCredAddress_SOPInvoiceCreditID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPInvCredAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.SOPInvoiceCredit)
                    .WithOne(p => p.SOPInvCredAddress)
                    .HasForeignKey<SOPInvCredAddress>(d => d.SOPInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvCredAddress_SOPInvoiceCredit");
            });

            modelBuilder.Entity<SOPInvCredAddressArch>(entity =>
            {
                entity.HasKey(e => e.SOPInvCredAddressID);

                entity.ToTable("SOPInvCredAddressArch");

                entity.HasIndex(e => e.SOPInvoiceCreditID, "IX_SOPInvCredAddressArch_SOPInvoiceCreditID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPInvCredAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.SOPInvoiceCredit)
                    .WithOne(p => p.SOPInvCredAddressArch)
                    .HasForeignKey<SOPInvCredAddressArch>(d => d.SOPInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvCredAddressArch_SOPInvoiceCreditArch");
            });

            modelBuilder.Entity<SOPInvCredDelAddrArch>(entity =>
            {
                entity.HasKey(e => e.SOPInvCredDelAddressID);

                entity.ToTable("SOPInvCredDelAddrArch");

                entity.HasIndex(e => e.SOPInvoiceCreditID, "IX_SOPInvCredDelAddrArch_SOPInvoiceCreditID")
                    .IsUnique();

                entity.Property(e => e.SOPInvCredDelAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.SOPInvoiceCredit)
                    .WithOne(p => p.SOPInvCredDelAddrArch)
                    .HasForeignKey<SOPInvCredDelAddrArch>(d => d.SOPInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvCredDelAddrArch_SOPInvoiceCreditArch");
            });

            modelBuilder.Entity<SOPInvCredDelAddress>(entity =>
            {
                entity.ToTable("SOPInvCredDelAddress");

                entity.HasIndex(e => e.SOPInvoiceCreditID, "IX_SOPInvCredDelAddress_SOPInvoiceCreditID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPInvCredDelAddressID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.SOPInvoiceCredit)
                    .WithOne(p => p.SOPInvCredDelAddress)
                    .HasForeignKey<SOPInvCredDelAddress>(d => d.SOPInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvCredDelAddress_SOPInvoiceCredit");
            });

            modelBuilder.Entity<SOPInvCredForPaymentMethodView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPInvCredForPaymentMethodView");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPInvCredNomItemArch>(entity =>
            {
                entity.HasKey(e => e.SOPInvCredNominalItemID);

                entity.ToTable("SOPInvCredNomItemArch");

                entity.HasIndex(e => e.SOPInvoiceCreditID, "IX_SOPInvCredNomItemArch_SOPInvoiceCreditID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPInvCredNominalItemID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SOPInvoiceCredit)
                    .WithMany(p => p.SOPInvCredNomItemArches)
                    .HasForeignKey(d => d.SOPInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvCredNomItemArch_SOPInvoiceCreditArch");
            });

            modelBuilder.Entity<SOPInvCredNominalItem>(entity =>
            {
                entity.ToTable("SOPInvCredNominalItem");

                entity.HasIndex(e => e.SOPInvoiceCreditID, "IX_SOPInvCredNominalItem_SOPInvoiceCreditID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPInvCredNominalItemID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SOPInvoiceCredit)
                    .WithMany(p => p.SOPInvCredNominalItems)
                    .HasForeignKey(d => d.SOPInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvCredNominalItem_SOPInvoiceCredit");
            });

            modelBuilder.Entity<SOPInvCredTaxItem>(entity =>
            {
                entity.ToTable("SOPInvCredTaxItem");

                entity.HasIndex(e => e.SOPInvoiceCreditID, "IX_SOPInvCredTaxItem_SOPInvoiceCreditID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCodeID, "IX_SOPInvCredTaxItem_TaxCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPInvCredTaxItemID).ValueGeneratedNever();

                entity.Property(e => e.CoreDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreDiscountedTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreGoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountedTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.SOPInvoiceCredit)
                    .WithMany(p => p.SOPInvCredTaxItems)
                    .HasForeignKey(d => d.SOPInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvCredTaxItem_SOPInvoiceCredit");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.SOPInvCredTaxItems)
                    .HasForeignKey(d => d.TaxCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvCredTaxItem_SYSTaxRate");
            });

            modelBuilder.Entity<SOPInvCredTaxItemArch>(entity =>
            {
                entity.HasKey(e => e.SOPInvCredTaxItemID);

                entity.ToTable("SOPInvCredTaxItemArch");

                entity.HasIndex(e => e.SOPInvoiceCreditID, "IX_SOPInvCredTaxItemArch_SOPInvoiceCreditID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPInvCredTaxItemID).ValueGeneratedNever();

                entity.Property(e => e.CoreDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreDiscountedTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreGoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CoreTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountedTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.SOPInvoiceCredit)
                    .WithMany(p => p.SOPInvCredTaxItemArches)
                    .HasForeignKey(d => d.SOPInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvCredTaxItemArch_SOPInvoiceCreditArch");
            });

            modelBuilder.Entity<SOPInvCreditLineArch>(entity =>
            {
                entity.HasKey(e => e.SOPInvoiceCreditLineID)
                    .HasName("PK_SOPInvoiceCreditLineArch");

                entity.ToTable("SOPInvCreditLineArch");

                entity.HasIndex(e => e.SOPInvoiceCreditID, "IX_SOPInvCreditLineArch_SOPInvoiceCreditID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnLineID, "IX_SOPInvCreditLineArch_SOPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPInvoiceCreditLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DespatchReceiptNos)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceCreditDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ItemUnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LineDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderReturnNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OutstandingQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TEMMessageID).HasDefaultValueSql("((0))");

                entity.Property(e => e.TEMmessageLineNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SOPInvoiceCredit)
                    .WithMany(p => p.SOPInvCreditLineArches)
                    .HasForeignKey(d => d.SOPInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCreditLineArch_SOPInvoiceCreditArch");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.SOPInvCreditLineArches)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .HasConstraintName("FK_SOPInvCreditLineArch_SOPOrderReturnArch");

                entity.HasOne(d => d.SOPOrderReturnLine)
                    .WithMany(p => p.SOPInvCreditLineArches)
                    .HasForeignKey(d => d.SOPOrderReturnLineID)
                    .HasConstraintName("FK_SOPInvoiceCreditLineArch_SOPOrderReturnLineArch");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.SOPInvCreditLineArches)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .HasConstraintName("FK_SOPInvCreditLineArch_SYSTaxRate");
            });

            modelBuilder.Entity<SOPInvoiceCISRCText>(entity =>
            {
                entity.ToTable("SOPInvoiceCISRCText");

                entity.Property(e => e.SOPInvoiceCISRCTextID).ValueGeneratedNever();

                entity.Property(e => e.ReverseChargeText)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPInvoiceCredit>(entity =>
            {
                entity.ToTable("SOPInvoiceCredit");

                entity.HasIndex(e => e.CustomerID, "IX_SOPInvoiceCredit_CustomerID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentDate, "IX_SOPInvoiceCredit_DocumentDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentNo, "IX_SOPInvoiceCredit_DocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.DocumentStatusID, e.DocumentNo }, "IX_SOPInvoiceCredit_DocumentStatusID_DocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentBankAccountID, "IX_SOPInvoiceCredit_PaymentBankAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentTypeID, "IX_SOPInvoiceCredit_PaymentTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SOPInvoiceCreditTypeID, e.DocumentNo }, "IX_SOPInvoiceCredit_SOPInvoiceCreditTypeID_DocumentNo")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPInvoiceCreditID).ValueGeneratedNever();

                entity.Property(e => e.CancelledBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateCancelled).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountedTotalGoods).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.DocumentDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EmailHeader)
                    .IsRequired()
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FullPaymentText)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InvdCoreTaxValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvdGrossValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvdNetValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvdTaxValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedChargesValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedCoreTaxValInclNotional).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedCoreTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedTaxValInclNotional).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentCloudPaymentID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReasonCancelled)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SettlementDiscPercent).HasColumnType("decimal(6, 2)");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SOPInvoiceCredits)
                    .HasForeignKey(d => d.CustomerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCredit_SLCustomerAccount");

                entity.HasOne(d => d.DocumentStatus)
                    .WithMany(p => p.SOPInvoiceCredits)
                    .HasForeignKey(d => d.DocumentStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCredit_DocumentStatus");

                entity.HasOne(d => d.InvoiceCreditUpdateStatusType)
                    .WithMany(p => p.SOPInvoiceCredits)
                    .HasForeignKey(d => d.InvoiceCreditUpdateStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCredit_InvoiceCreditUpdateStatusType");

                entity.HasOne(d => d.PaymentBankAccount)
                    .WithMany(p => p.SOPInvoiceCredits)
                    .HasForeignKey(d => d.PaymentBankAccountID)
                    .HasConstraintName("FK_SOPInvoiceCredit_CBAccount");

                entity.HasOne(d => d.PaymentCloudPaymentStatusType)
                    .WithMany(p => p.SOPInvoiceCredits)
                    .HasForeignKey(d => d.PaymentCloudPaymentStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCredit_PaymentCloudPaymentStatusType");

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.SOPInvoiceCredits)
                    .HasForeignKey(d => d.PaymentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCredit_PaymentType");

                entity.HasOne(d => d.SOPInvoiceCreditType)
                    .WithMany(p => p.SOPInvoiceCredits)
                    .HasForeignKey(d => d.SOPInvoiceCreditTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCredit_SOPInvoiceCreditType");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.SOPInvoiceCredits)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .HasConstraintName("FK_SOPInvoiceCredit_SOPOrderReturn");
            });

            modelBuilder.Entity<SOPInvoiceCreditArch>(entity =>
            {
                entity.HasKey(e => e.SOPInvoiceCreditID);

                entity.ToTable("SOPInvoiceCreditArch");

                entity.HasIndex(e => e.CustomerID, "IX_SOPInvoiceCreditArch_CustomerID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentStatusID, "IX_SOPInvoiceCreditArch_DocumentStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.DocumentStatusID, e.SOPInvoiceCreditID }, "IX_SOPInvoiceCreditArch_DocumentStatusID_SOPInvoiceCreditID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentBankAccountID, "IX_SOPInvoiceCreditArch_PaymentBankAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentTypeID, "IX_SOPInvoiceCreditArch_PaymentTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPInvoiceCreditTypeID, "IX_SOPInvoiceCreditArch_SOPInvoiceCreditTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPInvoiceCreditID).ValueGeneratedNever();

                entity.Property(e => e.CancelledBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateCancelled).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountedTotalGoods).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.DocumentDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EmailHeader)
                    .IsRequired()
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FullPaymentText)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.InvdCoreTaxValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvdGrossValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvdNetValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvdTaxValInclSettDisc).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedChargesValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedCoreTaxValInclNotional).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedCoreTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedTaxValInclNotional).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicedTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentCloudPaymentID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReasonCancelled)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SettlementDiscPercent).HasColumnType("decimal(6, 2)");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SOPInvoiceCreditArches)
                    .HasForeignKey(d => d.CustomerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCreditArch_SLCustomerAccount");

                entity.HasOne(d => d.DocumentStatus)
                    .WithMany(p => p.SOPInvoiceCreditArches)
                    .HasForeignKey(d => d.DocumentStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCreditArch_DocumentStatus");

                entity.HasOne(d => d.InvoiceCreditUpdateStatusType)
                    .WithMany(p => p.SOPInvoiceCreditArches)
                    .HasForeignKey(d => d.InvoiceCreditUpdateStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCreditArch_InvoiceCreditUpdateStatusType");

                entity.HasOne(d => d.PaymentBankAccount)
                    .WithMany(p => p.SOPInvoiceCreditArches)
                    .HasForeignKey(d => d.PaymentBankAccountID)
                    .HasConstraintName("FK_SOPInvoiceCreditArch_CBAccount");

                entity.HasOne(d => d.PaymentCloudPaymentStatusType)
                    .WithMany(p => p.SOPInvoiceCreditArches)
                    .HasForeignKey(d => d.PaymentCloudPaymentStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCreditArch_PaymentCloudPaymentStatusType");

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.SOPInvoiceCreditArches)
                    .HasForeignKey(d => d.PaymentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCreditArch_PaymentType");

                entity.HasOne(d => d.SOPInvoiceCreditType)
                    .WithMany(p => p.SOPInvoiceCreditArches)
                    .HasForeignKey(d => d.SOPInvoiceCreditTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPInvoiceCreditArch_SOPInvoiceCreditType");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.SOPInvoiceCreditArches)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .HasConstraintName("FK_SOPInvoiceCreditArch_SOPOrderReturn");
            });

            modelBuilder.Entity<SOPInvoiceCreditLine>(entity =>
            {
                entity.ToTable("SOPInvoiceCreditLine");

                entity.HasIndex(e => e.SOPInvoiceCreditID, "IX_SOPInvoiceCreditLine_SOPInvoiceCreditID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnLineID, "IX_SOPInvoiceCreditLine_SOPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPInvoiceCreditLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DespatchReceiptNos)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceCreditDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ItemUnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LineDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderReturnNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OutstandingQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TEMMessageID).HasDefaultValueSql("((0))");

                entity.Property(e => e.TEMmessageLineNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SOPInvoiceCredit)
                    .WithMany(p => p.SOPInvoiceCreditLines)
                    .HasForeignKey(d => d.SOPInvoiceCreditID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvoiceLine_InvoiceOrCreditNote");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.SOPInvoiceCreditLines)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .HasConstraintName("FK_SOPInvoiceCreditLine_SOPOrderReturn");

                entity.HasOne(d => d.SOPOrderReturnLine)
                    .WithMany(p => p.SOPInvoiceCreditLines)
                    .HasForeignKey(d => d.SOPOrderReturnLineID)
                    .HasConstraintName("FK_SOPInvoiceCreditLine_SOPOrderReturnLine");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.SOPInvoiceCreditLines)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .HasConstraintName("FK_SOPInvoiceCreditLine_SYSTaxRate");
            });

            modelBuilder.Entity<SOPInvoiceCreditType>(entity =>
            {
                entity.ToTable("SOPInvoiceCreditType");

                entity.Property(e => e.SOPInvoiceCreditTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPInvoiceLayout>(entity =>
            {
                entity.ToTable("SOPInvoiceLayout");

                entity.Property(e => e.SOPInvoiceLayoutID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LayoutType).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SOPMessageLine>(entity =>
            {
                entity.ToTable("SOPMessageLine");

                entity.Property(e => e.SOPMessageLineID).ValueGeneratedNever();

                entity.Property(e => e.MessageText)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SOPOrdCommentForDspNte>(entity =>
            {
                entity.ToTable("SOPOrdCommentForDspNte");

                entity.HasIndex(e => e.SOPDespatchReceiptID, "IX_SOPOrdCommentForDspNte_SOPDespatchReceiptID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnLineID, "IX_SOPOrdCommentForDspNte_SOPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPOrdCommentForDspNteID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SOPDespatchReceipt)
                    .WithMany(p => p.SOPOrdCommentForDspNtes)
                    .HasForeignKey(d => d.SOPDespatchReceiptID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrdCommentForDspNte_SOPDespatchReceipt");

                entity.HasOne(d => d.SOPOrderReturnLine)
                    .WithMany(p => p.SOPOrdCommentForDspNtes)
                    .HasForeignKey(d => d.SOPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrdCommentForDspNte_SOPOrderReturnLine");
            });

            modelBuilder.Entity<SOPOrderEntryType>(entity =>
            {
                entity.ToTable("SOPOrderEntryType");

                entity.Property(e => e.SOPOrderEntryTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPOrderFulfilmentMethod>(entity =>
            {
                entity.ToTable("SOPOrderFulfilmentMethod");

                entity.Property(e => e.SOPOrderFulfilmentMethodID).ValueGeneratedNever();

                entity.Property(e => e.SOPOrderFulfilmentMethodName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPOrderLineProfitAnalysis>(entity =>
            {
                entity.ToTable("SOPOrderLineProfitAnalysis");

                entity.HasIndex(e => e.SOPOrderProfitAnalysisID, "IX_SOPOrderLineProfitAnalysis_SOPOrderProfitAnalysisID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnLineID, "IX_SOPOrderLineProfitAnalysis_SOPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPOrderLineProfitAnalysisID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EstProfitPercentOnCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstProfitPercentOnRev).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedCostRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedProfitValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.IssueRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RealisedCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitPercentOnCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitPercentOnRev).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedQuantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.SOPOrderProfitAnalysis)
                    .WithMany(p => p.SOPOrderLineProfitAnalyses)
                    .HasForeignKey(d => d.SOPOrderProfitAnalysisID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderLineProfitAnalysis_SOPOrderProfitAnalysis");

                entity.HasOne(d => d.SOPOrderReturnLine)
                    .WithMany(p => p.SOPOrderLineProfitAnalyses)
                    .HasForeignKey(d => d.SOPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderLineProfitAnalysis_SOPOrderReturnLine");
            });

            modelBuilder.Entity<SOPOrderLinesDespatchView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPOrderLinesDespatchView");

                entity.Property(e => e.mmssold_DespatchReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.mmssold_DespatchReceiptNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssold_DespatchedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssold_ItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmssold_OrderDocumentNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPOrderLinesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPOrderLinesView");

                entity.Property(e => e.mmssool_Complete)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mmssool_DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssool_ItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmssool_ItemDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.mmssool_POPOrder)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPOrderMemo>(entity =>
            {
                entity.ToTable("SOPOrderMemo");

                entity.Property(e => e.SOPOrderMemoID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MemoCreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MemoText)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TimeAndDateMemoCreated).HasColumnType("datetime");
            });

            modelBuilder.Entity<SOPOrderNumber>(entity =>
            {
                entity.ToTable("SOPOrderNumber");

                entity.Property(e => e.SOPOrderNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<SOPOrderProfitAnalysis>(entity =>
            {
                entity.ToTable("SOPOrderProfitAnalysis");

                entity.HasIndex(e => e.SOPOrderReturnID, "IX_SOPOrderProfitAnalysis_SOPOrderReturnID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPOrderProfitAnalysisID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EstProfitPercentOnCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstProfitPercentOnRev).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedProfitValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.IssueValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RealisedCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedIssueValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitPercentOnCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitPercentOnRev).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RealisedProfitValue).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.SOPOrderProfitAnalyses)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderProfitAnalysis_SOPOrderReturn");
            });

            modelBuilder.Entity<SOPOrderReturn>(entity =>
            {
                entity.HasKey(e => e.SOPOrderReturnID)
                    .IsClustered(false);

                entity.ToTable("SOPOrderReturn");

                entity.HasIndex(e => new { e.DocumentNo, e.SOPOrderReturnID }, "IX_DocumentNo_SOPOrderReturnID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnID, "IX_SOPOrderReturn")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.AllocatedStatusID, "IX_SOPOrderReturn_AllocatedStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CancelledStatusID, "IX_SOPOrderReturn_CancelledStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CurrencyID, "IX_SOPOrderReturn_CurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CustomerDocumentNo, "IX_SOPOrderReturn_CustomerDocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CustomerID, "IX_SOPOrderReturn_CustomerID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CustomerTypeID, "IX_SOPOrderReturn_CustomerTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DespatchReceiptStatusID, "IX_SOPOrderReturn_DespatchReceiptStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentDate, "IX_SOPOrderReturn_DocumentDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentNo, "IX_SOPOrderReturn_DocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentPrintStatusID, "IX_SOPOrderReturn_DocumentPrintStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentStatusID, "IX_SOPOrderReturn_DocumentStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.DocumentTypeID, e.DocumentNo }, "IX_SOPOrderReturn_DocumentTypeID_DocumentNo")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.DocumentTypeID, e.DocumentStatusID, e.DocumentNo }, "IX_SOPOrderReturn_DocumentTypeID_DocumentStatusID_DocumentNo")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ExternalReference, "IX_SOPOrderReturn_ExternalReference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvoiceCreditStatusID, "IX_SOPOrderReturn_InvoiceCreditStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentBankAccountID, "IX_SOPOrderReturn_PaymentBankAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentMethodID, "IX_SOPOrderReturn_PaymentMethodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentNominalCodeID, "IX_SOPOrderReturn_PaymentNominalCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentTypeID, "IX_SOPOrderReturn_PaymentTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceTypeID, "IX_SOPOrderReturn_SourceTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_SOPOrderReturn_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SOPOrderReturnID, e.DocumentStatusID }, "_dta_index_SOPOrderReturn_18_1035150733__K1_K5_3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPOrderReturnID).ValueGeneratedNever();

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CRMReference)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.DocumentDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ExternalReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentNominalAccountRef)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SettlementDiscPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SourceDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubtotalChargesNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalChargesTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalGoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalGrossValueIncSett).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalTaxValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.AllocatedStatus)
                    .WithMany(p => p.SOPOrderReturnAllocatedStatuses)
                    .HasForeignKey(d => d.AllocatedStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturn_AllocatedStatusID");

                entity.HasOne(d => d.CancelledStatus)
                    .WithMany(p => p.SOPOrderReturnCancelledStatuses)
                    .HasForeignKey(d => d.CancelledStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturn_CancelledStatusID");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.SOPOrderReturns)
                    .HasForeignKey(d => d.CurrencyID)
                    .HasConstraintName("FK_SOPOrderReturn_SYSCurrency");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SOPOrderReturns)
                    .HasForeignKey(d => d.CustomerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturn_SLCustomerAccount");

                entity.HasOne(d => d.CustomerType)
                    .WithMany(p => p.SOPOrderReturns)
                    .HasForeignKey(d => d.CustomerTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturn_CustomerType");

                entity.HasOne(d => d.DespatchReceiptStatus)
                    .WithMany(p => p.SOPOrderReturnDespatchReceiptStatuses)
                    .HasForeignKey(d => d.DespatchReceiptStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturn_DespatchReceiptStatusID");

                entity.HasOne(d => d.DocumentPrintStatus)
                    .WithMany(p => p.SOPOrderReturns)
                    .HasForeignKey(d => d.DocumentPrintStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturn_DocumentPrintStatus");

                entity.HasOne(d => d.DocumentStatus)
                    .WithMany(p => p.SOPOrderReturns)
                    .HasForeignKey(d => d.DocumentStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturn_DocumentStatus");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.SOPOrderReturnDocumentTypes)
                    .HasForeignKey(d => d.DocumentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturn_SOPOrderReturnType1");

                entity.HasOne(d => d.InvoiceCreditStatus)
                    .WithMany(p => p.SOPOrderReturnInvoiceCreditStatuses)
                    .HasForeignKey(d => d.InvoiceCreditStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturn_InvoiceCreditStatusID");

                entity.HasOne(d => d.PaymentBankAccount)
                    .WithMany(p => p.SOPOrderReturns)
                    .HasForeignKey(d => d.PaymentBankAccountID)
                    .HasConstraintName("FK_SOPOrderReturn_CBAccount");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.SOPOrderReturns)
                    .HasForeignKey(d => d.PaymentMethodID)
                    .HasConstraintName("FK_SOPOrderReturn_SOPPaymentMethod");

                entity.HasOne(d => d.PaymentNominalCode)
                    .WithMany(p => p.SOPOrderReturns)
                    .HasForeignKey(d => d.PaymentNominalCodeID)
                    .HasConstraintName("FK_SOPOrderReturn_NLNominalAccount");

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.SOPOrderReturns)
                    .HasForeignKey(d => d.PaymentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturn_PaymentType");

                entity.HasOne(d => d.SourceType)
                    .WithMany(p => p.SOPOrderReturnSourceTypes)
                    .HasForeignKey(d => d.SourceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturn_SOPOrderReturnType");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.SOPOrderReturns)
                    .HasForeignKey(d => d.WarehouseID)
                    .HasConstraintName("FK_SOPOrderReturn_Warehouse");
            });

            modelBuilder.Entity<SOPOrderReturnArch>(entity =>
            {
                entity.HasKey(e => e.SOPOrderReturnID);

                entity.ToTable("SOPOrderReturnArch");

                entity.HasIndex(e => e.AllocatedStatusID, "IX_SOPOrderReturnArch_AllocatedStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CancelledStatusID, "IX_SOPOrderReturnArch_CancelledStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CurrencyID, "IX_SOPOrderReturnArch_CurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CustomerDocumentNo, "IX_SOPOrderReturnArch_CustomerDocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CustomerID, "IX_SOPOrderReturnArch_CustomerID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CustomerTypeID, "IX_SOPOrderReturnArch_CustomerTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DespatchReceiptStatusID, "IX_SOPOrderReturnArch_DespatchReceiptStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentDate, "IX_SOPOrderReturnArch_DocumentDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentNo, "IX_SOPOrderReturnArch_DocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DocumentStatusID, "IX_SOPOrderReturnArch_DocumentStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.DocumentTypeID, e.DocumentNo }, "IX_SOPOrderReturnArch_DocumentTypeID_DocumentNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InvoiceCreditStatusID, "IX_SOPOrderReturnArch_InvoiceCreditStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentBankAccountID, "IX_SOPOrderReturnArch_PaymentBankAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentMethodID, "IX_SOPOrderReturnArch_PaymentMethodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentNominalCodeID, "IX_SOPOrderReturnArch_PaymentNominalCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentTypeID, "IX_SOPOrderReturnArch_PaymentTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceTypeID, "IX_SOPOrderReturnArch_SourceTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_SOPOrderReturnArch_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPOrderReturnID).ValueGeneratedNever();

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CRMReference)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.DocumentDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ExternalReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentNominalAccountRef)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SettlementDiscPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SourceDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubtotalChargesNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalChargesTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalDiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubtotalGoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalGrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalGrossValueIncSett).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalTaxValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.AllocatedStatus)
                    .WithMany(p => p.SOPOrderReturnArchAllocatedStatuses)
                    .HasForeignKey(d => d.AllocatedStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnArch_AllocatedStatusID");

                entity.HasOne(d => d.CancelledStatus)
                    .WithMany(p => p.SOPOrderReturnArchCancelledStatuses)
                    .HasForeignKey(d => d.CancelledStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnArch_CancelledStatusID");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.SOPOrderReturnArches)
                    .HasForeignKey(d => d.CurrencyID)
                    .HasConstraintName("FK_SOPOrderReturnArch_SYSCurrency");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SOPOrderReturnArches)
                    .HasForeignKey(d => d.CustomerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnArch_SLCustomerAccount");

                entity.HasOne(d => d.CustomerType)
                    .WithMany(p => p.SOPOrderReturnArches)
                    .HasForeignKey(d => d.CustomerTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnArch_CustomerType");

                entity.HasOne(d => d.DespatchReceiptStatus)
                    .WithMany(p => p.SOPOrderReturnArchDespatchReceiptStatuses)
                    .HasForeignKey(d => d.DespatchReceiptStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnArch_DespatchReceiptStatusID");

                entity.HasOne(d => d.DocumentStatus)
                    .WithMany(p => p.SOPOrderReturnArches)
                    .HasForeignKey(d => d.DocumentStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnArch_DocumentPrintStatus");

                entity.HasOne(d => d.DocumentStatusNavigation)
                    .WithMany(p => p.SOPOrderReturnArches)
                    .HasForeignKey(d => d.DocumentStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnArch_DocumentStatus");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.SOPOrderReturnArchDocumentTypes)
                    .HasForeignKey(d => d.DocumentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnArch_SOPOrderReturnType");

                entity.HasOne(d => d.InvoiceCreditStatus)
                    .WithMany(p => p.SOPOrderReturnArchInvoiceCreditStatuses)
                    .HasForeignKey(d => d.InvoiceCreditStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnArch_InvoiceCreditStatusID");

                entity.HasOne(d => d.PaymentBankAccount)
                    .WithMany(p => p.SOPOrderReturnArches)
                    .HasForeignKey(d => d.PaymentBankAccountID)
                    .HasConstraintName("FK_SOPOrderReturnArch_CBAccount");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.SOPOrderReturnArches)
                    .HasForeignKey(d => d.PaymentMethodID)
                    .HasConstraintName("FK_SOPOrderReturnArch_SOPPaymentMethod");

                entity.HasOne(d => d.PaymentNominalCode)
                    .WithMany(p => p.SOPOrderReturnArches)
                    .HasForeignKey(d => d.PaymentNominalCodeID)
                    .HasConstraintName("FK_SOPOrderReturnArch_NLNominalAccount");

                entity.HasOne(d => d.PaymentType)
                    .WithMany(p => p.SOPOrderReturnArches)
                    .HasForeignKey(d => d.PaymentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnArch_PaymentType");

                entity.HasOne(d => d.SourceType)
                    .WithMany(p => p.SOPOrderReturnArchSourceTypes)
                    .HasForeignKey(d => d.SourceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnArch_SOPOrderReturnType1");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.SOPOrderReturnArches)
                    .HasForeignKey(d => d.WarehouseID)
                    .HasConstraintName("FK_SOPOrderReturnArch_Warehouse");
            });

            modelBuilder.Entity<SOPOrderReturnDocumentLink>(entity =>
            {
                entity.ToTable("SOPOrderReturnDocumentLink");

                entity.Property(e => e.SOPOrderReturnDocumentLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SourceDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.SOPOrderReturnDocumentLinkDocuments)
                    .HasForeignKey(d => d.DocumentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnDocumentLink_SOPOrderReturn1");

                entity.HasOne(d => d.Source)
                    .WithMany(p => p.SOPOrderReturnDocumentLinkSources)
                    .HasForeignKey(d => d.SourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnDocumentLink_SOPOrderReturn");
            });

            modelBuilder.Entity<SOPOrderReturnLine>(entity =>
            {
                entity.HasKey(e => e.SOPOrderReturnLineID)
                    .IsClustered(false);

                entity.ToTable("SOPOrderReturnLine");

                entity.HasIndex(e => e.BackToBackStatusID, "IX_SOPOrderReturnLine_BackToBackStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.LineTypeID, "IX_SOPOrderReturnLine_LineTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.POPOrderReturnLineID, "IX_SOPOrderReturnLine_POPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PromisedDeliveryDate, "IX_SOPOrderReturnLine_PromisedDeliveryDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnID, "IX_SOPOrderReturnLine_SOPOrderReturnID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemTypeID, "IX_SOPOrderReturnLine_StockItemTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCodeID, "IX_SOPOrderReturnLine_TaxCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPOrderReturnLineID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AvailableForDespatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DespatchNoteComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.IncludeInMRP)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostedInvoiceCreditQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.PricingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PricingUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SellingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellingUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SellingUnitWeight).HasColumnType("decimal(15, 4)");

                entity.Property(e => e.ShowOnCustomerDocs)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockUnitAllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitAvailableForDespatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitDespRcptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitInvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitLineQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StockUnitPostedInvCredQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TEMMessageID).HasDefaultValueSql("((0))");

                entity.Property(e => e.TEMmessageLineNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.TraceAvailForDespatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.UnitDiscountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitSellingPrice).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.BackToBackStatus)
                    .WithMany(p => p.SOPOrderReturnLines)
                    .HasForeignKey(d => d.BackToBackStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLine_BackToBackStatus");

                entity.HasOne(d => d.ConfirmationIntentType)
                    .WithMany(p => p.SOPOrderReturnLines)
                    .HasForeignKey(d => d.ConfirmationIntentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLine_ConfirmationIntentType");

                entity.HasOne(d => d.LineType)
                    .WithMany(p => p.SOPOrderReturnLines)
                    .HasForeignKey(d => d.LineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLine_OrderReturnLineType");

                entity.HasOne(d => d.POPOrderReturnLine)
                    .WithMany(p => p.SOPOrderReturnLines)
                    .HasForeignKey(d => d.POPOrderReturnLineID)
                    .HasConstraintName("FK_SOPOrderReturnLine_POPOrderReturnLine");

                entity.HasOne(d => d.SOPOrderFulfilmentMethod)
                    .WithMany(p => p.SOPOrderReturnLines)
                    .HasForeignKey(d => d.SOPOrderFulfilmentMethodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLine_SOPOrderFulfilmentMethod");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.SOPOrderReturnLines)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLine_SOPOrderReturn");

                entity.HasOne(d => d.ShowOnPickingListType)
                    .WithMany(p => p.SOPOrderReturnLines)
                    .HasForeignKey(d => d.ShowOnPickingListTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLine_ShowOnPickingListType");

                entity.HasOne(d => d.StockItemType)
                    .WithMany(p => p.SOPOrderReturnLines)
                    .HasForeignKey(d => d.StockItemTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLine_StockItemType");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.SOPOrderReturnLines)
                    .HasForeignKey(d => d.TaxCodeID)
                    .HasConstraintName("FK_SOPOrderReturnLine_SYSTaxRate");
            });

            modelBuilder.Entity<SOPOrderReturnLineArch>(entity =>
            {
                entity.HasKey(e => e.SOPOrderReturnLineID);

                entity.ToTable("SOPOrderReturnLineArch");

                entity.HasIndex(e => e.LineTypeID, "IX_SOPOrderReturnLineArch_LineTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PromisedDeliveryDate, "IX_SOPOrderReturnLineArch_PromisedDeliveryDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnID, "IX_SOPOrderReturnLineArch_SOPOrderReturnID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemTypeID, "IX_SOPOrderReturnLineArch_StockItemTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCodeID, "IX_SOPOrderReturnLineArch_TaxCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableTypeID, "IX_SOPOrderReturnLineArch_TraceableTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPOrderReturnLineID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AvailableForDespatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DespatchNoteComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.IncludeInMRP)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostedInvoiceCreditQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.PricingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PricingUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SellingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SellingUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SellingUnitWeight).HasColumnType("decimal(15, 4)");

                entity.Property(e => e.ShowOnCustomerDocs)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockUnitAllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitAvailableForDespatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitDespRcptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitInvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitLineQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitMultiple)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StockUnitPostedInvCredQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TEMMessageID).HasDefaultValueSql("((0))");

                entity.Property(e => e.TEMmessageLineNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.TraceAvailForDespatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.UnitDiscountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitSellingPrice).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.ConfirmationIntentType)
                    .WithMany(p => p.SOPOrderReturnLineArches)
                    .HasForeignKey(d => d.ConfirmationIntentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLineArch_ConfirmationIntentType");

                entity.HasOne(d => d.LineType)
                    .WithMany(p => p.SOPOrderReturnLineArches)
                    .HasForeignKey(d => d.LineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLineArch_OrderReturnLineType");

                entity.HasOne(d => d.SOPOrderFulfilmentMethod)
                    .WithMany(p => p.SOPOrderReturnLineArches)
                    .HasForeignKey(d => d.SOPOrderFulfilmentMethodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLineArch_SOPOrderFulfilmentMethod");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.SOPOrderReturnLineArches)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLineArch_SOPOrderReturnArch");

                entity.HasOne(d => d.ShowOnPickingListType)
                    .WithMany(p => p.SOPOrderReturnLineArches)
                    .HasForeignKey(d => d.ShowOnPickingListTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLineArch_ShowOnPickingListType");

                entity.HasOne(d => d.StockItemType)
                    .WithMany(p => p.SOPOrderReturnLineArches)
                    .HasForeignKey(d => d.StockItemTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLineArch_StockItemType");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.SOPOrderReturnLineArches)
                    .HasForeignKey(d => d.TaxCodeID)
                    .HasConstraintName("FK_SOPOrderReturnLineArch_SYSTaxRate");

                entity.HasOne(d => d.TraceableType)
                    .WithMany(p => p.SOPOrderReturnLineArches)
                    .HasForeignKey(d => d.TraceableTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPOrderReturnLineArch_TraceableType");
            });

            modelBuilder.Entity<SOPOrderReturnLineX>(entity =>
            {
                entity.ToTable("SOPOrderReturnLineX");

                entity.Property(e => e.SOPOrderReturnLineXID).ValueGeneratedNever();

                entity.HasOne(d => d.SOPOrderReturnLineXNavigation)
                    .WithOne(p => p.SOPOrderReturnLineX)
                    .HasForeignKey<SOPOrderReturnLineX>(d => d.SOPOrderReturnLineXID)
                    .HasConstraintName("FK_SOPOrderReturnLineX_SOPOrderReturnLine");
            });

            modelBuilder.Entity<SOPOrderReturnType>(entity =>
            {
                entity.ToTable("SOPOrderReturnType");

                entity.Property(e => e.SOPOrderReturnTypeID).ValueGeneratedNever();

                entity.Property(e => e.SOPOrderReturnTypeName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPOrderReturnX>(entity =>
            {
                entity.ToTable("SOPOrderReturnX");

                entity.Property(e => e.SOPOrderReturnXID).ValueGeneratedNever();

                entity.Property(e => e.QuoteNotes)
                    .IsRequired()
                    .HasMaxLength(262)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.SOPOrderReturnXNavigation)
                    .WithOne(p => p.SOPOrderReturnX)
                    .HasForeignKey<SOPOrderReturnX>(d => d.SOPOrderReturnXID)
                    .HasConstraintName("FK_SOPOrderReturnX_SOPOrderReturn");
            });

            modelBuilder.Entity<SOPOrderView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPOrderView");

                entity.Property(e => e.mmssoo_AddressCity)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_AddressCounty)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_AddressLine1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_AddressLine2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_AddressLine3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_AddressLine4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_CustomerAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_CustomerAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_DelAddressCity)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_DelAddressCounty)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_DelAddressLine1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_DelAddressLine2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_DelAddressLine3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_DelAddressLine4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_DelPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_DelPostalName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.mmssoo_EarlySettlementDiscount)
                    .HasMaxLength(82)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_OrderDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoo_PostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPOrdersCurrentValuesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPOrdersCurrentValuesView");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SumGross).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Symbol)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.ValueOfCurrentOrdersInSOP).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<SOPOrdersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPOrdersView");

                entity.Property(e => e.mmssoos_CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoos_CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoos_DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoos_DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.mmssoos_ExternalReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoos_OrderDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoos_PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.mmssoos_RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.mmssoos_SourceDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoos_Status)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SOPPartialAllocationType>(entity =>
            {
                entity.ToTable("SOPPartialAllocationType");

                entity.Property(e => e.SOPPartialAllocationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPPayment>(entity =>
            {
                entity.ToTable("SOPPayment");

                entity.HasIndex(e => e.PaymentInvoiceStatusID, "IX_PaymentInvoiceStatusID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPPaymentID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.PaymentInvoiceStatus)
                    .WithMany(p => p.SOPPayments)
                    .HasForeignKey(d => d.PaymentInvoiceStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPayment_PaymentInvoiceStatus");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.SOPPayments)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPayment_SOPOrderReturn");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.SOPPayments)
                    .HasForeignKey(d => d.TaxCodeID)
                    .HasConstraintName("FK_SOPPayment_SYSTaxRate");
            });

            modelBuilder.Entity<SOPPaymentArch>(entity =>
            {
                entity.HasKey(e => e.SOPPaymentID);

                entity.ToTable("SOPPaymentArch");

                entity.HasIndex(e => e.PaymentInvoiceStatusID, "IX_PaymentInvoiceStatusID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPPaymentID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.PaymentInvoiceStatus)
                    .WithMany(p => p.SOPPaymentArches)
                    .HasForeignKey(d => d.PaymentInvoiceStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPaymentArch_PaymentInvoiceStatus");

                entity.HasOne(d => d.SOPOrderReturn)
                    .WithMany(p => p.SOPPaymentArches)
                    .HasForeignKey(d => d.SOPOrderReturnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPaymentArch_SOPOrderReturnArch");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.SOPPaymentArches)
                    .HasForeignKey(d => d.TaxCodeID)
                    .HasConstraintName("FK_SOPPaymentArch_SYSTaxRate");
            });

            modelBuilder.Entity<SOPPaymentInvCredLine>(entity =>
            {
                entity.ToTable("SOPPaymentInvCredLine");

                entity.HasIndex(e => new { e.SOPInvoiceCreditLineID, e.SOPPaymentID }, "IX_SOPInvoiceCreditLineID_SOPPaymentID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPPaymentInvCredLineID).ValueGeneratedNever();

                entity.HasOne(d => d.PaymentInvCredLineType)
                    .WithMany(p => p.SOPPaymentInvCredLines)
                    .HasForeignKey(d => d.PaymentInvCredLineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPaymentInvCredLine_PaymentInvCredLineType");

                entity.HasOne(d => d.SOPInvoiceCreditLine)
                    .WithMany(p => p.SOPPaymentInvCredLines)
                    .HasForeignKey(d => d.SOPInvoiceCreditLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPaymentInvCredLine_SOPInvoiceCreditLine");

                entity.HasOne(d => d.SOPPayment)
                    .WithMany(p => p.SOPPaymentInvCredLines)
                    .HasForeignKey(d => d.SOPPaymentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPaymentInvCredLine_SOPPayment");
            });

            modelBuilder.Entity<SOPPaymentInvCredLineArch>(entity =>
            {
                entity.HasKey(e => e.SOPPaymentInvCredLineID);

                entity.ToTable("SOPPaymentInvCredLineArch");

                entity.HasIndex(e => new { e.SOPInvoiceCreditLineID, e.SOPPaymentID }, "IX_SOPInvoiceCreditLineID_SOPPaymentID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPPaymentInvCredLineID).ValueGeneratedNever();

                entity.HasOne(d => d.PaymentInvCredLineType)
                    .WithMany(p => p.SOPPaymentInvCredLineArches)
                    .HasForeignKey(d => d.PaymentInvCredLineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPaymentInvCredLineArch_PaymentInvCredLineType");

                entity.HasOne(d => d.SOPInvoiceCreditLine)
                    .WithMany(p => p.SOPPaymentInvCredLineArches)
                    .HasForeignKey(d => d.SOPInvoiceCreditLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPaymentInvCredLineArch_SOPInvCreditLineArch");

                entity.HasOne(d => d.SOPPayment)
                    .WithMany(p => p.SOPPaymentInvCredLineArches)
                    .HasForeignKey(d => d.SOPPaymentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPaymentInvCredLineArch_SOPPaymentArch");
            });

            modelBuilder.Entity<SOPPaymentMethod>(entity =>
            {
                entity.ToTable("SOPPaymentMethod");

                entity.HasIndex(e => e.Name, "IX_PaymentMethod_Name")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CurrencyID, "IX_SOPPaymentMethod_CurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentBankAccountID, "IX_SOPPaymentMethod_PaymentBankAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PaymentNominalCodeID, "IX_SOPPaymentMethod_PaymentNominalCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPPaymentMethodID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentNominalAccountRef)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.SOPPaymentMethods)
                    .HasForeignKey(d => d.CurrencyID)
                    .HasConstraintName("FK_SOPPaymentMethod_SYSCurrency");

                entity.HasOne(d => d.PaymentBankAccount)
                    .WithMany(p => p.SOPPaymentMethods)
                    .HasForeignKey(d => d.PaymentBankAccountID)
                    .HasConstraintName("FK_SOPPaymentMethod_CBAccount");

                entity.HasOne(d => d.PaymentNominalCode)
                    .WithMany(p => p.SOPPaymentMethods)
                    .HasForeignKey(d => d.PaymentNominalCodeID)
                    .HasConstraintName("FK_SOPPaymentMethod_NLNominalAccount");
            });

            modelBuilder.Entity<SOPPreReceiptAlloc>(entity =>
            {
                entity.ToTable("SOPPreReceiptAlloc");

                entity.HasIndex(e => e.SOPAllocationLineID, "IX_SOPPreReceiptAlloc_SOPAllocationLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_SOPPreReceiptAlloc_StockItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseItemID, "IX_SOPPreReceiptAlloc_WarehouseItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPPreReceiptAllocID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDate).HasColumnType("datetime");

                entity.HasOne(d => d.SOPAllocationLine)
                    .WithMany(p => p.SOPPreReceiptAllocs)
                    .HasForeignKey(d => d.SOPAllocationLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPreReceiptAlloc_SOPAllocationLine");

                entity.HasOne(d => d.StockItem)
                    .WithMany(p => p.SOPPreReceiptAllocs)
                    .HasForeignKey(d => d.StockItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPreReceiptAlloc_StockItem");

                entity.HasOne(d => d.WarehouseItem)
                    .WithMany(p => p.SOPPreReceiptAllocs)
                    .HasForeignKey(d => d.WarehouseItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPreReceiptAlloc_WarehouseItem");
            });

            modelBuilder.Entity<SOPPreferredItem>(entity =>
            {
                entity.HasKey(e => e.SOPPreferredItemID)
                    .IsClustered(false);

                entity.ToTable("SOPPreferredItem");

                entity.HasIndex(e => e.SLCustomerAccountID, "IX_SOPPreferredItem_SLCustomerAccountID")
                    .IsClustered();

                entity.Property(e => e.SOPPreferredItemID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SOPPreferredItems)
                    .HasForeignKey(d => d.ItemID)
                    .HasConstraintName("FK_SOPPreferredItem_ItemID");

                entity.HasOne(d => d.LineType)
                    .WithMany(p => p.SOPPreferredItems)
                    .HasForeignKey(d => d.LineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPreferredItem_LineTypeID");

                entity.HasOne(d => d.SLCustomerAccount)
                    .WithMany(p => p.SOPPreferredItems)
                    .HasForeignKey(d => d.SLCustomerAccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPPreferredItem_SLCustomerAccountID");
            });

            modelBuilder.Entity<SOPPrintEUZeroRatedSalesOption>(entity =>
            {
                entity.ToTable("SOPPrintEUZeroRatedSalesOption");

                entity.Property(e => e.SOPPrintEUZeroRatedSalesOptionID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPProductsPurchasedView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPProductsPurchasedView");

                entity.Property(e => e.mmssopp_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmssopp_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssopp_PostedDate).HasColumnType("datetime");

                entity.Property(e => e.mmssopp_SourceAreaReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssopp_StockItemID)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmssopp_StockItemStatusName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmssopp_TransactionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SOPProformaNumber>(entity =>
            {
                entity.ToTable("SOPProformaNumber");

                entity.Property(e => e.SOPProformaNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<SOPProspectQuoteSettingView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPProspectQuoteSettingView");
            });

            modelBuilder.Entity<SOPQuotationLinesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPQuotationLinesView");

                entity.Property(e => e.mmssoql_DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoql_ItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmssoql_ItemDescription)
                    .IsRequired()
                    .HasColumnType("text");
            });

            modelBuilder.Entity<SOPQuotationView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPQuotationView");

                entity.Property(e => e.mmssoq_AddressCity)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_AddressCounty)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_AddressLine1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_AddressLine2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_AddressLine3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_AddressLine4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_CashAcctAddress1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_CashAcctAddress2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_CashAcctAddress3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_CashAcctAddress4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_CashAcctAddressCity)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_CashAcctAddressCounty)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_CashAcctPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_CashAcctPostalName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_CustomerAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_CustomerAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_DelAddressCity)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_DelAddressCounty)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_DelAddressLine1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_DelAddressLine2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_DelAddressLine3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_DelAddressLine4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_DelPostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_DelPostalName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.mmssoq_EarlySettlementDiscount)
                    .HasMaxLength(82)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_PostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoq_QuoteDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPQuotationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SOPQuotationsView");

                entity.Property(e => e.mmssoqs_CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoqs_CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoqs_DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoqs_DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.mmssoqs_ExternalReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoqs_PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.mmssoqs_QuoteDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoqs_RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.mmssoqs_SourceDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.mmssoqs_Status)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SOPQuoteNumber>(entity =>
            {
                entity.ToTable("SOPQuoteNumber");

                entity.Property(e => e.SOPQuoteNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<SOPRCInvoiceOption>(entity =>
            {
                entity.ToTable("SOPRCInvoiceOption");

                entity.Property(e => e.SOPRCInvoiceOptionID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPRepeatOrderSchedule>(entity =>
            {
                entity.ToTable("SOPRepeatOrderSchedule");

                entity.HasIndex(e => e.FrequencyTimeUnitID, "IX_SOPRepeatOrderSchedule_FrequencyTimeUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderTemplateID, "IX_SOPRepeatOrderSchedule_SOPOrderTemplateID")
                    .IsUnique();

                entity.HasIndex(e => e.SOPRepeatOrderTypeID, "IX_SOPRepeatOrderSchedule_SOPRepeatOrderTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPRepeatOrderScheduleID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FrequencyValue).HasDefaultValueSql("((1))");

                entity.Property(e => e.LastGeneratedDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.FrequencyTimeUnit)
                    .WithMany(p => p.SOPRepeatOrderSchedules)
                    .HasForeignKey(d => d.FrequencyTimeUnitID)
                    .HasConstraintName("FK_SOPRepeatOrderTemplate_TimeUnit");

                entity.HasOne(d => d.SOPOrderTemplate)
                    .WithOne(p => p.SOPRepeatOrderSchedule)
                    .HasForeignKey<SOPRepeatOrderSchedule>(d => d.SOPOrderTemplateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPRepeatOrderSchedule_SOPOrderReturn");

                entity.HasOne(d => d.SOPRepeatOrderType)
                    .WithMany(p => p.SOPRepeatOrderSchedules)
                    .HasForeignKey(d => d.SOPRepeatOrderTypeID)
                    .HasConstraintName("FK_SOPRepeatOrderSchedule_SOPRepeatOrderType");
            });

            modelBuilder.Entity<SOPRepeatOrderType>(entity =>
            {
                entity.ToTable("SOPRepeatOrderType");

                entity.Property(e => e.SOPRepeatOrderTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SOPReturnNumber>(entity =>
            {
                entity.ToTable("SOPReturnNumber");

                entity.Property(e => e.SOPReturnNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<SOPSetting>(entity =>
            {
                entity.ToTable("SOPSetting");

                entity.HasIndex(e => e.CashOrderAccountID, "IX_SOPSetting_CashOrderAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ModeOfTransportID, "IX_SOPSetting_ModeOfTransportID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NatureOfTransCodeID, "IX_SOPSetting_NatureOfTransCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TermsOfDeliveryID, "IX_SOPSetting_TermsOfDeliveryID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPSettingID).ValueGeneratedNever();

                entity.Property(e => e.AllocateStkOnOrderEntry)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ArchiveLastPurgedUpTo).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FullyPaidInvoiceText)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IntrastatDateTypeID).HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoicingLastDeletedUpTo).HasColumnType("datetime");

                entity.Property(e => e.LastArchiveRunBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastArchiveRunOn).HasColumnType("datetime");

                entity.Property(e => e.LastInvoicingDeleteRunBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastInvoicingDeleteRunOn).HasColumnType("datetime");

                entity.Property(e => e.LastProveBalancesRunBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastProveBalancesRunOn).HasColumnType("datetime");

                entity.Property(e => e.LastPurgeArchiveRunBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastPurgeArchiveRunOn).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrdRtnsLastArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.SOPCreditCISRCTextID).HasDefaultValueSql("((1))");

                entity.Property(e => e.SOPInvoiceCISRCTextID).HasDefaultValueSql("((1))");

                entity.Property(e => e.TaxDiscountInvoiceText)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateStockOnDespatch)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.CashOrderAccount)
                    .WithMany(p => p.SOPSettingCashOrderAccounts)
                    .HasForeignKey(d => d.CashOrderAccountID)
                    .HasConstraintName("FK_SOPSetting_SLCustomerAccount");

                entity.HasOne(d => d.DefaultFreeTextConfirmIntentNavigation)
                    .WithMany(p => p.SOPSettingDefaultFreeTextConfirmIntentNavigations)
                    .HasForeignKey(d => d.DefaultFreeTextConfirmIntent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPSetting_ConfirmationIntentType");

                entity.HasOne(d => d.DefaultServLabConfirmIntentNavigation)
                    .WithMany(p => p.SOPSettingDefaultServLabConfirmIntentNavigations)
                    .HasForeignKey(d => d.DefaultServLabConfirmIntent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPSetting_ConfirmationIntentType1");

                entity.HasOne(d => d.IntrastatDateType)
                    .WithMany(p => p.SOPSettings)
                    .HasForeignKey(d => d.IntrastatDateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPSetting_IntrastatDateType");

                entity.HasOne(d => d.ModeOfTransport)
                    .WithMany(p => p.SOPSettings)
                    .HasForeignKey(d => d.ModeOfTransportID)
                    .HasConstraintName("FK_SOPSetting_ModeOfTransport");

                entity.HasOne(d => d.NatureOfTransCode)
                    .WithMany(p => p.SOPSettings)
                    .HasForeignKey(d => d.NatureOfTransCodeID)
                    .HasConstraintName("FK_SOPSetting_NatureOfTransCode");

                entity.HasOne(d => d.ProspectQuoteAccount)
                    .WithMany(p => p.SOPSettingProspectQuoteAccounts)
                    .HasForeignKey(d => d.ProspectQuoteAccountID)
                    .HasConstraintName("FK_SOPSetting_ProspectQuoteAccount");

                entity.HasOne(d => d.SOPCreditCISRCText)
                    .WithMany(p => p.SOPSettings)
                    .HasForeignKey(d => d.SOPCreditCISRCTextID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPSetting_SOPCreditCISRCTextID");

                entity.HasOne(d => d.SOPInvoiceCISRCText)
                    .WithMany(p => p.SOPSettings)
                    .HasForeignKey(d => d.SOPInvoiceCISRCTextID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPSetting_SOPInvoiceCISRCTextID");

                entity.HasOne(d => d.SOPPartialAllocationType)
                    .WithMany(p => p.SOPSettings)
                    .HasForeignKey(d => d.SOPPartialAllocationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPSetting_SOPPartialAllocationType");

                entity.HasOne(d => d.SOPPrintEUZeroRatedSalesOption)
                    .WithMany(p => p.SOPSettings)
                    .HasForeignKey(d => d.SOPPrintEUZeroRatedSalesOptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPSetting_SOPPrintEUZeroRatedSalesOptionID");

                entity.HasOne(d => d.SOPRCInvoiceOption)
                    .WithMany(p => p.SOPSettings)
                    .HasForeignKey(d => d.SOPRCInvoiceOptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPSetting_SOPRCInvoiceOptionID");

                entity.HasOne(d => d.TermsOfDelivery)
                    .WithMany(p => p.SOPSettings)
                    .HasForeignKey(d => d.TermsOfDeliveryID)
                    .HasConstraintName("FK_SOPSetting_TermsOfDelivery");
            });

            modelBuilder.Entity<SOPStandardItemLink>(entity =>
            {
                entity.ToTable("SOPStandardItemLink");

                entity.HasIndex(e => e.ItemID, "IX_SOPStandardItemLink_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnLineID, "IX_SOPStandardItemLink_SOPOrderReturnLineID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SellingPriceUnitID, "IX_SOPStandardItemLink_SellingPriceUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SellingUnitID, "IX_SOPStandardItemLink_SellingUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseItemID, "IX_SOPStandardItemLink_WarehouseItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPStandardItemLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SOPStandardItemLinks)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPStandardItemLink_StockItem");

                entity.HasOne(d => d.SOPOrderReturnLine)
                    .WithOne(p => p.SOPStandardItemLink)
                    .HasForeignKey<SOPStandardItemLink>(d => d.SOPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPStandardItemLink_SOPOrderReturnLine");

                entity.HasOne(d => d.SellingPriceUnit)
                    .WithMany(p => p.SOPStandardItemLinkSellingPriceUnits)
                    .HasForeignKey(d => d.SellingPriceUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPStandardItemLink_StockItemUnit1");

                entity.HasOne(d => d.SellingUnit)
                    .WithMany(p => p.SOPStandardItemLinkSellingUnits)
                    .HasForeignKey(d => d.SellingUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPStandardItemLink_StockItemUnit");

                entity.HasOne(d => d.WarehouseItem)
                    .WithMany(p => p.SOPStandardItemLinks)
                    .HasForeignKey(d => d.WarehouseItemID)
                    .HasConstraintName("FK_SOPStandardItemLink_WarehouseItem");
            });

            modelBuilder.Entity<SOPStandardItemLinkArch>(entity =>
            {
                entity.HasKey(e => e.SOPStandardItemLinkID);

                entity.ToTable("SOPStandardItemLinkArch");

                entity.HasIndex(e => e.ItemID, "IX_SOPStandardItemLinkArch_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderReturnLineID, "IX_SOPStandardItemLinkArch_SOPOrderReturnLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SellingPriceUnitID, "IX_SOPStandardItemLinkArch_SellingPriceUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SellingUnitID, "IX_SOPStandardItemLinkArch_SellingUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseItemID, "IX_SOPStandardItemLinkArch_WarehouseItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPStandardItemLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SOPStandardItemLinkArches)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPStandardItemLinkArch_StockItem");

                entity.HasOne(d => d.SOPOrderReturnLine)
                    .WithMany(p => p.SOPStandardItemLinkArches)
                    .HasForeignKey(d => d.SOPOrderReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPStandardItemLinkArch_SOPOrderReturnLineArch");

                entity.HasOne(d => d.SellingPriceUnit)
                    .WithMany(p => p.SOPStandardItemLinkArchSellingPriceUnits)
                    .HasForeignKey(d => d.SellingPriceUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPStandardItemLinkArch_StockItemUnit1");

                entity.HasOne(d => d.SellingUnit)
                    .WithMany(p => p.SOPStandardItemLinkArchSellingUnits)
                    .HasForeignKey(d => d.SellingUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPStandardItemLinkArch_StockItemUnit");

                entity.HasOne(d => d.WarehouseItem)
                    .WithMany(p => p.SOPStandardItemLinkArches)
                    .HasForeignKey(d => d.WarehouseItemID)
                    .HasConstraintName("FK_SOPStandardItemLinkArch_WarehouseItem");
            });

            modelBuilder.Entity<SOPTemplateNumber>(entity =>
            {
                entity.ToTable("SOPTemplateNumber");

                entity.Property(e => e.SOPTemplateNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<SOPUser>(entity =>
            {
                entity.ToTable("SOPUser");

                entity.HasIndex(e => e.UserNumber, "IX_SOPUser")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPUserID).ValueGeneratedNever();
            });

            modelBuilder.Entity<SOPUserPermission>(entity =>
            {
                entity.ToTable("SOPUserPermission");

                entity.HasIndex(e => e.SOPUserID, "IX_SOPUserPermission_SOPUserID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SOPUserPermissionID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SOPUser)
                    .WithOne(p => p.SOPUserPermission)
                    .HasForeignKey<SOPUserPermission>(d => d.SOPUserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SOPUserPermission_SOPUser");
            });

            modelBuilder.Entity<STItemAlternativesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STItemAlternativesView");

                entity.Property(e => e.mmssta_AlternativeItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmssta_AlternativeItemName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssta_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmssta_Preferred)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STItemDetailsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STItemDetailsView");

                entity.Property(e => e.mmsstd_StockItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmsstd_StockItemCostingMethodName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmsstd_StockItemDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.mmsstd_StockItemGroupDescription)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.mmsstd_StockItemName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmsstd_StockItemTaxRateName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmsstd_StockUnitName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<STItemLocationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STItemLocationsView");

                entity.Property(e => e.mmsstl_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmsstl_WarehouseDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.mmsstl_WarehouseName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<STItemSuppliersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STItemSuppliersView");

                entity.Property(e => e.mmssts_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.mmssts_LeadTime)
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.mmssts_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssts_Preferred)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.mmssts_SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.mmssts_SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STKAutoGenerateOptionType>(entity =>
            {
                entity.ToTable("STKAutoGenerateOptionType");

                entity.Property(e => e.STKAutoGenerateOptionTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STKAutoGenerateSeparator>(entity =>
            {
                entity.ToTable("STKAutoGenerateSeparator");

                entity.Property(e => e.STKAutoGenerateSeparatorID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SeparatorCharacter)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STKBinItemPrimaryAllocationPriorityView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STKBinItemPrimaryAllocationPriorityView");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateOfLastStockCount).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.LastCostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OpeningBalanceDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocatedBOM).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedSOP).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UnconfirmedQtyInStock).HasColumnType("decimal(15, 5)");
            });

            modelBuilder.Entity<STKCountSheetItemView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STKCountSheetItemView");
            });

            modelBuilder.Entity<STKDiscrepancyStatus>(entity =>
            {
                entity.ToTable("STKDiscrepancyStatus");

                entity.Property(e => e.STKDiscrepancyStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STKFulfilmentSequenceType>(entity =>
            {
                entity.ToTable("STKFulfilmentSequenceType");

                entity.Property(e => e.STKFulfilmentSequenceTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STKItemsNotLinkedToPriceBandView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STKItemsNotLinkedToPriceBandView");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STKLabelPrintingOptionType>(entity =>
            {
                entity.ToTable("STKLabelPrintingOptionType");

                entity.Property(e => e.STKLabelPrintingOptionTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STKProductStockItemSupplierView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STKProductStockItemSupplierView");

                entity.Property(e => e.StockLandedCostsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SupplierLandedCostsValue).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<STKShelfLifeType>(entity =>
            {
                entity.ToTable("STKShelfLifeType");

                entity.Property(e => e.STKShelfLifeTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STKStockItemBalancesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STKStockItemBalancesView");

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaximumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ProductGroupCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroupDescription)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectedAvailableStock).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.QuantityAllocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.QuantityInStock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.QuantityOnOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityUnallocatedLiveSOP).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockItemName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseDescription)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STKStockItemView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STKStockItemView");

                entity.Property(e => e.ActualQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AutoGeneratePrefix)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BaseUnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommodityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedQuantityInStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateOfLastSale).HasColumnType("datetime");

                entity.Property(e => e.DateOfLastStockCount).HasColumnType("datetime");

                entity.Property(e => e.DefaultDespatchNoteComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultPickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.FreeStockQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.InactiveDate).HasColumnType("datetime");

                entity.Property(e => e.LandedCostsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.LastTraceArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProductGroupCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroupDescription)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityAllocatedBOM).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QuantityAllocatedSOP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QuantityAllocatedStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SOPItemPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SellingPrice).HasColumnType("decimal(38, 7)");

                entity.Property(e => e.StandardCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StdCostVarianceLastReset).HasColumnType("datetime");

                entity.Property(e => e.StockMultOfBaseUnit).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UnconfirmedQuantityInStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Weight).HasColumnType("decimal(15, 4)");
            });

            modelBuilder.Entity<STKStockTakeItemView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STKStockTakeItemView");

                entity.Property(e => e.BIDateOfLastStockCount).HasColumnType("datetime");

                entity.Property(e => e.WIDateOfLastStockCount).HasColumnType("datetime");
            });

            modelBuilder.Entity<STKStocktakeCriteriaTemplate>(entity =>
            {
                entity.ToTable("STKStocktakeCriteriaTemplate");

                entity.HasIndex(e => e.CriteriaName, "IX_STKStocktakeCriteriaTemplate_CriteriaName")
                    .IsUnique();

                entity.Property(e => e.STKStocktakeCriteriaTemplateID).ValueGeneratedNever();

                entity.Property(e => e.Criteria)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CriteriaName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<STKTraceItemBatchAttribute>(entity =>
            {
                entity.ToTable("STKTraceItemBatchAttribute");

                entity.HasIndex(e => e.TraceableItemID, "IX_STKTraceItemBatchAttribute_TraceableItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.STKTraceItemBatchAttributeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.TraceableItem)
                    .WithMany(p => p.STKTraceItemBatchAttributes)
                    .HasForeignKey(d => d.TraceableItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_STKTraceItemBatchAttribute_TraceableItem");
            });

            modelBuilder.Entity<STKWorkspaceStockItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STKWorkspaceStockItem");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BOMDetails)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommodityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CostingMethod)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOfOrigin)
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.FreeStockQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.InactiveDate).HasColumnType("datetime");

                entity.Property(e => e.LabelPrintingOption)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LandedCosts)
                    .HasMaxLength(53)
                    .IsUnicode(false);

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroupCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroupName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QtyBoughtLastPeriod).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QtyBoughtThisPeriod).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QtySoldLastPeriod).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QtySoldThisPeriod).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocated).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.QuantityInStock).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.SalesPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StandardCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockItemStatusName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StockItemType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SupplementaryUnitConversionRatio).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(93)
                    .IsUnicode(false);

                entity.Property(e => e.TraceableType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ValBoughtLastPeriod).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValBoughtThisPeriod).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValSoldLastPeriod).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValSoldThisPeriod).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Weight).HasColumnType("decimal(15, 4)");
            });

            modelBuilder.Entity<STPricesForStockItemView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("STPricesForStockItemView");

                entity.Property(e => e.mmsstp_CurrencyName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mmsstp_CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.mmsstp_Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.mmsstp_Price).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.mmsstp_PriceBandName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SYSAccountMemoType>(entity =>
            {
                entity.ToTable("SYSAccountMemoType");

                entity.Property(e => e.SYSAccountMemoTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSAccountStatus>(entity =>
            {
                entity.ToTable("SYSAccountStatus");

                entity.Property(e => e.SYSAccountStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSAccountType>(entity =>
            {
                entity.ToTable("SYSAccountType");

                entity.Property(e => e.SYSAccountTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSAccountingModulePermiss>(entity =>
            {
                entity.ToTable("SYSAccountingModulePermiss");

                entity.HasIndex(e => new { e.SYSAccountingPeriodPermissID, e.SYSModuleID }, "IX_SYSAccountingModulePermission")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSAccountingPeriodPermissID, "IX_SYSAccountingModulePermission_SYSAccountingPeriodPermissionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSModuleID, "IX_SYSAccountingModulePermission_SYSModuleID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSAccountingModulePermissID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSAccountingPeriodPermiss)
                    .WithMany(p => p.SYSAccountingModulePermisses)
                    .HasForeignKey(d => d.SYSAccountingPeriodPermissID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSAccountingModulePermission_SYSAccountingPeriodPermission");

                entity.HasOne(d => d.SYSModule)
                    .WithMany(p => p.SYSAccountingModulePermisses)
                    .HasForeignKey(d => d.SYSModuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSAccountingModulePermission_SYSModule");
            });

            modelBuilder.Entity<SYSAccountingPeriod>(entity =>
            {
                entity.HasKey(e => e.SYSAccountingPeriodID)
                    .IsClustered(false);

                entity.ToTable("SYSAccountingPeriod");

                entity.HasIndex(e => e.PeriodNumber, "IX_SYSAccountingPeriod_PeriodNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.PeriodNumber, e.SYSAccountingPeriodID }, "IX_SYSAccountingPeriod_PeriodNumber_SYSAccountingPeriodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSFinancialYearID, "IX_SYSAccountingPeriod_SYSFinancialYearID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSAccountingPeriodID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.SYSFinancialYear)
                    .WithMany(p => p.SYSAccountingPeriods)
                    .HasForeignKey(d => d.SYSFinancialYearID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSAccountingPeriod_SYSFinancialYear");
            });

            modelBuilder.Entity<SYSAccountingPeriodPermiss>(entity =>
            {
                entity.HasKey(e => e.SYSAccountingPeriodPermissID)
                    .HasName("PK_SYSAccountingPeriodPermission")
                    .IsClustered(false);

                entity.ToTable("SYSAccountingPeriodPermiss");

                entity.HasIndex(e => e.SYSAccountingPeriodPermissID, "IX_SYSAccountingPeriodPermission_UserID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSAccountingPeriodPermissID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSAccountingPeriodValidation>(entity =>
            {
                entity.ToTable("SYSAccountingPeriodValidation");

                entity.Property(e => e.SYSAccountingPeriodValidationID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSActiveLock>(entity =>
            {
                entity.HasKey(e => e.SYSActiveLockID)
                    .IsClustered(false);

                entity.ToTable("SYSActiveLock");

                entity.HasIndex(e => e.ProcessID, "IX_ProcessID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OptionName, "IX_SYSActiveLock_OptionName")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SYSUserLoginID, e.ProcessID }, "IX_SYSActiveLock_ProcessID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSActiveLockID).ValueGeneratedNever();

                entity.Property(e => e.Data)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OptionName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.TimeCreated).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Workstation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSUserLogin)
                    .WithMany(p => p.SYSActiveLocks)
                    .HasForeignKey(d => d.SYSUserLoginID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSActiveLock_SYSUserLogin");
            });

            modelBuilder.Entity<SYSAddressContactUse>(entity =>
            {
                entity.ToTable("SYSAddressContactUse");

                entity.Property(e => e.SYSAddressContactUseID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSAgeingPeriod>(entity =>
            {
                entity.ToTable("SYSAgeingPeriod");

                entity.Property(e => e.SYSAgeingPeriodID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSAuditLogDetail>(entity =>
            {
                entity.ToTable("SYSAuditLogDetail");

                entity.Property(e => e.SYSAuditLogDetailID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FriendlyName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSAuditLogHeader)
                    .WithMany(p => p.SYSAuditLogDetails)
                    .HasForeignKey(d => d.SYSAuditLogHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSAuditLogDetail_SYSAuditLogHeaderID");
            });

            modelBuilder.Entity<SYSAuditLogHeader>(entity =>
            {
                entity.ToTable("SYSAuditLogHeader");

                entity.Property(e => e.SYSAuditLogHeaderID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ParentName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSAuditLogOperation)
                    .WithMany(p => p.SYSAuditLogHeaders)
                    .HasForeignKey(d => d.SYSAuditLogOperationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSAuditLogHeader_SYSAuditLogOperationID");

                entity.HasOne(d => d.SYSAuditLogType)
                    .WithMany(p => p.SYSAuditLogHeaders)
                    .HasForeignKey(d => d.SYSAuditLogTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSAuditLogHeader_SYSAuditLogTypeID");
            });

            modelBuilder.Entity<SYSAuditLogOperation>(entity =>
            {
                entity.ToTable("SYSAuditLogOperation");

                entity.Property(e => e.SYSAuditLogOperationID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSAuditLogType>(entity =>
            {
                entity.ToTable("SYSAuditLogType");

                entity.Property(e => e.SYSAuditLogTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSAuditSetting>(entity =>
            {
                entity.ToTable("SYSAuditSetting");

                entity.Property(e => e.SYSAuditSettingID).ValueGeneratedNever();

                entity.Property(e => e.DatePurgeLastRun).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastPurgedUpTo).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PurgeUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSAuditTrail>(entity =>
            {
                entity.HasKey(e => e.SYSAuditTrailID)
                    .IsClustered(false);

                entity.ToTable("SYSAuditTrail");

                entity.HasIndex(e => new { e.SYSAuditTrailID, e.UniqueReferenceNumber, e.SYSAuditTrailEntryTypeID }, "IX_SYSAuditTrail_AuditTrailView")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSAuditTrailEntryTypeID, "IX_SYSAuditTrail_SYSAuditTrailEntryTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_SYSAuditTrail_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSAuditTrailID).ValueGeneratedNever();

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AlreadyPrinted)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BatchReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GrossValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NetValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionToBaseExchangeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSAuditTrailEntryType)
                    .WithMany(p => p.SYSAuditTrails)
                    .HasForeignKey(d => d.SYSAuditTrailEntryTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSAuditTrail_SYSAuditTrailEntryType");
            });

            modelBuilder.Entity<SYSAuditTrailEntryType>(entity =>
            {
                entity.ToTable("SYSAuditTrailEntryType");

                entity.Property(e => e.SYSAuditTrailEntryTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSCompany>(entity =>
            {
                entity.ToTable("SYSCompany");

                entity.Property(e => e.SYSCompanyID).ValueGeneratedNever();

                entity.Property(e => e.BankCloudCompanyID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EORINumber)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentCloudCompanyID)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SagePaymentsDatasetIdentifier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SagePaymentsLastSyncDateTime).HasColumnType("datetime");

                entity.Property(e => e.SagePaymentsTag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRegistrationNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.EDULocalEducationAuthority)
                    .WithMany(p => p.SYSCompanies)
                    .HasForeignKey(d => d.EDULocalEducationAuthorityID)
                    .HasConstraintName("FK_SYSCompany_EDULocalEducationAuthority");

                entity.HasOne(d => d.EDUSchoolType)
                    .WithMany(p => p.SYSCompanies)
                    .HasForeignKey(d => d.EDUSchoolTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSCompany_EDUSchoolType");
            });

            modelBuilder.Entity<SYSCompanyContact>(entity =>
            {
                entity.ToTable("SYSCompanyContact");

                entity.HasIndex(e => e.SYSAddressContactUseID, "IX_SYSCompanyContact_SYSAddressContactUseID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSContactTypeID, "IX_SYSCompanyContact_SYSContactTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSCompanyContactID).ValueGeneratedNever();

                entity.Property(e => e.ContactAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSAddressContactUse)
                    .WithMany(p => p.SYSCompanyContacts)
                    .HasForeignKey(d => d.SYSAddressContactUseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSCompanyContact_SYSAddressContactUse");

                entity.HasOne(d => d.SYSContactType)
                    .WithMany(p => p.SYSCompanyContacts)
                    .HasForeignKey(d => d.SYSContactTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSCompanyContact_SYSContactType");
            });

            modelBuilder.Entity<SYSCompanyLocation>(entity =>
            {
                entity.ToTable("SYSCompanyLocation");

                entity.HasIndex(e => e.SYSCompanyID, "IX_SYSCompanyLocation_SYSCompanyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSCountryCodeID, "IX_SYSCompanyLocation_SYSCountryCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSCompanyLocationID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SYSCompanyLocationTypeID).HasDefaultValueSql("((1))");

                entity.Property(e => e.TelephoneNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WebAddress)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSCompany)
                    .WithMany(p => p.SYSCompanyLocations)
                    .HasForeignKey(d => d.SYSCompanyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSCompanyLocation_SYSCompany");

                entity.HasOne(d => d.SYSCountryCode)
                    .WithMany(p => p.SYSCompanyLocations)
                    .HasForeignKey(d => d.SYSCountryCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSCompanyLocation_SYSCountryCode");
            });

            modelBuilder.Entity<SYSCompanyLocationType>(entity =>
            {
                entity.ToTable("SYSCompanyLocationType");

                entity.Property(e => e.SYSCompanyLocationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSCondOperatorDescriptor>(entity =>
            {
                entity.ToTable("SYSCondOperatorDescriptor");

                entity.HasIndex(e => e.SYSCondOperatorTypeID, "IX_SYSCondOperatorDescriptor_SYSCondOperatorTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSCondOperatorDescriptorID).ValueGeneratedNever();

                entity.HasOne(d => d.SYSCondOperatorType)
                    .WithMany(p => p.SYSCondOperatorDescriptors)
                    .HasForeignKey(d => d.SYSCondOperatorTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSCondOperatorDescriptor_SYSCondOperatorType");
            });

            modelBuilder.Entity<SYSCondOperatorType>(entity =>
            {
                entity.ToTable("SYSCondOperatorType");

                entity.Property(e => e.SYSCondOperatorTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSConfigAssistant>(entity =>
            {
                entity.ToTable("SYSConfigAssistant");

                entity.Property(e => e.SYSConfigAssistantID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InternalState)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TileDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TileIdentifier)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TileName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.ParentSYSConfigAssistant)
                    .WithMany(p => p.InverseParentSYSConfigAssistant)
                    .HasForeignKey(d => d.ParentSYSConfigAssistantID)
                    .HasConstraintName("FK_SYSConfigAssistant_ParentSYSConfigAssistantID");
            });

            modelBuilder.Entity<SYSContactType>(entity =>
            {
                entity.ToTable("SYSContactType");

                entity.Property(e => e.SYSContactTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSCorrection>(entity =>
            {
                entity.ToTable("SYSCorrection");

                entity.Property(e => e.SYSCorrectionID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OriginalTransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.NLNominalTranType)
                    .WithMany(p => p.SYSCorrections)
                    .HasForeignKey(d => d.NLNominalTranTypeID)
                    .HasConstraintName("FK_SYSCorrection_NLNominalTranType");

                entity.HasOne(d => d.SYSTraderTranType)
                    .WithMany(p => p.SYSCorrections)
                    .HasForeignKey(d => d.SYSTraderTranTypeID)
                    .HasConstraintName("FK_SYSCorrection_SYSTraderTranType");
            });

            modelBuilder.Entity<SYSCorrectionTranType>(entity =>
            {
                entity.ToTable("SYSCorrectionTranType");

                entity.Property(e => e.SYSCorrectionTranTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSCountryCode>(entity =>
            {
                entity.HasKey(e => e.SYSCountryCodeID)
                    .IsClustered(false);

                entity.ToTable("SYSCountryCode");

                entity.HasIndex(e => e.Code, "IX_SYSCountryCode_Code")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSCountryCodeID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Code3)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyTaxRegistrationNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSCountryCodeTaxMask>(entity =>
            {
                entity.HasKey(e => e.SYSCountryCodeTaxMaskID)
                    .IsClustered(false);

                entity.ToTable("SYSCountryCodeTaxMask");

                entity.HasIndex(e => e.SYSCountryCodeID, "IX_SYSCountryCodeTaxMask_SYSCountryCodeID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSCountryCodeTaxMaskID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSCountryCode)
                    .WithMany(p => p.SYSCountryCodeTaxMasks)
                    .HasForeignKey(d => d.SYSCountryCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSCountryCodeTaxMask_SYSCountryCode");
            });

            modelBuilder.Entity<SYSCreditBureau>(entity =>
            {
                entity.ToTable("SYSCreditBureau");

                entity.Property(e => e.SYSCreditBureauID).ValueGeneratedNever();

                entity.Property(e => e.CheckingURL)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WebSite)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSCreditPosition>(entity =>
            {
                entity.ToTable("SYSCreditPosition");

                entity.Property(e => e.SYSCreditPositionID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSCurrency>(entity =>
            {
                entity.HasKey(e => e.SYSCurrencyID)
                    .HasName("PK_SYSForeignCurrency")
                    .IsClustered(false);

                entity.ToTable("SYSCurrency");

                entity.HasIndex(e => e.Name, "IX_SYSCurrency_Name")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSCurrencyISOCodeID, "IX_SYSCurrency_SYSCurrencyISOCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSExchangeRateAmendTypeID, "IX_SYSCurrency_SYSExchangeRateAmendabilityTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSExchangeRateTypeID, "IX_SYSCurrency_SYSExchangeRateTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSCurrencyID).ValueGeneratedNever();

                entity.Property(e => e.AccumulatedExchangeRateGain).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OneEuroEquals)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OneUnitBaseEquals)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SagePaymentsRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Symbol)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.UseForNewAccounts)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.SYSCurrencyISOCode)
                    .WithMany(p => p.SYSCurrencies)
                    .HasForeignKey(d => d.SYSCurrencyISOCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSCurrency_SYSCurrencyISOCode");

                entity.HasOne(d => d.SYSExchangeRateAmendType)
                    .WithMany(p => p.SYSCurrencies)
                    .HasForeignKey(d => d.SYSExchangeRateAmendTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSCurrency_SYSExchangeRateAmendabilityType");

                entity.HasOne(d => d.SYSExchangeRateType)
                    .WithMany(p => p.SYSCurrencies)
                    .HasForeignKey(d => d.SYSExchangeRateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSCurrency_SYSExchangeRateType");
            });

            modelBuilder.Entity<SYSCurrencyISOCode>(entity =>
            {
                entity.HasKey(e => e.SYSCurrencyISOCodeID)
                    .IsClustered(false);

                entity.ToTable("SYSCurrencyISOCode");

                entity.HasIndex(e => e.Code, "IX_SYSCurrencyISOCode_Code")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.SYSCurrencyISOCodeID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSCurrencyTranType>(entity =>
            {
                entity.ToTable("SYSCurrencyTranType");

                entity.Property(e => e.SYSCurrencyTranTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSDataKey>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SYSDataKey");

                entity.HasIndex(e => e.SYSDataKeyID, "SYSDataKeyCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSDesktopListFilter>(entity =>
            {
                entity.ToTable("SYSDesktopListFilter");

                entity.Property(e => e.SYSDesktopListFilterID).ValueGeneratedNever();

                entity.Property(e => e.DesktopList)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FilterName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SerializedFilter)
                    .IsRequired()
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSDisplayField>(entity =>
            {
                entity.ToTable("SYSDisplayField");

                entity.HasIndex(e => e.SYSFieldDescriptorID, "IX_SYSDisplayField_SYSFieldDescriptorID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSSearchID, "IX_SYSDisplayField_SYSSearchID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSDisplayFieldID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSFieldDescriptor)
                    .WithMany(p => p.SYSDisplayFields)
                    .HasForeignKey(d => d.SYSFieldDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSDisplayField_SYSFieldDescriptor");

                entity.HasOne(d => d.SYSSearch)
                    .WithMany(p => p.SYSDisplayFields)
                    .HasForeignKey(d => d.SYSSearchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSDisplayField_SYSSearch");
            });

            modelBuilder.Entity<SYSDocCapture>(entity =>
            {
                entity.ToTable("SYSDocCapture");

                entity.HasIndex(e => new { e.SYSDocCaptureTypeID, e.ParentPrimaryID, e.DocPrimaryID }, "IX_SYSDocCapture_CompoundKey");

                entity.Property(e => e.SYSDocCaptureID).ValueGeneratedNever();

                entity.Property(e => e.CaptureDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CaptureFileName)
                    .IsRequired()
                    .HasMaxLength(260)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CaptureUserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocSecondReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocURN)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ParentName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ParentReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.SYSDocCaptureType)
                    .WithMany(p => p.SYSDocCaptures)
                    .HasForeignKey(d => d.SYSDocCaptureTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSDocCapture_SYSDocCaptureTypeID");
            });

            modelBuilder.Entity<SYSDocCaptureType>(entity =>
            {
                entity.ToTable("SYSDocCaptureType");

                entity.Property(e => e.SYSDocCaptureTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSDocStorageSetting>(entity =>
            {
                entity.ToTable("SYSDocStorageSetting");

                entity.Property(e => e.SYSDocStorageSettingID).ValueGeneratedNever();

                entity.Property(e => e.CloudFolderPath)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LocalFolderPath)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSDocStorageURL>(entity =>
            {
                entity.ToTable("SYSDocStorageURL");

                entity.Property(e => e.SYSDocStorageURLID).ValueGeneratedNever();

                entity.Property(e => e.CloudStorageURL)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSDocTransmissionMethod>(entity =>
            {
                entity.ToTable("SYSDocTransmissionMethod");

                entity.Property(e => e.SYSDocTransmissionMethodID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSDocumentLayoutVersion>(entity =>
            {
                entity.ToTable("SYSDocumentLayoutVersion");

                entity.Property(e => e.SYSDocumentLayoutVersionID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");

                entity.Property(e => e.Layout)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SYSDocumentTypeID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.SYSDocumentType)
                    .WithMany(p => p.SYSDocumentLayoutVersions)
                    .HasForeignKey(d => d.SYSDocumentTypeID)
                    .HasConstraintName("FK_SYSDocumentType_SYSDocumentLayoutVersion");
            });

            modelBuilder.Entity<SYSDocumentType>(entity =>
            {
                entity.ToTable("SYSDocumentType");

                entity.HasIndex(e => e.UsedInSYSModuleID, "IX_SYSDocumentType_UsedInSYSModuleID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSDocumentTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSTraderContactRole)
                    .WithMany(p => p.SYSDocumentTypes)
                    .HasForeignKey(d => d.SYSTraderContactRoleID)
                    .HasConstraintName("FK_SYSDocumentType_SYSTraderContactRoleID");

                entity.HasOne(d => d.UsedInSYSModule)
                    .WithMany(p => p.SYSDocumentTypes)
                    .HasForeignKey(d => d.UsedInSYSModuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSDocumentType_SYSModule");
            });

            modelBuilder.Entity<SYSEmailType>(entity =>
            {
                entity.ToTable("SYSEmailType");

                entity.Property(e => e.SYSEmailTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailBody).IsUnicode(false);

                entity.Property(e => e.EmailSubject)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSExchangeRateAction>(entity =>
            {
                entity.ToTable("SYSExchangeRateAction");

                entity.HasIndex(e => e.Name, "IX_SYSExchangeRateAction")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSExchangeRateActionID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSExchangeRateAmendType>(entity =>
            {
                entity.ToTable("SYSExchangeRateAmendType");

                entity.HasIndex(e => e.Name, "IX_SYSExchangeRateAmendabilityType")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSExchangeRateAmendTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSExchangeRateHistory>(entity =>
            {
                entity.HasKey(e => e.SYSExchangeRateHistoryID)
                    .IsClustered(false);

                entity.ToTable("SYSExchangeRateHistory");

                entity.HasIndex(e => e.SYSCurrencyID, "IX_SYSExchangeRateHistory_SYSCurrencyID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSExchangeRateActionID, "IX_SYSExchangeRateHistory_SYSExchangeRateActionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSExchangeRateHistoryID).ValueGeneratedNever();

                entity.Property(e => e.DateAndTimeActionPerformed).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PreviousValue)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSCurrency)
                    .WithMany(p => p.SYSExchangeRateHistories)
                    .HasForeignKey(d => d.SYSCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSExchangeRateHistory_SYSCurrency");

                entity.HasOne(d => d.SYSExchangeRateAction)
                    .WithMany(p => p.SYSExchangeRateHistories)
                    .HasForeignKey(d => d.SYSExchangeRateActionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSExchangeRateHistory_SYSExchangeRateAction");
            });

            modelBuilder.Entity<SYSExchangeRateType>(entity =>
            {
                entity.ToTable("SYSExchangeRateType");

                entity.HasIndex(e => e.Name, "IX_SYSExchangeRateType")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSExchangeRateTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSExpressionLine>(entity =>
            {
                entity.ToTable("SYSExpressionLine");

                entity.HasIndex(e => e.SYSCondOperatorDescriptorID, "IX_SYSExpressionLine_SYSCondOperatorDescriptorID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSFieldDescriptorID, "IX_SYSExpressionLine_SYSFieldDescriptorID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSLogicalOperatorDescriptorID, "IX_SYSExpressionLine_SYSLogicalOperatorDescriptorID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSSearchID, "IX_SYSExpressionLine_SYSSearchID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSExpressionLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSCondOperatorDescriptor)
                    .WithMany(p => p.SYSExpressionLines)
                    .HasForeignKey(d => d.SYSCondOperatorDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSExpressionLine_SYSCondOperatorDescriptor");

                entity.HasOne(d => d.SYSFieldDescriptor)
                    .WithMany(p => p.SYSExpressionLines)
                    .HasForeignKey(d => d.SYSFieldDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSExpressionLine_SYSFieldDescriptor");

                entity.HasOne(d => d.SYSLogicalOperatorDescriptor)
                    .WithMany(p => p.SYSExpressionLines)
                    .HasForeignKey(d => d.SYSLogicalOperatorDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSExpressionLine_SYSLogicalOperatorDescriptor");

                entity.HasOne(d => d.SYSSearch)
                    .WithMany(p => p.SYSExpressionLines)
                    .HasForeignKey(d => d.SYSSearchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSExpressionLine_SYSSearch");
            });

            modelBuilder.Entity<SYSFeatureAreaLogging>(entity =>
            {
                entity.ToTable("SYSFeatureAreaLogging");

                entity.HasIndex(e => e.DateTimeOfClose, "IX_SYSFeatureAreaLogging_DateTimeOfClose")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSFeatureAreaLoggingID).ValueGeneratedNever();

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeOfClose).HasColumnType("datetime");

                entity.Property(e => e.DateTimeOfOpen).HasColumnType("datetime");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FormName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSFeatureAreaUsage>(entity =>
            {
                entity.HasKey(e => e.SYSFeatureAreaUsageID)
                    .IsClustered(false);

                entity.ToTable("SYSFeatureAreaUsage");

                entity.HasIndex(e => e.SYSUserLoginID, "IX_SYSFeatureAreaUsage_SYSUserLoginID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSFeatureAreaUsageID).ValueGeneratedNever();

                entity.Property(e => e.AccessedAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FeatureArea)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSUserLogin)
                    .WithMany(p => p.SYSFeatureAreaUsages)
                    .HasForeignKey(d => d.SYSUserLoginID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSFeatureAreaUsage_SYSUserLogin");
            });

            modelBuilder.Entity<SYSFieldDescriptor>(entity =>
            {
                entity.ToTable("SYSFieldDescriptor");

                entity.Property(e => e.SYSFieldDescriptorID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSFinancialYear>(entity =>
            {
                entity.HasKey(e => e.SYSFinancialYearID)
                    .IsClustered(false);

                entity.ToTable("SYSFinancialYear");

                entity.HasIndex(e => e.YearRelativeToCurrentYear, "IX_SYSFinancialYear")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSFinancialYearID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FinancialYearStartDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSFlowState>(entity =>
            {
                entity.ToTable("SYSFlowState");

                entity.Property(e => e.SYSFlowStateID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FlowID)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Value)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SYSImportType>(entity =>
            {
                entity.ToTable("SYSImportType");

                entity.Property(e => e.SYSImportTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSInformationView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SYSInformationView");

                entity.Property(e => e.Entity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Value).HasMaxLength(300);
            });

            modelBuilder.Entity<SYSLockDefinition>(entity =>
            {
                entity.HasKey(e => e.SYSLockDefinitionID)
                    .IsClustered(false);

                entity.ToTable("SYSLockDefinition");

                entity.HasIndex(e => e.ClashingOption, "IX_SYSLockDefinition_ClashingOption")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OptionName, "IX_SYSLockDefinition_OptionName")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSLockDefinitionID).ValueGeneratedNever();

                entity.Property(e => e.ClashingData)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ClashingOption)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OptionName)
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSLogicalOperatorDescriptor>(entity =>
            {
                entity.ToTable("SYSLogicalOperatorDescriptor");

                entity.HasIndex(e => e.SYSLogicalOperatorTypeID, "IX_SYSLogicalOperatorDescriptor_SYSLogicalOperatorTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSLogicalOperatorDescriptorID).ValueGeneratedNever();

                entity.HasOne(d => d.SYSLogicalOperatorType)
                    .WithMany(p => p.SYSLogicalOperatorDescriptors)
                    .HasForeignKey(d => d.SYSLogicalOperatorTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSLogicalOperatorDescriptor_SYSLogicalOperatorType");
            });

            modelBuilder.Entity<SYSLogicalOperatorType>(entity =>
            {
                entity.ToTable("SYSLogicalOperatorType");

                entity.Property(e => e.SYSLogicalOperatorTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSMerchantAccount>(entity =>
            {
                entity.ToTable("SYSMerchantAccount");

                entity.Property(e => e.SYSMerchantAccountID).ValueGeneratedNever();

                entity.Property(e => e.AccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.SYSMerchantAccounts)
                    .HasForeignKey(d => d.CBAccountID)
                    .HasConstraintName("FK_SYSMerchantAccount_CBAccount");
            });

            modelBuilder.Entity<SYSModule>(entity =>
            {
                entity.HasKey(e => e.SYSModuleID)
                    .IsClustered(false);

                entity.ToTable("SYSModule");

                entity.HasIndex(e => e.Name, "IX_SYSModule_Name")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSModuleID).ValueGeneratedNever();

                entity.Property(e => e.ArchiveLastRunBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AutoAllocationLastRunBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BroughtForwardMaintLastRunBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateArchiveLastRun).HasColumnType("datetime");

                entity.Property(e => e.DateAutoAllocationLastRun).HasColumnType("datetime");

                entity.Property(e => e.DateBroughtForwardMaintLastRun).HasColumnType("datetime");

                entity.Property(e => e.DateTansactionRemovalLastRun).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionRemovalLastRunBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSModuleAccountingPeriod>(entity =>
            {
                entity.ToTable("SYSModuleAccountingPeriod");

                entity.HasIndex(e => e.SYSAccountingPeriodID, "IX_SYSModuleAccountingPeriod_SYSAccountingPeriodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSModuleID, "IX_SYSModuleAccountingPeriod_SYSModuleID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSModulePostingStatusID, "IX_SYSModuleAccountingPeriod_SYSModulePostingStatusID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSModuleAccountingPeriodID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSAccountingPeriod)
                    .WithMany(p => p.SYSModuleAccountingPeriods)
                    .HasForeignKey(d => d.SYSAccountingPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSModuleAccountingPeriod_SYSAccountingPeriod");

                entity.HasOne(d => d.SYSModule)
                    .WithMany(p => p.SYSModuleAccountingPeriods)
                    .HasForeignKey(d => d.SYSModuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSModulePeriod_SYSModule");

                entity.HasOne(d => d.SYSModulePostingStatus)
                    .WithMany(p => p.SYSModuleAccountingPeriods)
                    .HasForeignKey(d => d.SYSModulePostingStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSModuleAccountingPeriod_SYSModulePostingStatus");
            });

            modelBuilder.Entity<SYSModulePostingStatus>(entity =>
            {
                entity.ToTable("SYSModulePostingStatus");

                entity.HasIndex(e => e.SYSModulePostingStatusID, "IX_SYSModulePostingStatus")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSModulePostingStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSNominalAuditTrail>(entity =>
            {
                entity.HasKey(e => e.SYSNominalAuditTrailID)
                    .IsClustered(false);

                entity.ToTable("SYSNominalAuditTrail");

                entity.HasIndex(e => new { e.SYSAuditTrailID, e.SYSNominalAuditTrailID }, "IX_SYSNominalAuditTrail_AuditTrailView")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSAuditTrailID, "IX_SYSNominalAuditTrail_SYSAuditTrailID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_SYSNominalAuditTrail_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSNominalAuditTrailID).ValueGeneratedNever();

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TradingNominalAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.HasOne(d => d.SYSAuditTrail)
                    .WithMany(p => p.SYSNominalAuditTrails)
                    .HasForeignKey(d => d.SYSAuditTrailID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSNominalAuditTrail_SYSAuditTrail");
            });

            modelBuilder.Entity<SYSNotification>(entity =>
            {
                entity.ToTable("SYSNotification");

                entity.Property(e => e.SYSNotificationID).ValueGeneratedNever();

                entity.Property(e => e.BodyText)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SubjectText)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TimeAndDateNotifCreated).HasColumnType("datetime");

                entity.Property(e => e.UserFromName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSNotificationPriorityType)
                    .WithMany(p => p.SYSNotifications)
                    .HasForeignKey(d => d.SYSNotificationPriorityTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSNotification_SYSNotificationPriorityType");

                entity.HasOne(d => d.SYSNotificationStatusType)
                    .WithMany(p => p.SYSNotifications)
                    .HasForeignKey(d => d.SYSNotificationStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSNotification_SYSNotificationStatusType");
            });

            modelBuilder.Entity<SYSNotificationPriorityType>(entity =>
            {
                entity.ToTable("SYSNotificationPriorityType");

                entity.Property(e => e.SYSNotificationPriorityTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSNotificationStatusType>(entity =>
            {
                entity.ToTable("SYSNotificationStatusType");

                entity.Property(e => e.SYSNotificationStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSNotificationUser>(entity =>
            {
                entity.ToTable("SYSNotificationUser");

                entity.Property(e => e.SYSNotificationUserID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSNotification)
                    .WithMany(p => p.SYSNotificationUsers)
                    .HasForeignKey(d => d.SYSNotificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSNotificationUser_SYSNotification");
            });

            modelBuilder.Entity<SYSOverduePeriod>(entity =>
            {
                entity.ToTable("SYSOverduePeriod");

                entity.Property(e => e.SYSOverduePeriodID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSPaymentTermsBasis>(entity =>
            {
                entity.ToTable("SYSPaymentTermsBasis");

                entity.Property(e => e.SYSPaymentTermsBasisID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSPendingEmail>(entity =>
            {
                entity.ToTable("SYSPendingEmail");

                entity.HasIndex(e => new { e.SYSEmailTypeID, e.UserID }, "IX_SYSPendingEmail_SYSEmailTypeID_UserID")
                    .IsUnique();

                entity.Property(e => e.SYSPendingEmailID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EmailBody).IsUnicode(false);

                entity.Property(e => e.EmailSubject)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSEmailType)
                    .WithMany(p => p.SYSPendingEmails)
                    .HasForeignKey(d => d.SYSEmailTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSPendingEmail_SYSEmailType");
            });

            modelBuilder.Entity<SYSPeriodAction>(entity =>
            {
                entity.HasKey(e => e.SYSPeriodActionID)
                    .IsClustered(false);

                entity.ToTable("SYSPeriodAction");

                entity.HasIndex(e => e.Name, "IX_SYSPeriodAction_Name")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSPeriodActionTypeID, "IX_SYSPeriodAction_SYSPeriodActionTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSPeriodActionID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSPeriodActionType)
                    .WithMany(p => p.SYSPeriodActions)
                    .HasForeignKey(d => d.SYSPeriodActionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSPeriodAction_SYSPeriodActionType");
            });

            modelBuilder.Entity<SYSPeriodActionLog>(entity =>
            {
                entity.ToTable("SYSPeriodActionLog");

                entity.HasIndex(e => e.SYSPeriodActionID, "IX_SYSPeriodActionLog_SYSPeriodActionID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSPeriodActionLogID).ValueGeneratedNever();

                entity.Property(e => e.DateAndTimeActionPerformed).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ModuleName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModulePostingStatusName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NominalLedgerControlTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OldEndDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TradingLedgerClosingTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSPeriodAction)
                    .WithMany(p => p.SYSPeriodActionLogs)
                    .HasForeignKey(d => d.SYSPeriodActionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSModulePeriodActionLog_SYSPeriodAction");
            });

            modelBuilder.Entity<SYSPeriodActionType>(entity =>
            {
                entity.ToTable("SYSPeriodActionType");

                entity.HasIndex(e => e.Name, "IX_SYSPeriodActionType")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSPeriodActionTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSPeriodBalancesAccount>(entity =>
            {
                entity.ToTable("SYSPeriodBalancesAccount");

                entity.HasIndex(e => e.SYSPeriodBalancesLedgerID, "IX_SYSPeriodBalancesLedger")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSPeriodBalancesAccountID).ValueGeneratedNever();

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NameOfField)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NameOfTable)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ReasonForChange)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAfter).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValueBefore).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.SYSPeriodBalancesLedger)
                    .WithMany(p => p.SYSPeriodBalancesAccounts)
                    .HasForeignKey(d => d.SYSPeriodBalancesLedgerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSPeriodBalancesAccount_SYSPeriodBalancesLedger");
            });

            modelBuilder.Entity<SYSPeriodBalancesEntry>(entity =>
            {
                entity.ToTable("SYSPeriodBalancesEntry");

                entity.HasIndex(e => e.SYSPeriodBalancesLedgerID, "IX_SYSPeriodBalancesLedger")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSPeriodBalancesEntryID).ValueGeneratedNever();

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NameOfField)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NameOfTable)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ReasonForCharge)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAfter).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValueBefore).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<SYSPeriodBalancesLedger>(entity =>
            {
                entity.ToTable("SYSPeriodBalancesLedger");

                entity.HasIndex(e => e.SYSModuleID, "IX_SYSModuleID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSPeriodBalancesLedgerID).ValueGeneratedNever();

                entity.Property(e => e.DateRun).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WhoRunBy)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSModule)
                    .WithMany(p => p.SYSPeriodBalancesLedgers)
                    .HasForeignKey(d => d.SYSModuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSPeriodBalancesLedger_SYSModule");
            });

            modelBuilder.Entity<SYSPeriodExchangeRate>(entity =>
            {
                entity.HasKey(e => e.SYSPeriodExchangeRate1)
                    .HasName("PK_SYSPeriodExchangeRateToCoreCurrency");

                entity.ToTable("SYSPeriodExchangeRate");

                entity.HasIndex(e => e.SYSCurrencyID, "IX_SYSPeriodExchangeRate_SYSCurrencyID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSPeriodExchangeRate1)
                    .ValueGeneratedNever()
                    .HasColumnName("SYSPeriodExchangeRate");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.OneUnitEquals)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.SYSCurrency)
                    .WithMany(p => p.SYSPeriodExchangeRates)
                    .HasForeignKey(d => d.SYSCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSPeriodExchangeRate_SYSCurrency");
            });

            modelBuilder.Entity<SYSPrintSpoolerNumber>(entity =>
            {
                entity.ToTable("SYSPrintSpoolerNumber");

                entity.Property(e => e.SYSPrintSpoolerNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<SYSProgressDatum>(entity =>
            {
                entity.HasKey(e => e.SYSProgressDataID);

                entity.Property(e => e.SYSProgressDataID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeProgressUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ReturnID)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSProviderConfiguration>(entity =>
            {
                entity.ToTable("SYSProviderConfiguration");

                entity.HasIndex(e => e.SYSProviderTypeID, "IX_SYSProviderConfiguration_SYSProviderTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSProviderConfigurationID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ProviderInstanceName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSProviderType)
                    .WithMany(p => p.SYSProviderConfigurations)
                    .HasForeignKey(d => d.SYSProviderTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayrollProviderConfiguration_SYSProviderType");
            });

            modelBuilder.Entity<SYSProviderConfigurationAttribute>(entity =>
            {
                entity.ToTable("SYSProviderConfigurationAttribute");

                entity.HasIndex(e => e.SYSProviderConfigurationID, "IX_SYSProviderConfigurationAttribute_SYSProviderConfigurationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSProviderTypeAttributeID, "IX_SYSProviderConfigurationAttribute_SYSProviderTypeAttributeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSProviderConfigurationAttributeID).ValueGeneratedNever();

                entity.Property(e => e.AttributeValue)
                    .IsRequired()
                    .HasMaxLength(7000)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSProviderConfiguration)
                    .WithMany(p => p.SYSProviderConfigurationAttributes)
                    .HasForeignKey(d => d.SYSProviderConfigurationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSProviderConfigurationAttribute_SYSProviderConfiguration");

                entity.HasOne(d => d.SYSProviderTypeAttribute)
                    .WithMany(p => p.SYSProviderConfigurationAttributes)
                    .HasForeignKey(d => d.SYSProviderTypeAttributeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSProviderConfigurationAttribute_SYSProviderTypeAttribute");
            });

            modelBuilder.Entity<SYSProviderType>(entity =>
            {
                entity.ToTable("SYSProviderType");

                entity.Property(e => e.SYSProviderTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ProviderBaseTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProviderType)
                    .IsRequired()
                    .HasMaxLength(7000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSProviderTypeAttribute>(entity =>
            {
                entity.ToTable("SYSProviderTypeAttribute");

                entity.Property(e => e.SYSProviderTypeAttributeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSProviderType)
                    .WithMany(p => p.SYSProviderTypeAttributes)
                    .HasForeignKey(d => d.SYSProviderTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSProviderTypeAttribute_SYSProviderType");
            });

            modelBuilder.Entity<SYSProviderTypeAttributeType>(entity =>
            {
                entity.ToTable("SYSProviderTypeAttributeType");

                entity.Property(e => e.SYSProviderTypeAttributeTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSReportKey>(entity =>
            {
                entity.ToTable("SYSReportKey");

                entity.Property(e => e.SYSReportKeyID).ValueGeneratedNever();

                entity.Property(e => e.ReportFileName)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ReportName)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSSearch>(entity =>
            {
                entity.ToTable("SYSSearch");

                entity.Property(e => e.SYSSearchID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSSearchField>(entity =>
            {
                entity.ToTable("SYSSearchField");

                entity.HasIndex(e => e.SYSFieldDescriptorID, "IX_SYSSearchField_SYSFieldDescriptorID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSSearchID, "IX_SYSSearchField_SYSSearchID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSSearchFieldID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSFieldDescriptor)
                    .WithMany(p => p.SYSSearchFields)
                    .HasForeignKey(d => d.SYSFieldDescriptorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSSearchField_SYSFieldDescriptor");

                entity.HasOne(d => d.SYSSearch)
                    .WithMany(p => p.SYSSearchFields)
                    .HasForeignKey(d => d.SYSSearchID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSSearchField_SYSSearch");
            });

            modelBuilder.Entity<SYSSemaphore>(entity =>
            {
                entity.ToTable("SYSSemaphore");

                entity.HasIndex(e => e.Semaphore, "IX_SYSSemaphore")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSSemaphoreID, "IX_SYSSemaphore_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSSemaphoreID).ValueGeneratedNever();

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TimeCreated).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Workstation)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSSetting>(entity =>
            {
                entity.ToTable("SYSSetting");

                entity.Property(e => e.SYSSettingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FinancialYearEndDate).HasColumnType("datetime");

                entity.Property(e => e.IntrastatValueForConsolidation).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NumberOpenAccountPeriodsPermit).HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ReverseChargeMinimum).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionAnalysisHeading)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UseAccountPeriodsAsTradPeriods)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseSegmentedAddress)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.SYSAccountingPeriodValidation)
                    .WithMany(p => p.SYSSettings)
                    .HasForeignKey(d => d.SYSAccountingPeriodValidationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSSetting_SYSAccountingPeriodValidation");
            });

            modelBuilder.Entity<SYSSupportLog>(entity =>
            {
                entity.ToTable("SYSSupportLog");

                entity.Property(e => e.SYSSupportLogID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeOfClose).HasColumnType("datetime");

                entity.Property(e => e.DateTimeOfOpen).HasColumnType("datetime");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FormName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSTaxAdjustment>(entity =>
            {
                entity.ToTable("SYSTaxAdjustment");

                entity.Property(e => e.SYSTaxAdjustmentID).ValueGeneratedNever();

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.SYSTaxPeriod)
                    .WithMany(p => p.SYSTaxAdjustments)
                    .HasForeignKey(d => d.SYSTaxPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTaxAdjustment_SYSTaxPeriod");
            });

            modelBuilder.Entity<SYSTaxAuditTrail>(entity =>
            {
                entity.HasKey(e => e.SYSTaxAuditTrailID)
                    .IsClustered(false);

                entity.ToTable("SYSTaxAuditTrail");

                entity.HasIndex(e => e.SYSAuditTrailID, "IX_SYSTaxAuditTrail_SYSAuditTrailID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTaxRateID, "IX_SYSTaxAuditTrail_SYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_SYSTaxAuditTrail_UniqueReferenceNumber")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSTaxAuditTrailID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DiscountValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.SYSAuditTrail)
                    .WithMany(p => p.SYSTaxAuditTrails)
                    .HasForeignKey(d => d.SYSAuditTrailID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTaxAuditTrail_SYSAuditTrail");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.SYSTaxAuditTrails)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTaxAuditTrail_SYSTaxRate");
            });

            modelBuilder.Entity<SYSTaxECTerm>(entity =>
            {
                entity.ToTable("SYSTaxECTerm");

                entity.HasIndex(e => e.Name, "IX_SYSTaxECTerm")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSTaxECTermID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSTaxPeriod>(entity =>
            {
                entity.ToTable("SYSTaxPeriod");

                entity.HasIndex(e => e.SYSTaxPeriodStatusTypeID, "IX_SYSTaxPeriod_SYSTaxPeriodStatusTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSTaxPeriodID).ValueGeneratedNever();

                entity.Property(e => e.ChargeRefNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CorrelationIdentifier)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateRun).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExtraInformation)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormBundleNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HMRCReference)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LiabilityValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentDueDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentIndicator)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentNotification)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PeriodDueDate).HasColumnType("datetime");

                entity.Property(e => e.PeriodEndDate).HasColumnType("datetime");

                entity.Property(e => e.PeriodStartDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessingDateTime).HasColumnType("datetime");

                entity.Property(e => e.ReceiptIdentifier)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RunBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.SYSTaxPeriodStatusType)
                    .WithMany(p => p.SYSTaxPeriods)
                    .HasForeignKey(d => d.SYSTaxPeriodStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTaxPeriod_SYSTaxPeriodStatusType");

                entity.HasOne(d => d.SYSTaxPeriodSubmitStatus)
                    .WithMany(p => p.SYSTaxPeriods)
                    .HasForeignKey(d => d.SYSTaxPeriodSubmitStatusID)
                    .HasConstraintName("FK__SYSTaxPer__SYSTa__76ED3997");
            });

            modelBuilder.Entity<SYSTaxPeriodRateBalance>(entity =>
            {
                entity.ToTable("SYSTaxPeriodRateBalance");

                entity.HasIndex(e => e.SYSTaxPeriodID, "IX_SYSTaxPeriodRateBalance_SYSTaxPeriodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTaxRateID, "IX_SYSTaxPeriodRateBalance_SYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSTaxPeriodRateBalanceID).ValueGeneratedNever();

                entity.Property(e => e.DateTaxReturnLastPrinted).HasColumnType("datetime");

                entity.Property(e => e.DateTaxTransactionsLastDeleted).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InputGoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InputLastTransactionDate).HasColumnType("datetime");

                entity.Property(e => e.InputTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OutputGoodsValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OutputLastTransactionDate).HasColumnType("datetime");

                entity.Property(e => e.OutputTaxValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.SYSTaxPeriod)
                    .WithMany(p => p.SYSTaxPeriodRateBalances)
                    .HasForeignKey(d => d.SYSTaxPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTaxPeriodRateBalance_SYSTaxPeriod");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.SYSTaxPeriodRateBalances)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTaxPeriodRateBalance_SYSTaxRate");
            });

            modelBuilder.Entity<SYSTaxPeriodStatusType>(entity =>
            {
                entity.ToTable("SYSTaxPeriodStatusType");

                entity.Property(e => e.SYSTaxPeriodStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSTaxPeriodSubmitStatus>(entity =>
            {
                entity.ToTable("SYSTaxPeriodSubmitStatus");

                entity.Property(e => e.SYSTaxPeriodSubmitStatusID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSTaxRate>(entity =>
            {
                entity.HasKey(e => e.SYSTaxRateID)
                    .IsClustered(false);

                entity.ToTable("SYSTaxRate");

                entity.HasIndex(e => e.Code, "IX_SYSTaxRate_Code")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Name, "IX_SYSTaxRate_Name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTaxECTermID, "IX_SYSTaxRate_SYSTaxECTermID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSTaxRateID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IncludeInVatReturn)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InputNominalAccount)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OutputNominalAccount)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.SYSTaxECTerm)
                    .WithMany(p => p.SYSTaxRates)
                    .HasForeignKey(d => d.SYSTaxECTermID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSVatFile_SYSEcType");
            });

            modelBuilder.Entity<SYSTaxTran>(entity =>
            {
                entity.ToTable("SYSTaxTran");

                entity.HasIndex(e => new { e.UniqueReferenceNumber, e.TaxPointDate }, "IX_SYSTaxTran_URN_TaxPointDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SYSTaxPeriodRateBalanceID, e.SYSTaxTranID }, "IX_SYSTaxTransaction_SYSTaxPeriodRateBalanceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SYSTaxRateID, "IX_SYSTaxTransaction_SYSTaxRateID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SYSTaxPeriodRateBalanceID, e.VatReturnDate, e.UniqueReferenceNumber, e.SYSTaxRateID, e.AccountNumber, e.Reference, e.Source, e.TaxPointDate, e.UserNumber, e.SYSTaxTranID, e.GoodsAmount, e.SYSTaxTranTypeID, e.VatAmount }, "IX_VatReturn")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSTaxTranID).ValueGeneratedNever();

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Department)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ESVatDiscountAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAnalysisDetails)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxPointDate).HasColumnType("datetime");

                entity.Property(e => e.TaxRegistrationNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.VatReturnDate).HasColumnType("datetime");

                entity.HasOne(d => d.NominalAccountingPeriod)
                    .WithMany(p => p.SYSTaxTrans)
                    .HasForeignKey(d => d.NominalAccountingPeriodID)
                    .HasConstraintName("FK_SYSTaxTran_NominalAccountingPeriod");

                entity.HasOne(d => d.SYSTaxPeriodRateBalance)
                    .WithMany(p => p.SYSTaxTrans)
                    .HasForeignKey(d => d.SYSTaxPeriodRateBalanceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTaxTransaction_SYSTaxPeriodRateBalance");

                entity.HasOne(d => d.SYSTaxRate)
                    .WithMany(p => p.SYSTaxTrans)
                    .HasForeignKey(d => d.SYSTaxRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTaxTransaction_SYSTaxRate");

                entity.HasOne(d => d.SYSTaxTranType)
                    .WithMany(p => p.SYSTaxTrans)
                    .HasForeignKey(d => d.SYSTaxTranTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTaxTransaction_SYSTaxTransactionType");
            });

            modelBuilder.Entity<SYSTaxTranType>(entity =>
            {
                entity.ToTable("SYSTaxTranType");

                entity.Property(e => e.SYSTaxTranTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSTerminology>(entity =>
            {
                entity.HasKey(e => e.TSTerminologyID)
                    .HasName("PK_Terminology");

                entity.ToTable("SYSTerminology");

                entity.Property(e => e.TSTerminologyID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExternalName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InternalName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSTraderAnalysisHeading>(entity =>
            {
                entity.HasKey(e => e.SYSTraderAnalysisHeadingID)
                    .IsClustered(false);

                entity.ToTable("SYSTraderAnalysisHeading");

                entity.HasIndex(e => e.Name, "IX_SYSTraderAnalysisHeading_Name")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSTraderAnalysisHeadingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UseForCustomerAccount)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseForSupplierAccount)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SYSTraderAnalysisValue>(entity =>
            {
                entity.HasKey(e => e.SYSTraderAnalysisValueID)
                    .IsClustered(false);

                entity.ToTable("SYSTraderAnalysisValue");

                entity.HasIndex(e => new { e.SYSTraderAnalysisHeadingID, e.Name }, "IX_SYSTraderAnalysisValue_Name")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.SYSTraderAnalysisHeadingID, "IX_SYSTraderAnalysisValue_SYSTraderAnalysisHeadingID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSTraderAnalysisValueID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSTraderAnalysisHeading)
                    .WithMany(p => p.SYSTraderAnalysisValues)
                    .HasForeignKey(d => d.SYSTraderAnalysisHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTraderAnalysisValue_SYSTraderAnalysisHeading");
            });

            modelBuilder.Entity<SYSTraderContactRole>(entity =>
            {
                entity.ToTable("SYSTraderContactRole");

                entity.Property(e => e.SYSTraderContactRoleID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UseForCustomerAccounts)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseForSupplierAccounts)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SYSTraderGenerateReasonType>(entity =>
            {
                entity.ToTable("SYSTraderGenerateReasonType");

                entity.Property(e => e.SYSTraderGenerateReasonTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSTraderLocationType>(entity =>
            {
                entity.ToTable("SYSTraderLocationType");

                entity.Property(e => e.SYSTraderLocationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSTraderRevalAllocType>(entity =>
            {
                entity.ToTable("SYSTraderRevalAllocType");

                entity.Property(e => e.SYSTraderRevalAllocTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSTraderTranType>(entity =>
            {
                entity.ToTable("SYSTraderTranType");

                entity.Property(e => e.SYSTraderTranTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseShortName)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SalesName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesShortName)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSTraderWriteOffEntryType>(entity =>
            {
                entity.ToTable("SYSTraderWriteOffEntryType");

                entity.Property(e => e.SYSTraderWriteOffEntryTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSTranAnalysisCode>(entity =>
            {
                entity.HasKey(e => e.SYSTranAnalysisCodeID)
                    .HasName("PK_SYSTransactionAnalysisCode")
                    .IsClustered(false);

                entity.ToTable("SYSTranAnalysisCode");

                entity.HasIndex(e => e.Code, "IX_SYSTransactionAnalysisCode_Code")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSTranAnalysisCodeID).ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSTranDateValidationClass>(entity =>
            {
                entity.ToTable("SYSTranDateValidationClass");

                entity.Property(e => e.SYSTranDateValidationClassID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSTranDateValidationTerm>(entity =>
            {
                entity.HasKey(e => e.SYSTranDateValidationTermsID)
                    .HasName("PK_SYSTranDateValidationTerms ");

                entity.HasIndex(e => e.ClosedPeriodClassificationID, "IX_SYSTranDateValidationTerms_ClosedPeriodClassificationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.FuturePeriodClassificationID, "IX_SYSTranDateValidationTerms_FuturePeriodClassificationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.FutureYearClassificationID, "IX_SYSTranDateValidationTerms_FutureYearClassificationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PreviousYearClassificationID, "IX_SYSTranDateValidationTerms_PreviousYearClassificationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TranDateValidationTypeID, "IX_SYSTranDateValidationTerms_TranDateValidationTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSTranDateValidationTermsID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ClosedPeriodClassification)
                    .WithMany(p => p.SYSTranDateValidationTermClosedPeriodClassifications)
                    .HasForeignKey(d => d.ClosedPeriodClassificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTranDateValidationTerms_ClosedPeriodClassification");

                entity.HasOne(d => d.FuturePeriodClassification)
                    .WithMany(p => p.SYSTranDateValidationTermFuturePeriodClassifications)
                    .HasForeignKey(d => d.FuturePeriodClassificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTranDateValidationTerms_FuturePeriodClassification");

                entity.HasOne(d => d.FutureYearClassification)
                    .WithMany(p => p.SYSTranDateValidationTermFutureYearClassifications)
                    .HasForeignKey(d => d.FutureYearClassificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTranDateValidationTerms_FutureYearClassification");

                entity.HasOne(d => d.PreviousYearClassification)
                    .WithMany(p => p.SYSTranDateValidationTermPreviousYearClassifications)
                    .HasForeignKey(d => d.PreviousYearClassificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTranDateValidationTerms_PreviousYearClassification");

                entity.HasOne(d => d.TranDateValidationType)
                    .WithMany(p => p.SYSTranDateValidationTerms)
                    .HasForeignKey(d => d.TranDateValidationTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSTranDateValidationTerms_TranDateValidationType");
            });

            modelBuilder.Entity<SYSTranDateValidationType>(entity =>
            {
                entity.ToTable("SYSTranDateValidationType");

                entity.Property(e => e.SYSTranDateValidationTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSURNPool>(entity =>
            {
                entity.ToTable("SYSURNPool");
            });

            modelBuilder.Entity<SYSUnAllocatedURN>(entity =>
            {
                entity.ToTable("SYSUnAllocatedURN");

                entity.HasIndex(e => e.UniqueReferenceNumber, "IX_SYSUnAllocatedURN")
                    .IsUnique();

                entity.Property(e => e.SYSUNAllocatedURNID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SYSUniqueReferenceNumber>(entity =>
            {
                entity.ToTable("SYSUniqueReferenceNumber");

                entity.Property(e => e.SYSUniqueReferenceNumberID).ValueGeneratedNever();
            });

            modelBuilder.Entity<SYSUser>(entity =>
            {
                entity.ToTable("SYSUser");

                entity.Property(e => e.SYSUserID).ValueGeneratedNever();
            });

            modelBuilder.Entity<SYSUserLogin>(entity =>
            {
                entity.ToTable("SYSUserLogin");

                entity.HasIndex(e => e.SessionID, "IX_SessionID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSUserLoginID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LoginTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SessionID)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SYSUserPermission>(entity =>
            {
                entity.HasKey(e => e.SYSUserPermissionID)
                    .IsClustered(false);

                entity.ToTable("SYSUserPermission");

                entity.HasIndex(e => e.SYSUserID, "IX_SYSUserPermission_SYSUserID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SYSUserPermissionID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SYSUser)
                    .WithMany(p => p.SYSUserPermissions)
                    .HasForeignKey(d => d.SYSUserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SYSUserPermission_SYSUser");
            });

            modelBuilder.Entity<SabrePLAllocVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SabrePLAllocVw");

                entity.Property(e => e.AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.AllocationValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueInAccountCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sabre_BC_Productionplan_Engproj>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_BC_Productionplan_Engproj");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<Sabre_DLP_AClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sabre_DLP_AClass");

                entity.Property(e => e.Class)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sabre_DLP_Acc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sabre_DLP_Acc");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.QtyDespatched).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.fcAccuracy).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.fcError).HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<Sabre_DLP_Current_Transaction_List>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_DLP_Current_Transaction_List");

                entity.Property(e => e.AccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Expr2).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueInBaseCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GoodsValueInDocumentCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionAnalysisCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sabre_DLP_DownloadReport_KPI_TotalPoReceived>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_DLP_DownloadReport_KPI_TotalPoReceived");

                entity.Property(e => e.Total_Po_Received).HasColumnName("Total Po Received");
            });

            modelBuilder.Entity<Sabre_DLP_DownloadReport_KPI_TotalTransfersToInspection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_DLP_DownloadReport_KPI_TotalTransfersToInspection");

                entity.Property(e => e.Total_Transfers_to_Inspection).HasColumnName("Total Transfers to Inspection");
            });

            modelBuilder.Entity<Sabre_DLP_DownloadReport_Rep>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            });

            modelBuilder.Entity<Sabre_DLP_ForcastActual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_DLP_ForcastActual");

                entity.Property(e => e.Cust_Name)
                    .IsUnicode(false)
                    .HasColumnName("Cust Name");

                entity.Property(e => e.Line_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Line Qty");

                entity.Property(e => e.Stock_Code)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");
            });

            modelBuilder.Entity<Sabre_DLP_ProductionPlan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sabre_DLP_ProductionPlan");

                entity.Property(e => e.Acc_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc Name");

                entity.Property(e => e.B).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Build_Man_Hrs_Per_Op).HasColumnName("Build Man Hrs Per Op");

                entity.Property(e => e.Build_Unit_Time_min).HasColumnName("Build Unit Time/min");

                entity.Property(e => e.C).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CT).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Clean_Man_Hrs_Per_Op).HasColumnName("Clean Man Hrs Per Op");

                entity.Property(e => e.Clean_Unit_Time_min).HasColumnName("Clean Unit Time/min");

                entity.Property(e => e.Comments).HasColumnType("ntext");

                entity.Property(e => e.Component_Treatment_Man_Hrs_Per_Op).HasColumnName("Component Treatment Man Hrs Per Op");

                entity.Property(e => e.Component_Treatment_Unit_Time_min).HasColumnName("Component Treatment Unit Time/min");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.D).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Del).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Delivery_Man_Hrs_Per_Op).HasColumnName("Delivery Man Hrs Per Op");

                entity.Property(e => e.Delivery_Unit_Time_min).HasColumnName("Delivery Unit Time/min");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Dismantle_Man_Hrs_Per_Op).HasColumnName("Dismantle Man Hrs Per Op");

                entity.Property(e => e.Dismantle_Unit_Time_min).HasColumnName("Dismantle Unit Time/min");

                entity.Property(e => e.Disruption_Code)
                    .HasMaxLength(20)
                    .HasColumnName("Disruption Code");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Final_Assembly_Man_Hrs_Per_Op).HasColumnName("Final Assembly Man Hrs Per Op");

                entity.Property(e => e.Final_Assembly_Unit_Time_min).HasColumnName("Final Assembly Unit Time/min");

                entity.Property(e => e.GRN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.I).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Inspect_Man_Hrs_Per_Op).HasColumnName("Inspect Man Hrs Per Op");

                entity.Property(e => e.Inspect_Unit_Time_min).HasColumnName("Inspect Unit Time/min");

                entity.Property(e => e.Item_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Item Code");

                entity.Property(e => e.Next_Operation)
                    .HasMaxLength(60)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.P).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Pack).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Paint_Completed_Man_Hrs_Per_Op).HasColumnName("Paint Completed Man Hrs Per Op");

                entity.Property(e => e.Paint_Completed_Unit_Time_min).HasColumnName("Paint Completed Unit Time/min");

                entity.Property(e => e.Paint_Component_Man_Hrs_Per_Op).HasColumnName("Paint Component Man Hrs Per Op");

                entity.Property(e => e.Paint_Component_Unit_Time_min).HasColumnName("Paint Component Unit Time/min");

                entity.Property(e => e.Paint_Preparation_Man_Hrs_Per_Op).HasColumnName("Paint Preparation Man Hrs Per Op");

                entity.Property(e => e.Paint_Preparation_Unit_Time_min).HasColumnName("Paint Preparation Unit Time/min");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Production_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Production Start Date");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(19, 5)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SO_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SO Status");

                entity.Property(e => e.Sales_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(12, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Subassemble_Man_Hrs_Per_Op).HasColumnName("Subassemble Man Hrs Per Op");

                entity.Property(e => e.Subassemble_Unit_Time_min).HasColumnName("Subassemble Unit Time/min");

                entity.Property(e => e.T).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Test_Man_Hrs_Per_Op).HasColumnName("Test Man Hrs Per Op");

                entity.Property(e => e.Test_Unit_Time_min).HasColumnName("Test Unit Time/min");

                entity.Property(e => e.Total_Works_Order_Man_Hrs).HasColumnName("Total Works Order Man Hrs");

                entity.Property(e => e.WO_Completed_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("WO Completed Date");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.Works_Order_Status)
                    .HasMaxLength(20)
                    .HasColumnName("Works Order Status");
            });

            modelBuilder.Entity<Sabre_DLP_ProductionSchedule2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sabre_DLP_ProductionSchedule2");

                entity.Property(e => e.Acc__Name)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Acc. Name");

                entity.Property(e => e.Acc__No)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Acc. No");

                entity.Property(e => e.Batch_No)
                    .IsUnicode(false)
                    .HasColumnName("Batch No");

                entity.Property(e => e.Customer_Order_No_)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Customer Order No.");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .IsUnicode(false)
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");

                entity.Property(e => e.Next_Op_Code)
                    .IsUnicode(false)
                    .HasColumnName("Next Op Code");

                entity.Property(e => e.Next_Operation)
                    .IsUnicode(false)
                    .HasColumnName("Next Operation");

                entity.Property(e => e.Order_Status)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Order Status");

                entity.Property(e => e.Picking_List_Comment)
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasColumnName("Picking List Comment");

                entity.Property(e => e.Planned_Start_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Planned Start Date");

                entity.Property(e => e.PostCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ProjectNumber).HasMaxLength(50);

                entity.Property(e => e.Promised_Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Despatch Date");

                entity.Property(e => e.Qty_On_Site)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("Qty On Site");

                entity.Property(e => e.Reps_Due_on_Site)
                    .HasColumnType("datetime")
                    .HasColumnName("Reps Due on Site");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.Sabre_Order_No_)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sabre Order No.");

                entity.Property(e => e.Sales_Qty)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Sales Qty");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.Stock_Item_Code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Item Code");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Works_Order_No)
                    .HasMaxLength(30)
                    .HasColumnName("Works Order No");
            });

            modelBuilder.Entity<Sabre_DLP_ReorderReport_Req>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_DLP_ReorderReport_Req");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Del_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Del Date");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ManPartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Minimum_Order_Value)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Minimum Order Value");

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Standard_Carrige_Charge)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Standard Carrige Charge");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e.Usage_12_Months)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 12 Months");

                entity.Property(e => e.Usage_1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 1 Month");

                entity.Property(e => e.Usage_3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Usage 3 Month");
            });

            modelBuilder.Entity<Sabre_DLP_RepFreeStockWD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_DLP_RepFreeStockWD");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Transaction_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Transaction Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ManPartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");
            });

            modelBuilder.Entity<Sabre_DLP_SLDespatchRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_DLP_SLDespatchRole");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValue)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Role)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sabre_DLP_SageLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.LogDetails)
                    .HasMaxLength(23)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sabre_DLP_SalesSchedule>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sabre_DLP_SalesSchedule");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BR_Cat_No_)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BR Cat No.");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Customer_Document_No_)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Customer Document No.");

                entity.Property(e => e.Date_Reps_Rec_d_)
                    .IsUnicode(false)
                    .HasColumnName("Date Reps Rec'd'");

                entity.Property(e => e.Description)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Despatch_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Despatch Date");

                entity.Property(e => e.Despatch_Note_No_)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Despatch Note No.");

                entity.Property(e => e.Despatched).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.On_Site)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("On Site");

                entity.Property(e => e.Order_Qty)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Order Qty");

                entity.Property(e => e.Our_Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Our Stock Code");

                entity.Property(e => e.Outstanding_Qty)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("Outstanding Qty");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.Promised_Delivery_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Promised Delivery Date");

                entity.Property(e => e.Qty_Completed)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Qty Completed");

                entity.Property(e => e.Requested_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Requested Date");

                entity.Property(e => e.Sabre_Order_No)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Sabre Order No");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UnitSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Works_Order_No_)
                    .HasMaxLength(30)
                    .HasColumnName("Works Order No.");
            });

            modelBuilder.Entity<Sabre_DLP_StockCalSPart>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PercentInc).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ProductGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.TheoROL).HasColumnType("decimal(38, 6)");

                entity.Property(e => e._12_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12 Month");

                entity.Property(e => e._1_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("1 Month");

                entity.Property(e => e._3_Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("3 Month");
            });

            modelBuilder.Entity<Sabre_DLP_Stockreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_DLP_Stockreport");

                entity.Property(e => e.Allocated).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Issue_Type)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Issue Type");

                entity.Property(e => e.Last_Cost)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Cost");

                entity.Property(e => e.Last_Invoice_Price)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Last Invoice Price");

                entity.Property(e => e.Last_Issued_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Issued Date");

                entity.Property(e => e.Last_Received_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Last Received Date");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ManPartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Search)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.SupplierAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TheoStock).HasColumnType("decimal(17, 5)");

                entity.Property(e => e.Total_On_Order)
                    .HasColumnType("decimal(15, 5)")
                    .HasColumnName("Total On Order");

                entity.Property(e => e._12Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("12Month Usage");

                entity.Property(e => e._24Month_Usage)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("24Month Usage");

                entity.Property(e => e._36Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("36Month");

                entity.Property(e => e._60Month)
                    .HasColumnType("decimal(38, 5)")
                    .HasColumnName("60Month");
            });

            modelBuilder.Entity<Sabre_DLP_SupplierLate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Days_Late).HasColumnName("Days Late");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.Delivery_Month).HasColumnName("Delivery Month");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiptReturnDate).HasColumnType("datetime");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sabre_DLP_SupplierLatesTotal>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sabre_DLP_SupplierMonitor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sabre_DLP_SupplierMonitor");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sabre_DLP_VTG_Download_StockSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_DLP_VTG_Download_StockSum");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<Sabre_DLP_VTG_Download_WIP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_DLP_VTG_Download_WIP");

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Issued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<Sabre_DLP_VTG_Download_WarehouseStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_DLP_VTG_Download_WarehouseStock");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Stock).HasColumnType("decimal(16, 5)");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sabre_FactoryCon>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sabre_FactoryCon");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.PartNo).HasMaxLength(255);
            });

            modelBuilder.Entity<Sabre_Rail_DLP_SalesForcast_Month>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sabre_Rail_DLP_SalesForcast_Month");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.sfdCustomerCode)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.sfdProductCode)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<SagePaySetting>(entity =>
            {
                entity.ToTable("SagePaySetting");

                entity.Property(e => e.SagePaySettingID).ValueGeneratedNever();

                entity.Property(e => e.SagePayDownloadDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SagePaymentsSupplierStatus>(entity =>
            {
                entity.ToTable("SagePaymentsSupplierStatus");

                entity.Property(e => e.SagePaymentsSupplierStatusID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SagePaymentsTransactionStatus>(entity =>
            {
                entity.ToTable("SagePaymentsTransactionStatus");

                entity.Property(e => e.SagePaymentsTransactionStatusID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SalesForecastHeader>(entity =>
            {
                entity.ToTable("SalesForecastHeader");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FinancialYearBasis)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ForecastEnd).HasColumnType("datetime");

                entity.Property(e => e.ForecastStart).HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SalesForecastLine>(entity =>
            {
                entity.HasIndex(e => e.HeaderID, "IX_SalesForecastLines_HeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ForecastDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SellingPrice).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.SalesForecastLines)
                    .HasForeignKey(d => d.HeaderID)
                    .HasConstraintName("FK_SalesForecastLines_SalesForecastHeader");
            });

            modelBuilder.Entity<Salutation>(entity =>
            {
                entity.ToTable("Salutation");

                entity.Property(e => e.SalutationID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SearchCategory>(entity =>
            {
                entity.ToTable("SearchCategory");

                entity.HasIndex(e => e.Name, "IX_SearchCategory_Name")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SearchCategoryID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SearchValue>(entity =>
            {
                entity.ToTable("SearchValue");

                entity.HasIndex(e => new { e.SearchCategoryID, e.Name }, "IX_SearchValue_SearchCategoryID_Name")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SearchValueID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SearchCategory)
                    .WithMany(p => p.SearchValues)
                    .HasForeignKey(d => d.SearchCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SearchValue_SearchCategory");
            });

            modelBuilder.Entity<Setup>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_SetupPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("Setup");

                entity.Property(e => e.AddtDescOnPickList).HasDefaultValueSql("((0))");

                entity.Property(e => e.AdviceNotePrefix)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AdvicePrefix)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AdviceZeros).HasDefaultValueSql("((0))");

                entity.Property(e => e.AllocIssueAtReceive).HasDefaultValueSql("((0))");

                entity.Property(e => e.AllocWOsOnCreation).HasDefaultValueSql("((0))");

                entity.Property(e => e.AllowBatchAllocating).HasDefaultValueSql("((0))");

                entity.Property(e => e.AllowBatchFinishing).HasDefaultValueSql("((0))");

                entity.Property(e => e.AllowBatchIssuing).HasDefaultValueSql("((0))");

                entity.Property(e => e.AllowCrossMachinePlanning).HasDefaultValueSql("((1))");

                entity.Property(e => e.AllowOpTimeMod).HasDefaultValueSql("((1))");

                entity.Property(e => e.AllowPFUnderIss).HasDefaultValueSql("((0))");

                entity.Property(e => e.AllowableVariance).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AlwaysCostSAs).HasDefaultValueSql("((0))");

                entity.Property(e => e.AttachDrawRevPo).HasDefaultValueSql("((0))");

                entity.Property(e => e.AuditTrailBomCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoActuals).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoActualsInterval).HasDefaultValueSql("((10000))");

                entity.Property(e => e.AutoAllocSOrderWOComp).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoAllocWOrdersGRN).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoDeleteWorksOrders).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoEstimateNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoJobNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoPlanNumber)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoTransferProspect).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoUpdDateTime).HasColumnType("datetime");

                entity.Property(e => e.AutoUpdEnd).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoUpdJobInv).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoUpdStart).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutoUpdUser).HasMaxLength(30);

                entity.Property(e => e.AutoWONumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.AverageOrLastCost).HasDefaultValueSql("((1))");

                entity.Property(e => e.BOMVersioning)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BackupTool).HasColumnType("ntext");

                entity.Property(e => e.BackupUncPath).HasColumnType("ntext");

                entity.Property(e => e.BatchTotalChecking).HasDefaultValueSql("((1))");

                entity.Property(e => e.BomCostAtSave).HasDefaultValueSql("((0))");

                entity.Property(e => e.BomCustomLabel_1)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#1");

                entity.Property(e => e.BomCustomLabel_10)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#10");

                entity.Property(e => e.BomCustomLabel_2)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#2");

                entity.Property(e => e.BomCustomLabel_3)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#3");

                entity.Property(e => e.BomCustomLabel_4)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#4");

                entity.Property(e => e.BomCustomLabel_5)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#5");

                entity.Property(e => e.BomCustomLabel_6)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#6");

                entity.Property(e => e.BomCustomLabel_7)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#7");

                entity.Property(e => e.BomCustomLabel_8)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#8");

                entity.Property(e => e.BomCustomLabel_9)
                    .HasMaxLength(20)
                    .HasColumnName("BomCustomLabel#9");

                entity.Property(e => e.BomPutOnOrder).HasDefaultValueSql("((1))");

                entity.Property(e => e.CItMessConfirmation).HasMaxLength(30);

                entity.Property(e => e.CItMessEmpNotFound).HasMaxLength(30);

                entity.Property(e => e.CItMessEnterOpRef).HasMaxLength(30);

                entity.Property(e => e.CItMessEnterOpTime).HasMaxLength(30);

                entity.Property(e => e.CItMessEnterQty).HasMaxLength(30);

                entity.Property(e => e.CItMessEnterStageRef).HasMaxLength(30);

                entity.Property(e => e.CItMessEnterWOrder).HasMaxLength(30);

                entity.Property(e => e.CItMessLogoff).HasMaxLength(30);

                entity.Property(e => e.CItMessLogon).HasMaxLength(30);

                entity.Property(e => e.CItMessOpNotFound).HasMaxLength(30);

                entity.Property(e => e.CItMessStgNotFound).HasMaxLength(30);

                entity.Property(e => e.CItMessWOrderNotFound).HasMaxLength(30);

                entity.Property(e => e.CItOpSelect).HasDefaultValueSql("((0))");

                entity.Property(e => e.CItTimeMethod).HasDefaultValueSql("((0))");

                entity.Property(e => e.CartonLabel).HasMaxLength(20);

                entity.Property(e => e.CertPrefix)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChangeEstAfterJob).HasDefaultValueSql("((0))");

                entity.Property(e => e.ChangePassword).HasMaxLength(30);

                entity.Property(e => e.CheckReorderQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.CombinePickList).HasDefaultValueSql("((0))");

                entity.Property(e => e.CombineTbmItemsOnPlan)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ComponentStart).HasDefaultValueSql("((0))");

                entity.Property(e => e.ComponentStep).HasDefaultValueSql("((0))");

                entity.Property(e => e.ComponentStockSequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.CompsOnWoDocs).HasDefaultValueSql("((0))");

                entity.Property(e => e.ConflictThisPlan).HasDefaultValueSql("((1))");

                entity.Property(e => e.ConformityMessage).HasColumnType("ntext");

                entity.Property(e => e.CopyAttDocs).HasDefaultValueSql("((0))");

                entity.Property(e => e.CosCredit).HasMaxLength(8);

                entity.Property(e => e.CosDebit).HasMaxLength(8);

                entity.Property(e => e.CostOnTrialBuild).HasDefaultValueSql("((1))");

                entity.Property(e => e.CostingAction).HasDefaultValueSql("((0))");

                entity.Property(e => e.CostingBaseQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreateSOAtTransfer).HasDefaultValueSql("((0))");

                entity.Property(e => e.DaysPerWeek).HasDefaultValueSql("((0))");

                entity.Property(e => e.DefaultHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelNotePreZeros).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelNotePrefix)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.EstAnalysis_1)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#1");

                entity.Property(e => e.EstAnalysis_2)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#2");

                entity.Property(e => e.EstAnalysis_3)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#3");

                entity.Property(e => e.EstAnalysis_4)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#4");

                entity.Property(e => e.EstAnalysis_5)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#5");

                entity.Property(e => e.EstBomStgDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('Bill of Materials')");

                entity.Property(e => e.EstBomStgReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('BOM')");

                entity.Property(e => e.EstFastDefaultStageDesc)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('DEFAULT')");

                entity.Property(e => e.EstFastDefaultStageRef)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('DEFAULT')");

                entity.Property(e => e.EstPreZeros).HasDefaultValueSql("((0))");

                entity.Property(e => e.EstSeqDecimals).HasDefaultValueSql("((2))");

                entity.Property(e => e.EstSeqStart).HasDefaultValueSql("((1))");

                entity.Property(e => e.EstSeqStep).HasDefaultValueSql("((1))");

                entity.Property(e => e.EstimatePrefix)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EstimateSeparator)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.EstimateasJobNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.FilterCancelPo)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FilterCancelWo)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FinancialMonth).HasDefaultValueSql("((1))");

                entity.Property(e => e.FirmPlanningPeriodPo).HasDefaultValueSql("((7))");

                entity.Property(e => e.FirmPlanningPeriodWo).HasDefaultValueSql("((7))");

                entity.Property(e => e.FriEnd).HasColumnType("datetime");

                entity.Property(e => e.FriHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.FriMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.FriStart).HasColumnType("datetime");

                entity.Property(e => e.GRNPrefix).HasMaxLength(10);

                entity.Property(e => e.GpMrpSyncComputerName).HasMaxLength(30);

                entity.Property(e => e.GpMrpSyncDateTime).HasColumnType("datetime");

                entity.Property(e => e.GpMrpSyncUserName).HasMaxLength(30);

                entity.Property(e => e.GrnLabelsQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.GrnLabelsToQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.GrnOnPickingList).HasDefaultValueSql("((0))");

                entity.Property(e => e.GrnZeros).HasDefaultValueSql("((0))");

                entity.Property(e => e.IgnoreNonWorkingPeriods).HasDefaultValueSql("((0))");

                entity.Property(e => e.IncLabSetup).HasDefaultValueSql("((0))");

                entity.Property(e => e.IncludeMiscStockItemCosts).HasDefaultValueSql("((0))");

                entity.Property(e => e.InternetProgram).HasColumnType("ntext");

                entity.Property(e => e.IssueStkDefAsMuch).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemisedBilling).HasDefaultValueSql("((0))");

                entity.Property(e => e.JitScan).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobDocsByStage).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobPreZeros).HasDefaultValueSql("((0))");

                entity.Property(e => e.JobPrefix)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabCredit).HasMaxLength(8);

                entity.Property(e => e.LabDebit).HasMaxLength(8);

                entity.Property(e => e.LabourCredit)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourDebit)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourPeopleCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastFileMaintDate).HasColumnType("datetime");

                entity.Property(e => e.LastFileMaintUser).HasMaxLength(30);

                entity.Property(e => e.Line50Link).HasDefaultValueSql("((1))");

                entity.Property(e => e.LineByLineMarkup).HasDefaultValueSql("((0))");

                entity.Property(e => e.LunchEnd).HasColumnType("datetime");

                entity.Property(e => e.LunchHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.LunchMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.LunchStart).HasColumnType("datetime");

                entity.Property(e => e.MachCredit).HasMaxLength(8);

                entity.Property(e => e.MachDebit).HasMaxLength(8);

                entity.Property(e => e.MachineMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ManualSelection).HasDefaultValueSql("((0))");

                entity.Property(e => e.MarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MonEnd).HasColumnType("datetime");

                entity.Property(e => e.MonHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.MonMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.MonStart).HasColumnType("datetime");

                entity.Property(e => e.MonitorCaptureIT).HasDefaultValueSql("((0))");

                entity.Property(e => e.MoveItemOpsTogether).HasDefaultValueSql("((1))");

                entity.Property(e => e.MpsLastReadDemand).HasColumnType("datetime");

                entity.Property(e => e.MpsLastRun).HasColumnType("datetime");

                entity.Property(e => e.MpsLastRunBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MpsLastRunIncrementPeriod)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MrpAggregationMethod).HasDefaultValueSql("((1))");

                entity.Property(e => e.MrpLastRun).HasColumnType("datetime");

                entity.Property(e => e.MrpLastRunBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MrpUsageLevelsUpdated).HasColumnType("datetime");

                entity.Property(e => e.NSCredit).HasMaxLength(8);

                entity.Property(e => e.NSDebit).HasMaxLength(8);

                entity.Property(e => e.NSUpdate).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NextAdviceNoteNo).HasDefaultValueSql("((1))");

                entity.Property(e => e.NextAdviceNoteNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.NextCertNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.NextDelNoteNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.NextEstimateNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.NextGRNNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.NextJobNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.NextPlanNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.NextReturnsNoteNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.NextWONumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.NilCostPrompt).HasDefaultValueSql("((1))");

                entity.Property(e => e.NilLevelPrompt).HasDefaultValueSql("((1))");

                entity.Property(e => e.NominalIdLabour).HasDefaultValueSql("((0))");

                entity.Property(e => e.NominalIdMachine).HasDefaultValueSql("((0))");

                entity.Property(e => e.NominalIdNonStock).HasDefaultValueSql("((0))");

                entity.Property(e => e.NominalIdOhr).HasDefaultValueSql("((0))");

                entity.Property(e => e.NominalIdOtherExpenses).HasDefaultValueSql("((0))");

                entity.Property(e => e.NominalIdSetup).HasDefaultValueSql("((0))");

                entity.Property(e => e.NominalIdSubContVariance).HasDefaultValueSql("((0))");

                entity.Property(e => e.NominalIdSubContract).HasDefaultValueSql("((0))");

                entity.Property(e => e.NominalIdTooling).HasDefaultValueSql("((0))");

                entity.Property(e => e.NominalIdWip).HasDefaultValueSql("((0))");

                entity.Property(e => e.NonStockMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NotCostedSince).HasColumnType("datetime");

                entity.Property(e => e.NotesLabel_1)
                    .HasMaxLength(20)
                    .HasColumnName("NotesLabel#1");

                entity.Property(e => e.NotesLabel_2)
                    .HasMaxLength(20)
                    .HasColumnName("NotesLabel#2");

                entity.Property(e => e.NotesLabel_3)
                    .HasMaxLength(20)
                    .HasColumnName("NotesLabel#3");

                entity.Property(e => e.NumberStaff).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumberWorkingHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.NumberWorkingMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ODBCName).HasMaxLength(50);

                entity.Property(e => e.OECredit).HasMaxLength(8);

                entity.Property(e => e.OEDebit).HasMaxLength(8);

                entity.Property(e => e.OEUpdate).HasDefaultValueSql("((0))");

                entity.Property(e => e.OHeadCredit).HasMaxLength(8);

                entity.Property(e => e.OHeadDebit).HasMaxLength(8);

                entity.Property(e => e.OHeadRecoveryLab).HasDefaultValueSql("((0))");

                entity.Property(e => e.OHeadRecoveryMach).HasDefaultValueSql("((0))");

                entity.Property(e => e.OHeadRecoveryMat).HasDefaultValueSql("((0))");

                entity.Property(e => e.OHeadRecoveryNS).HasDefaultValueSql("((0))");

                entity.Property(e => e.OHeadRecoveryOE).HasDefaultValueSql("((0))");

                entity.Property(e => e.OHeadRecoveryPcnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OHeadRecoverySet).HasDefaultValueSql("((0))");

                entity.Property(e => e.OHeadRecoverySub).HasDefaultValueSql("((0))");

                entity.Property(e => e.OHeadRecoveryTool).HasDefaultValueSql("((0))");

                entity.Property(e => e.OHeadRecoveryTotal).HasDefaultValueSql("((0))");

                entity.Property(e => e.OnOrderWOrderUsage).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpTimeBarcoding).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpTimePreventMultipleLogon).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpTimeQtyDec).HasDefaultValueSql("((2))");

                entity.Property(e => e.OpTimeUnitDec).HasDefaultValueSql("((2))");

                entity.Property(e => e.OpeningGRNNumber).HasMaxLength(30);

                entity.Property(e => e.OtherMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PIBTChecking).HasDefaultValueSql("((0))");

                entity.Property(e => e.POOnOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.PayrollLink).HasDefaultValueSql("((0))");

                entity.Property(e => e.PerformStockConversion).HasDefaultValueSql("((0))");

                entity.Property(e => e.PickListSort).HasDefaultValueSql("((0))");

                entity.Property(e => e.PlanPrefix).HasMaxLength(10);

                entity.Property(e => e.PlanZeros).HasDefaultValueSql("((0))");

                entity.Property(e => e.PostOpCostsTransfer).HasDefaultValueSql("((0))");

                entity.Property(e => e.PostPhantomCosts).HasDefaultValueSql("((1))");

                entity.Property(e => e.PostSInvAppPayment).HasDefaultValueSql("((0))");

                entity.Property(e => e.PostSItoLine50).HasMaxLength(2);

                entity.Property(e => e.PostUnitCostOnCosting).HasDefaultValueSql("((0))");

                entity.Property(e => e.PreactorExportMrp)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorExportPo)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorExportPoRec)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorExportPriRes)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorExportSecRes)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorExportSf)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorExportSo)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorExportStk)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorExportStockCat)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorExportVacations)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorExportWo)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorExportWoBomComps)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorPoPassDates)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PreactorWoPassDates)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrintA4)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrintBarCodeOnWoLabel).HasDefaultValueSql("((0))");

                entity.Property(e => e.PrintBarcodesOnWoDocs).HasDefaultValueSql("((0))");

                entity.Property(e => e.PrintDrawingsOnWoDocs)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrintGrnsOnDelNote).HasDefaultValueSql("((0))");

                entity.Property(e => e.PrintJobSheets).HasDefaultValueSql("((1))");

                entity.Property(e => e.PrintOperationCards).HasDefaultValueSql("((1))");

                entity.Property(e => e.PrintPickingLists).HasDefaultValueSql("((1))");

                entity.Property(e => e.PrintRouteCards).HasDefaultValueSql("((1))");

                entity.Property(e => e.ProcessReferenceSequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessStart).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessStep).HasDefaultValueSql("((0))");

                entity.Property(e => e.PromisLink).HasDefaultValueSql("((0))");

                entity.Property(e => e.PutOnOrder).HasDefaultValueSql("((1))");

                entity.Property(e => e.QtyCalcLabelInput)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('INPUT VALUE')");

                entity.Property(e => e.QtyCalcLabel_1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("QtyCalcLabel#1")
                    .HasDefaultValueSql("('A')");

                entity.Property(e => e.QtyCalcLabel_2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("QtyCalcLabel#2")
                    .HasDefaultValueSql("('B')");

                entity.Property(e => e.QtyCalcLabel_3)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("QtyCalcLabel#3")
                    .HasDefaultValueSql("('C')");

                entity.Property(e => e.QtyCalcLabel_4)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("QtyCalcLabel#4")
                    .HasDefaultValueSql("('D')");

                entity.Property(e => e.QtyCalcLabel_5)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("QtyCalcLabel#5")
                    .HasDefaultValueSql("('E')");

                entity.Property(e => e.QtyCalcOperator_1)
                    .HasColumnName("QtyCalcOperator#1")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.QtyCalcOperator_2)
                    .HasColumnName("QtyCalcOperator#2")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.QtyCalcOperator_3)
                    .HasColumnName("QtyCalcOperator#3")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.QtyCalcOperator_4)
                    .HasColumnName("QtyCalcOperator#4")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.QtyCalcOperator_5)
                    .HasColumnName("QtyCalcOperator#5")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.QtyCalcPercent_1).HasColumnName("QtyCalcPercent#1");

                entity.Property(e => e.QtyCalcPercent_2).HasColumnName("QtyCalcPercent#2");

                entity.Property(e => e.QtyCalcPercent_3).HasColumnName("QtyCalcPercent#3");

                entity.Property(e => e.QtyCalcPercent_4).HasColumnName("QtyCalcPercent#4");

                entity.Property(e => e.QtyCalcPercent_5).HasColumnName("QtyCalcPercent#5");

                entity.Property(e => e.QtyCalcValue_1)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("QtyCalcValue#1");

                entity.Property(e => e.QtyCalcValue_2)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("QtyCalcValue#2");

                entity.Property(e => e.QtyCalcValue_3)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("QtyCalcValue#3");

                entity.Property(e => e.QtyCalcValue_4)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("QtyCalcValue#4");

                entity.Property(e => e.QtyCalcValue_5)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("QtyCalcValue#5");

                entity.Property(e => e.QtyDP).HasDefaultValueSql("((2))");

                entity.Property(e => e.Quarantine).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReceiveMultiDepots).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReceiveQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.ReceiveWizard).HasDefaultValueSql("((0))");

                entity.Property(e => e.RestrictDepots).HasDefaultValueSql("((0))");

                entity.Property(e => e.RetnDept).HasDefaultValueSql("((0))");

                entity.Property(e => e.RetnNomCode).HasMaxLength(8);

                entity.Property(e => e.RetroBatchOpTimes).HasDefaultValueSql("((1))");

                entity.Property(e => e.ReturnsNotePrefix)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SICredit).HasMaxLength(8);

                entity.Property(e => e.SIDebit).HasMaxLength(8);

                entity.Property(e => e.SIUpdateNominal).HasDefaultValueSql("((1))");

                entity.Property(e => e.SatEnd).HasColumnType("datetime");

                entity.Property(e => e.SatHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SatMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SatStart).HasColumnType("datetime");

                entity.Property(e => e.ScheduleAfter).HasDefaultValueSql("((3))");

                entity.Property(e => e.SchedulePrior).HasDefaultValueSql("((2))");

                entity.Property(e => e.SchemaLastChange).HasColumnType("datetime");

                entity.Property(e => e.SchemaLastRun).HasColumnType("datetime");

                entity.Property(e => e.SchemaLastRunComputer)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SchemaLastRunUser)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SequenceDecimalPlaces).HasDefaultValueSql("((2))");

                entity.Property(e => e.SettingsMigrated)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SetupCredit).HasMaxLength(8);

                entity.Property(e => e.SetupDebit).HasMaxLength(8);

                entity.Property(e => e.SetupMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SfSoNettingInBuckets)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowCompCancSchedule).HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowLatestCostsOnFinish).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShowNonWorkingPeriods).HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowSalesOrderItems).HasDefaultValueSql("((0))");

                entity.Property(e => e.ShowSoStatusOnPlanRecord)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SoComments).HasDefaultValueSql("((0))");

                entity.Property(e => e.SoLeeway).HasDefaultValueSql("((0))");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StockProjectionLastRun).HasColumnType("datetime");

                entity.Property(e => e.SubContractCredit).HasMaxLength(8);

                entity.Property(e => e.SubContractDebit).HasMaxLength(8);

                entity.Property(e => e.SubContractMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SummariseBuildNominals).HasDefaultValueSql("((0))");

                entity.Property(e => e.SunEnd).HasColumnType("datetime");

                entity.Property(e => e.SunHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SunMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SunStart).HasColumnType("datetime");

                entity.Property(e => e.SuppressIssuedItems).HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppressZeroToOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.SuppressZeroToOrderBom).HasDefaultValueSql("((0))");

                entity.Property(e => e.TBReqsBasedOnStock).HasDefaultValueSql("((1))");

                entity.Property(e => e.TSheetBatchTotalCheck).HasDefaultValueSql("((1))");

                entity.Property(e => e.TSheetDefHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.TSheetDefMachTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.ThurEnd).HasColumnType("datetime");

                entity.Property(e => e.ThurHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.ThurMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ThurStart).HasColumnType("datetime");

                entity.Property(e => e.TimeFence_1)
                    .HasColumnName("TimeFence#1")
                    .HasDefaultValueSql("((7))");

                entity.Property(e => e.TimeFence_2)
                    .HasColumnName("TimeFence#2")
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.ToolingCredit).HasMaxLength(8);

                entity.Property(e => e.ToolingDebit).HasMaxLength(8);

                entity.Property(e => e.ToolingMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TopLevelBom)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TrialBuildDefault).HasDefaultValueSql("((2))");

                entity.Property(e => e.TueEnd).HasColumnType("datetime");

                entity.Property(e => e.TueHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.TueMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.TueStart).HasColumnType("datetime");

                entity.Property(e => e.UnitDP).HasDefaultValueSql("((2))");

                entity.Property(e => e.UpdNom).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdPmPbcNone).HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdateStockCostRaisePOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.UseBatchOpTimePosting).HasDefaultValueSql("((1))");

                entity.Property(e => e.UseEmployeeRate).HasDefaultValueSql("((0))");

                entity.Property(e => e.UseMrpReqs).HasDefaultValueSql("((1))");

                entity.Property(e => e.Version).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.WOPrefix).HasMaxLength(10);

                entity.Property(e => e.WarnDuplComp).HasDefaultValueSql("((0))");

                entity.Property(e => e.WebAddress).HasColumnType("ntext");

                entity.Property(e => e.WedEnd).HasColumnType("datetime");

                entity.Property(e => e.WedHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.WedMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.WedStart).HasColumnType("datetime");

                entity.Property(e => e.WeightLabel).HasMaxLength(20);

                entity.Property(e => e.WipCredit).HasMaxLength(8);

                entity.Property(e => e.WipDebit).HasMaxLength(8);

                entity.Property(e => e.WoLabelQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.WoLabelsToQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.WoListSo).HasDefaultValueSql("((0))");

                entity.Property(e => e.WoPassword).HasMaxLength(30);

                entity.Property(e => e.WoZeros).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SfdcCurrentlyProcessing>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_SfdcCurrProcPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("SfdcCurrentlyProcessing");

                entity.HasIndex(e => new { e.WoRecNo, e.StgRecNo, e.OpRecNo, e.EmployeeNumber }, "IX_SfdcCurrProcWo+Stg+Op+Emp")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.EmployeeNumber)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.JobRecNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.LoggedOn).HasColumnType("datetime");

                entity.Property(e => e.OpRecNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.StgRecNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.WoRecNo).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SfdcOperationTime>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_SfdcOpTimesPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.OpRecNo, "IX_SfdcOpTimesHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualLabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ActualMachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ActualSetupMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ActualSubMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.CategoryDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CategoryReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmployeeNumber)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");

                entity.Property(e => e.JobRecNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabCredit).HasMaxLength(8);

                entity.Property(e => e.LabDebit).HasMaxLength(8);

                entity.Property(e => e.LabourEnd).HasColumnType("datetime");

                entity.Property(e => e.LabourRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourStart).HasColumnType("datetime");

                entity.Property(e => e.MachCredit).HasMaxLength(8);

                entity.Property(e => e.MachDebit).HasMaxLength(8);

                entity.Property(e => e.MachineEnd).HasColumnType("datetime");

                entity.Property(e => e.MachineRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineStart).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.OpDescription).HasMaxLength(60);

                entity.Property(e => e.OpRecNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.OpReference).HasMaxLength(30);

                entity.Property(e => e.PieceWorkQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWorkRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupCredit).HasMaxLength(8);

                entity.Property(e => e.SetupDebit).HasMaxLength(8);

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StageReference).HasMaxLength(30);

                entity.Property(e => e.StgRecNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName).HasMaxLength(30);

                entity.Property(e => e.WoRecNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.WoReference).HasMaxLength(30);
            });

            modelBuilder.Entity<ShowOnPickingListType>(entity =>
            {
                entity.ToTable("ShowOnPickingListType");

                entity.Property(e => e.ShowOnPickingListTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SourceAnalysisGroup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.cn_cat).HasMaxLength(255);

                entity.Property(e => e.cn_cat2).HasMaxLength(255);

                entity.Property(e => e.cn_ref).HasMaxLength(255);
            });

            modelBuilder.Entity<SourceAreaType>(entity =>
            {
                entity.ToTable("SourceAreaType");

                entity.Property(e => e.SourceAreaTypeID).ValueGeneratedNever();

                entity.Property(e => e.SourceAreaTypeName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StandardCostVariance>(entity =>
            {
                entity.ToTable("StandardCostVariance");

                entity.HasIndex(e => e.StockItemID, "IX_StandardCostVariance_StockItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StandardCostVarianceID).ValueGeneratedNever();

                entity.Property(e => e.CostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CumulativeVariance).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.StockItem)
                    .WithMany(p => p.StandardCostVariances)
                    .HasForeignKey(d => d.StockItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StandardCostVariance_StockItem");
            });

            modelBuilder.Entity<StgTempMaterial>(entity =>
            {
                entity.HasIndex(e => e.HeaderID, "IX_StgTempMaterials_HeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemUnitID, "IX_StgTempMaterials_StockItemUnitID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LineUnitQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierAccRef)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfSale).HasMaxLength(50);

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.StgTempMaterials)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_StgTempMaterials_StgTempStages");
            });

            modelBuilder.Entity<StgTempNonStock>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_StgTempNonStkPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("StgTempNonStock");

                entity.HasIndex(e => e.HeaderID, "IX_StgTempNonStkHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Delivered).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LeadTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SupplierAccRef).HasMaxLength(8);

                entity.Property(e => e.SupplierRef).HasMaxLength(30);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfSale)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.StgTempNonStocks)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("StgTempNonStock_FK00");
            });

            modelBuilder.Entity<StgTempOperation>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_StgTempOpPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.HeaderID, e.ProcessReference }, "IX_StgTempOpHeader+Process")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence }, "IX_StgTempOpHeader+Sequence")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_StgTempOpHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CalcLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcSubContractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DelayHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelayMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupHrs).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LabourReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Overlap).HasDefaultValueSql("((0))");

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProcessDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ProcessTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RunTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.RunTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContDetails)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubContractProcess_).HasColumnName("SubContractProcess?");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.StgTempOperations)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("StgTempOperations_FK00");
            });

            modelBuilder.Entity<StgTempOtherExpense>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_StgTempOthExpPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_StgTempOthExpHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TypeDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TypeReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UnitOfSale)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.StgTempOtherExpenses)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("StgTempOtherExpenses_FK00");
            });

            modelBuilder.Entity<StgTempStage>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_StgTempStgPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.Reference, "IX_StgTempStgReference")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OHeadRecoveryAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.SetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<StockHistoryShortfall>(entity =>
            {
                entity.HasKey(e => e.StockHistoryShortfallID)
                    .IsClustered(false);

                entity.ToTable("StockHistoryShortfall");

                entity.HasIndex(e => e.StockHistoryShortfallID, "StockHistoryShortfallCI")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StockHistoryShortfallID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.MovementBalance)
                    .WithMany(p => p.StockHistoryShortfalls)
                    .HasForeignKey(d => d.MovementBalanceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockHistoryShortfall_MovementBalance");

                entity.HasOne(d => d.TransactionHistory)
                    .WithMany(p => p.StockHistoryShortfalls)
                    .HasForeignKey(d => d.TransactionHistoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockHistoryShortfall_TransactionHistory");
            });

            modelBuilder.Entity<StockItem>(entity =>
            {
                entity.HasKey(e => e.ItemID);

                entity.ToTable("StockItem");

                entity.HasIndex(e => e.BOMItemTypeID, "IX_StockItem_BOMItemTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Code, "IX_StockItem_Code")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Name, "IX_StockItem_Name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ProductGroupID, "IX_StockItem_ProductGroupID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SOPOrderFulfilmentMethodID, "IX_StockItem_SOPOrderFulfillmentMethodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemStatusID, "IX_StockItem_StockItemStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TaxCodeID, "IX_StockItem_TaxCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableTypeID, "IX_StockItem_TraceableTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ItemID, e.Code }, "_dta_index_StockItem_18_1031674723__K1_K2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Code, e.ItemID, e.ProductGroupID }, "_dta_index_StockItem_18_1031674723__K2_K1_K4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ItemID).ValueGeneratedNever();

                entity.Property(e => e.AllowSalesOrder)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutoGeneratePrefix)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BOMItemTypeID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BaseUnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommodityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultDespatchNoteComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DefaultPickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FreeStockQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.InactiveDate).HasColumnType("datetime");

                entity.Property(e => e.IncludeNosOnCountSheets)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LandedCostsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.LastTraceArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SOPItemPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.STKAutoGenerateSeparatorID).HasDefaultValueSql("((1))");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StandardCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StdCostVarianceLastReset).HasColumnType("datetime");

                entity.Property(e => e.StockMultOfBaseUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SupplementaryUnitConversionRatio)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Weight).HasColumnType("decimal(15, 4)");

                entity.HasOne(d => d.BOMItemType)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.BOMItemTypeID)
                    .HasConstraintName("FK_StockItem_BOMItemType");

                entity.HasOne(d => d.CountryOfOrigin)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.CountryOfOriginID)
                    .HasConstraintName("FK_StockItem_SYSCountryCode");

                entity.HasOne(d => d.LandedCostsType)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.LandedCostsTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItem_LandedCostsType");

                entity.HasOne(d => d.ProductGroup)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.ProductGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItem_ProductGroup");

                entity.HasOne(d => d.SOPOrderFulfilmentMethod)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.SOPOrderFulfilmentMethodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItem_SOPOrderFulfilmentMethod");

                entity.HasOne(d => d.STKAutoGenerateOptionType)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.STKAutoGenerateOptionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItem_STKAutoGenerateOptionTypeID");

                entity.HasOne(d => d.STKAutoGenerateSeparator)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.STKAutoGenerateSeparatorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItem_STKAutoGenerateSeparator");

                entity.HasOne(d => d.STKFulfilmentSequenceType)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.STKFulfilmentSequenceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItem_STKFulfilmentSequenceTypeID");

                entity.HasOne(d => d.STKLabelPrintingOptionType)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.STKLabelPrintingOptionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItem_STKLabelPrintingOptionTypeID");

                entity.HasOne(d => d.STKShelfLifeType)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.STKShelfLifeTypeID)
                    .HasConstraintName("FK_StockItem_ShelfLifeTypeID");

                entity.HasOne(d => d.StockItemStatus)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.StockItemStatusID)
                    .HasConstraintName("FK_StockItem_StockItemStatus");

                entity.HasOne(d => d.TaxCode)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.TaxCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItem_SYSTaxRate");

                entity.HasOne(d => d.TraceableType)
                    .WithMany(p => p.StockItems)
                    .HasForeignKey(d => d.TraceableTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItem_TraceableType");
            });

            modelBuilder.Entity<StockItemAverageCostHistory>(entity =>
            {
                entity.ToTable("StockItemAverageCostHistory");

                entity.Property(e => e.StockItemAverageCostHistoryID).ValueGeneratedNever();

                entity.Property(e => e.AverageCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChangedDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StockItemAverageCostHistories)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemAverageCostHistory_StockItem");
            });

            modelBuilder.Entity<StockItemCrossSellItem>(entity =>
            {
                entity.HasKey(e => e.StockItemCrossSellItemID)
                    .IsClustered(false);

                entity.ToTable("StockItemCrossSellItem");

                entity.HasIndex(e => new { e.ItemID, e.LineTypeID, e.ItemCrossSellItemID }, "IX_StockItemCrossSellItem_ItemCrossSellItemID")
                    .IsClustered();

                entity.Property(e => e.StockItemCrossSellItemID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ItemCrossSellItem)
                    .WithMany(p => p.StockItemCrossSellItemItemCrossSellItems)
                    .HasForeignKey(d => d.ItemCrossSellItemID)
                    .HasConstraintName("FK_StockItemCrossSellItem_StockItem2");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StockItemCrossSellItemItems)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemCrossSellItem_StockItem");

                entity.HasOne(d => d.LineType)
                    .WithMany(p => p.StockItemCrossSellItems)
                    .HasForeignKey(d => d.LineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemCrossSellItem_LineTypeID");
            });

            modelBuilder.Entity<StockItemDiscount>(entity =>
            {
                entity.ToTable("StockItemDiscount");

                entity.HasIndex(e => e.CurrencyID, "IX_StockItemDiscount_CurrencyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DiscountTypeID, "IX_StockItemDiscount_DiscountTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Name, "IX_StockItemDiscount_Name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_StockItemDiscount_StockItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.StockItemUnitID, e.Name }, "IX_StockItemDiscount_StockItemUnitID_Name")
                    .IsUnique();

                entity.Property(e => e.StockItemDiscountID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.StockItemDiscounts)
                    .HasForeignKey(d => d.CurrencyID)
                    .HasConstraintName("FK_StockItemDiscount_SYSCurrency");

                entity.HasOne(d => d.DiscountType)
                    .WithMany(p => p.StockItemDiscounts)
                    .HasForeignKey(d => d.DiscountTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemDiscount_DiscountType");

                entity.HasOne(d => d.StockItem)
                    .WithMany(p => p.StockItemDiscounts)
                    .HasForeignKey(d => d.StockItemID)
                    .HasConstraintName("FK_StockItemDiscount_StockItem");

                entity.HasOne(d => d.StockItemUnit)
                    .WithMany(p => p.StockItemDiscounts)
                    .HasForeignKey(d => d.StockItemUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemDiscount_StockItemUnit");
            });

            modelBuilder.Entity<StockItemMemo>(entity =>
            {
                entity.ToTable("StockItemMemo");

                entity.HasIndex(e => e.ItemID, "IX_StockItemMemo_ItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StockItemMemoID).ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MemoCreatedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MemoText)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TimeAndDateMemoCreated).HasColumnType("datetime");

                entity.Property(e => e.TimeAndDateMemoLastUpdated).HasColumnType("datetime");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StockItemMemos)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemMemo_StockItem");
            });

            modelBuilder.Entity<StockItemNominalCode>(entity =>
            {
                entity.HasKey(e => new { e.ItemID, e.NominalUsageID });

                entity.ToTable("StockItemNominalCode");

                entity.HasIndex(e => e.NominalCodeID, "IX_StockItemNominalCode_NominalCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NominalUsageID, "IX_StockItemNominalCode_NominalUsageID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemNominalCodeID, "IX_StockItemNominalCode_StockItemNominalCodeID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StockItemNominalCodes)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemNominalCode_StockItem");

                entity.HasOne(d => d.NominalCode)
                    .WithMany(p => p.StockItemNominalCodes)
                    .HasForeignKey(d => d.NominalCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemNominalCode_NLNominalAccount");

                entity.HasOne(d => d.NominalUsage)
                    .WithMany(p => p.StockItemNominalCodes)
                    .HasForeignKey(d => d.NominalUsageID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemNominalCode_NominalUsage");
            });

            modelBuilder.Entity<StockItemPeriodBalance>(entity =>
            {
                entity.HasKey(e => new { e.ItemID, e.BalancePeriodID });

                entity.ToTable("StockItemPeriodBalance");

                entity.HasIndex(e => e.BalancePeriodID, "IX_StockItemPeriodBalance_BalancePeriodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ItemID, "IX_StockItemPeriodBalance_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemPeriodBalanceID, "IX_StockItemPeriodBalance_StockItemPeriodBalanceID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CostValueSold).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityPurchased).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantitySold).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SalesValueSold).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValuePurchased).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.BalancePeriod)
                    .WithMany(p => p.StockItemPeriodBalances)
                    .HasForeignKey(d => d.BalancePeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemPeriodBalance_BalancePeriod");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StockItemPeriodBalances)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemPeriodBalances_StockItem");
            });

            modelBuilder.Entity<StockItemPrice>(entity =>
            {
                entity.HasKey(e => new { e.ItemID, e.PriceBandID });

                entity.ToTable("StockItemPrice");

                entity.HasIndex(e => e.ItemID, "IX_StockItemPrice_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ItemID, e.PriceBandID, e.Price }, "IX_StockItemPrice_Item_PriceBand_Price")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PriceBandID, "IX_StockItemPrice_PriceBandID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemPriceID, "IX_StockItemPrice_StockItemPriceID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Price).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StockItemPrices)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemPrice_StockItem");

                entity.HasOne(d => d.PriceBand)
                    .WithMany(p => p.StockItemPrices)
                    .HasForeignKey(d => d.PriceBandID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemPrice_PriceBand");
            });

            modelBuilder.Entity<StockItemQtyDiscBreak>(entity =>
            {
                entity.ToTable("StockItemQtyDiscBreak");

                entity.HasIndex(e => e.StockItemDiscountID, "IX_StockItemQtyDiscBreak_StockItemDiscountID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StockItemQtyDiscBreakID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountAmountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DiscountPercentValue).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityMoreThan).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.StockItemDiscount)
                    .WithMany(p => p.StockItemQtyDiscBreaks)
                    .HasForeignKey(d => d.StockItemDiscountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemQtyDiscBreak_StockItemDiscount");
            });

            modelBuilder.Entity<StockItemSearchCatVal>(entity =>
            {
                entity.HasKey(e => new { e.ItemID, e.SearchCategoryID });

                entity.ToTable("StockItemSearchCatVal");

                entity.HasIndex(e => e.SearchCategoryID, "IX_StockItemSearchCatVal_SearchCategoryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SearchValueID, "IX_StockItemSearchCatVal_SearchValueID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemSearchCatValID, "IX_StockItemSearchCatVal_StockItemSearchCatValID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StockItemSearchCatVals)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemSearchCatVal_StockItem");

                entity.HasOne(d => d.SearchCategory)
                    .WithMany(p => p.StockItemSearchCatVals)
                    .HasForeignKey(d => d.SearchCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemSearchCatVal_SearchCategory");

                entity.HasOne(d => d.SearchValue)
                    .WithMany(p => p.StockItemSearchCatVals)
                    .HasForeignKey(d => d.SearchValueID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemSearchCatVal_SearchValue");
            });

            modelBuilder.Entity<StockItemStandardCostHistory>(entity =>
            {
                entity.ToTable("StockItemStandardCostHistory");

                entity.Property(e => e.StockItemStandardCostHistoryID).ValueGeneratedNever();

                entity.Property(e => e.ChangedDate).HasColumnType("datetime");

                entity.Property(e => e.StandardCostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StockItemStandardCostHistories)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemStandardCostHistory_StockItem");
            });

            modelBuilder.Entity<StockItemStatus>(entity =>
            {
                entity.ToTable("StockItemStatus");

                entity.Property(e => e.StockItemStatusID).ValueGeneratedNever();

                entity.Property(e => e.StockItemStatusName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StockItemSupplier>(entity =>
            {
                entity.HasKey(e => new { e.ItemID, e.SupplierID });

                entity.ToTable("StockItemSupplier");

                entity.HasIndex(e => e.LeadTimeUnitID, "IX_StockItemSupplier_LeadTimeUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemSupplierID, "IX_StockItemSupplier_StockItemSupplierID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierID, "IX_StockItemSupplier_SupplierID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CataloguePrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CataloguePriceDate).HasColumnType("datetime");

                entity.Property(e => e.DateLastOrder).HasColumnType("datetime");

                entity.Property(e => e.DateListPriceChanged).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LandedCostsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastBaseBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ListBasePrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ListPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ListPriceExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderQuantityYTD).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OrderValueYTD).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QuantityOnOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReorderMultipleQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SupplierStockCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UsualOrderQuantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.CountryOfOrigin)
                    .WithMany(p => p.StockItemSuppliers)
                    .HasForeignKey(d => d.CountryOfOriginID)
                    .HasConstraintName("FK_StockItemSupplier_SYSCountryCode");

                entity.HasOne(d => d.DefaultPricingSourceType)
                    .WithMany(p => p.StockItemSuppliers)
                    .HasForeignKey(d => d.DefaultPricingSourceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemSupplier_DefaultPricingSourceType");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StockItemSuppliers)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemSupplier_StockItem");

                entity.HasOne(d => d.LandedCostsType)
                    .WithMany(p => p.StockItemSuppliers)
                    .HasForeignKey(d => d.LandedCostsTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemSupplier_LandedCostsType");

                entity.HasOne(d => d.LeadTimeUnit)
                    .WithMany(p => p.StockItemSuppliers)
                    .HasForeignKey(d => d.LeadTimeUnitID)
                    .HasConstraintName("FK_StockItemSupplier_TimeUnit");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.StockItemSuppliers)
                    .HasForeignKey(d => d.SupplierID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemSupplier_PLSupplierAccount");
            });

            modelBuilder.Entity<StockItemType>(entity =>
            {
                entity.ToTable("StockItemType");

                entity.Property(e => e.StockItemTypeID).ValueGeneratedNever();

                entity.Property(e => e.StockItemTypeName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StockItemUnit>(entity =>
            {
                entity.ToTable("StockItemUnit");

                entity.HasIndex(e => e.ItemID, "IX_StockItemUnit_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UnitID, "IX_StockItemUnit_UnitID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StockItemUnitID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MultipleOfBaseUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UnitPrecision).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.StockItemUnits)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemUnit_StockItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.StockItemUnits)
                    .HasForeignKey(d => d.UnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemUnit_Unit");
            });

            modelBuilder.Entity<StockItemUnitUOMType>(entity =>
            {
                entity.HasKey(e => new { e.StockItemUnitID, e.UnitOfMeasureTypeID });

                entity.ToTable("StockItemUnitUOMType");

                entity.HasIndex(e => e.StockItemID, "IX_StockItemUnitUOMType_StockItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemUnitUOMTypeID, "IX_StockItemUnitUOMType_StockItemUnitUOMTypeID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UnitOfMeasureTypeID, "IX_StockItemUnitUOMType_UnitOfMeasureTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.StockItem)
                    .WithMany(p => p.StockItemUnitUOMTypes)
                    .HasForeignKey(d => d.StockItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemUnitUOMType_StockItem");

                entity.HasOne(d => d.StockItemUnit)
                    .WithMany(p => p.StockItemUnitUOMTypes)
                    .HasForeignKey(d => d.StockItemUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemUnitUOMType_StockItemUnit");

                entity.HasOne(d => d.UnitOfMeasureType)
                    .WithMany(p => p.StockItemUnitUOMTypes)
                    .HasForeignKey(d => d.UnitOfMeasureTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockItemUnitUOMType_UnitOfMeasureType");
            });

            modelBuilder.Entity<StockItemX>(entity =>
            {
                entity.ToTable("StockItemX");

                entity.Property(e => e.StockItemXID).ValueGeneratedNever();

                entity.Property(e => e.CommodityCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IssueMethod)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KanbanLocation)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MSDSApprovedBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MSDSApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.ProductClassification)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProductionStartDate).HasColumnType("datetime");

                entity.Property(e => e.ReleasedFromInspection).HasColumnType("datetime");

                entity.Property(e => e.SabreSpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SabreSpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SabreSpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SabreSpareDate4).HasColumnType("datetime");

                entity.Property(e => e.SabreSpareDate5).HasColumnType("datetime");

                entity.Property(e => e.SabreSpareNumber1).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.SabreSpareNumber2).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.SabreSpareNumber3).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.SabreSpareNumber4).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.SabreSpareNumber5).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.SabreSpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SabreSpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SabreSpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SabreSpareText4)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SabreSpareText5)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalesOrderType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ShortComments)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.StockItemXNavigation)
                    .WithOne(p => p.StockItemX)
                    .HasForeignKey<StockItemX>(d => d.StockItemXID)
                    .HasConstraintName("FK_StockItemX_StockItem");
            });

            modelBuilder.Entity<StockPreReceiptAlloc>(entity =>
            {
                entity.ToTable("StockPreReceiptAlloc");

                entity.HasIndex(e => e.AllocationBalanceID, "IX_StockPreReceiptAlloc_AllocationBalanceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_StockPreReceiptAlloc_StockItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseItemID, "IX_StockPreReceiptAlloc_WarehouseItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StockPreReceiptAllocID).ValueGeneratedNever();

                entity.Property(e => e.AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AllocationBalance)
                    .WithMany(p => p.StockPreReceiptAllocs)
                    .HasForeignKey(d => d.AllocationBalanceID)
                    .HasConstraintName("FK_StockPreReceiptAlloc_AllocationBalance");

                entity.HasOne(d => d.StockItem)
                    .WithMany(p => p.StockPreReceiptAllocs)
                    .HasForeignKey(d => d.StockItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockPreReceiptAlloc_StockItem");

                entity.HasOne(d => d.WarehouseItem)
                    .WithMany(p => p.StockPreReceiptAllocs)
                    .HasForeignKey(d => d.WarehouseItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockPreReceiptAlloc_WarehouseItem");
            });

            modelBuilder.Entity<StockRevalueAuditTrail>(entity =>
            {
                entity.HasKey(e => e.StockRevalueAuditID);

                entity.ToTable("StockRevalueAuditTrail");

                entity.Property(e => e.StockRevalueAuditID).ValueGeneratedNever();

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OldValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.StockItem)
                    .WithMany(p => p.StockRevalueAuditTrails)
                    .HasForeignKey(d => d.StockItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockRevalueAuditTrail_StockItem");
            });

            modelBuilder.Entity<StockSetting>(entity =>
            {
                entity.ToTable("StockSetting");

                entity.HasIndex(e => e.LandedCostsNominalCode, "IX_StockSetting_LandedCostsNominalCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StockSettingID).ValueGeneratedNever();

                entity.Property(e => e.AllItemsLastArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.AllTraceItemsLastArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.AllowFulfilmentFromStock)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ArchiveLastPurgedUpTo).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastArchiveRunBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastArchiveRunOn).HasColumnType("datetime");

                entity.Property(e => e.LastProveBalancesRunBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastProveBalancesRunOn).HasColumnType("datetime");

                entity.Property(e => e.LastPurgeArchiveRunBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastPurgeArchiveRunOn).HasColumnType("datetime");

                entity.Property(e => e.LastTraceArchiveRunBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastTraceArchiveRunOn).HasColumnType("datetime");

                entity.Property(e => e.LastTracePurgeArchiveRunBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastTracePurgeArchiveRunOn).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ProfitPercentOfRevenue)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TraceArchiveLastPurgedUpTo).HasColumnType("datetime");

                entity.HasOne(d => d.LandedCostsNominalCodeNavigation)
                    .WithMany(p => p.StockSettings)
                    .HasForeignKey(d => d.LandedCostsNominalCode)
                    .HasConstraintName("FK_StockSetting_NLNominalAccount");
            });

            modelBuilder.Entity<StockSettingX>(entity =>
            {
                entity.ToTable("StockSettingX");

                entity.Property(e => e.StockSettingXID).ValueGeneratedNever();

                entity.Property(e => e.ROLWarehouses)
                    .IsRequired()
                    .HasMaxLength(1002)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.StockSettingXNavigation)
                    .WithOne(p => p.StockSettingX)
                    .HasForeignKey<StockSettingX>(d => d.StockSettingXID)
                    .HasConstraintName("FK_StockSettingX_StockSetting");
            });

            modelBuilder.Entity<Stocktake>(entity =>
            {
                entity.ToTable("Stocktake");

                entity.HasIndex(e => e.StockVarianceNomCodeID, "IX_Stocktake_StockVarianceNomCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StocktakeSelectorID, "IX_Stocktake_StocktakeSelectorID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StocktakeID).ValueGeneratedNever();

                entity.Property(e => e.CountingDate).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NominalNarrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StocktakeDate).HasColumnType("datetime");

                entity.Property(e => e.StocktakeName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.StockVarianceNomCode)
                    .WithMany(p => p.Stocktakes)
                    .HasForeignKey(d => d.StockVarianceNomCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stocktake_NLNominalAccount");

                entity.HasOne(d => d.StocktakeSelector)
                    .WithMany(p => p.Stocktakes)
                    .HasForeignKey(d => d.StocktakeSelectorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stocktake_StocktakeSelector");

                entity.HasOne(d => d.StocktakeStatus)
                    .WithMany(p => p.Stocktakes)
                    .HasForeignKey(d => d.StocktakeStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stocktake_StocktakeStatus");

                entity.HasOne(d => d.StocktakeType)
                    .WithMany(p => p.Stocktakes)
                    .HasForeignKey(d => d.StocktakeTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stocktake_StocktakeType");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.Stocktakes)
                    .HasForeignKey(d => d.WarehouseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stocktake_Warehouse1");
            });

            modelBuilder.Entity<StocktakeCountSheetItem>(entity =>
            {
                entity.HasKey(e => e.StocktakeCountShtItemID)
                    .HasName("PK_StocktakeCountShtItem");

                entity.ToTable("StocktakeCountSheetItem");

                entity.HasIndex(e => e.BinItemID, "IX_StocktakeCountSheetItem_BinItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StocktakeID, "IX_StocktakeCountSheetItem_StocktakeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StocktakeCountShtItemID).ValueGeneratedNever();

                entity.Property(e => e.ActualQuantityInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ActualTraceUnassigned).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscrepancyNarrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.RecordedQuantityInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.RecordedTraceUnassigned).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BinItem)
                    .WithMany(p => p.StocktakeCountSheetItems)
                    .HasForeignKey(d => d.BinItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StocktakeCountSheetItem_BinItem");

                entity.HasOne(d => d.STKDiscrepancyStatus)
                    .WithMany(p => p.StocktakeCountSheetItems)
                    .HasForeignKey(d => d.STKDiscrepancyStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StocktakeCountSheetItem_STKDiscrepancyStatus");

                entity.HasOne(d => d.Stocktake)
                    .WithMany(p => p.StocktakeCountSheetItems)
                    .HasForeignKey(d => d.StocktakeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StocktakeCountSheetItem_Stocktake");
            });

            modelBuilder.Entity<StocktakeItem>(entity =>
            {
                entity.ToTable("StocktakeItem");

                entity.HasIndex(e => e.StocktakeID, "IX_StocktakeItem_StocktakeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StocktakeItemID, "IX_StocktakeItem_StocktakeItemID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.StocktakeItemID).ValueGeneratedNever();

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Details)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HoldingValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Stocktake)
                    .WithMany(p => p.StocktakeItems)
                    .HasForeignKey(d => d.StocktakeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StocktakeItem_Stocktake");
            });

            modelBuilder.Entity<StocktakeLiveBinItem>(entity =>
            {
                entity.ToTable("StocktakeLiveBinItem");

                entity.HasIndex(e => e.BinItemID, "IX_StocktakeLiveBinItem_BinItem")
                    .IsUnique();

                entity.Property(e => e.StocktakeLiveBinItemID).ValueGeneratedNever();

                entity.HasOne(d => d.Stocktake)
                    .WithMany(p => p.StocktakeLiveBinItems)
                    .HasForeignKey(d => d.StocktakeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StocktakeLiveBinItem_Stocktake");

                entity.HasOne(d => d.StocktakeItem)
                    .WithMany(p => p.StocktakeLiveBinItems)
                    .HasForeignKey(d => d.StocktakeItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StocktakeLiveBinItem_StocktakeItem");
            });

            modelBuilder.Entity<StocktakeSelector>(entity =>
            {
                entity.ToTable("StocktakeSelector");

                entity.Property(e => e.StocktakeSelectorID).ValueGeneratedNever();

                entity.Property(e => e.StocktakeSelectorName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StocktakeStatus>(entity =>
            {
                entity.ToTable("StocktakeStatus");

                entity.Property(e => e.StocktakeStatusID).ValueGeneratedNever();

                entity.Property(e => e.StocktakeStatusName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StocktakeType>(entity =>
            {
                entity.ToTable("StocktakeType");

                entity.Property(e => e.StocktakeTypeId).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SubContractingDespatch>(entity =>
            {
                entity.HasIndex(e => e.AddressCountryID, "IX_SubContractingDespatches_AddressCountryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ContactSalutationID, "IX_SubContractingDespatches_ContactSalutationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OpID, "IX_SubContractingDespatches_OpID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Source, e.OpID }, "IX_SubContractingDespatches_Source+OpID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierRef, "IX_SubContractingDespatches_SupplierRef")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AddressCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address_5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AdviceNoteNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DespatchDate).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.AddressCountry)
                    .WithMany(p => p.SubContractingDespatches)
                    .HasForeignKey(d => d.AddressCountryID)
                    .HasConstraintName("FK_SubContractingDespatches_AddressCountryID");

                entity.HasOne(d => d.ContactSalutation)
                    .WithMany(p => p.SubContractingDespatches)
                    .HasForeignKey(d => d.ContactSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubContractingDespatches_ContactSalutationID");
            });

            modelBuilder.Entity<SubContractingPurchaseOrder>(entity =>
            {
                entity.HasIndex(e => e.OpID, "IX_SubContractingPurchaseOrders_OpID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Source, e.OpID }, "IX_SubContractingPurchaseOrders_Source+OpID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierRef, "IX_SubContractingPurchaseOrders_SupplierRef")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.POrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SubContractingReceipt>(entity =>
            {
                entity.HasIndex(e => e.OpID, "IX_SubContractingReceipts_OpID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Source, e.OpID }, "IX_SubContractingReceipts_Source+OpID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierRef, "IX_SubContractingReceipts_SupplierRef")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.GrnNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.POrderNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QtyReceived).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyRejected).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SupplierReorderLevel>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Corrected_Last_Cost_Price).HasColumnName("Corrected Last Cost Price");

                entity.Property(e => e.Lead_Time_Unit).HasColumnName("Lead Time Unit");

                entity.Property(e => e.List_Price_Exp_Date)
                    .HasMaxLength(255)
                    .HasColumnName("List Price Exp Date");

                entity.Property(e => e.New_Supp_Code)
                    .HasMaxLength(255)
                    .HasColumnName("New Supp Code");

                entity.Property(e => e.Preferred_Supplier_Flag).HasColumnName("Preferred Supplier Flag");

                entity.Property(e => e.Pricing_Source)
                    .HasMaxLength(255)
                    .HasColumnName("Pricing Source");

                entity.Property(e => e.Sense_Check_Cost_Price).HasColumnName("Sense Check Cost Price");

                entity.Property(e => e.Supplier_Lead_Time).HasColumnName("Supplier Lead Time");

                entity.Property(e => e.Supplier_Part_Code)
                    .HasMaxLength(255)
                    .HasColumnName("Supplier Part Code");

                entity.Property(e => e.cn_ref).HasMaxLength(255);
            });

            modelBuilder.Entity<SyncScope>(entity =>
            {
                entity.HasKey(e => e.SyncScopeID)
                    .IsClustered(false);

                entity.ToTable("SyncScope");

                entity.HasIndex(e => new { e.EntityID, e.EntityType, e.EntityOplock }, "IX_SyncScope_EntTypeOplock")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.EntityType, "IX_SyncScope_EntityID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SyncScopeID).ValueGeneratedNever();

                entity.Property(e => e.EntityOplock)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.EntityType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SyncSource>(entity =>
            {
                entity.HasKey(e => e.SyncSourceID)
                    .IsClustered(false);

                entity.ToTable("SyncSource");

                entity.HasIndex(e => e.EntityType, "IX_SyncSource_EntityID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.EntityOplock, "IX_SyncSource_EntityOplock")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.SyncSourceID).ValueGeneratedNever();

                entity.Property(e => e.EntityOplock)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.EntityType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SysLockThreshold>(entity =>
            {
                entity.HasKey(e => e.SysLockThresholdsID)
                    .IsClustered(false);

                entity.HasIndex(e => e.FeatureArea, "IX_SysLockThresholds_FeatureArea")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.SysLockThresholdsID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FeatureArea)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TEMActionOnRetrieval>(entity =>
            {
                entity.ToTable("TEMActionOnRetrieval");

                entity.Property(e => e.TEMActionOnRetrievalID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEMCodePage>(entity =>
            {
                entity.ToTable("TEMCodePage");

                entity.Property(e => e.TEMCodePageID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEMCustProdMapping>(entity =>
            {
                entity.ToTable("TEMCustProdMapping");

                entity.HasIndex(e => e.CustomerID, "IX_TEMCustProdMapping_CustomerID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.CustomersProductCode, "IX_TEMCustProdMapping_CustomersProductCode")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_TEMCustProdMapping_StockItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMCustProdMappingID).ValueGeneratedNever();

                entity.Property(e => e.AdditionalChargeCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CustomersProductCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.CustomersProductDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.TEMCustProdMappings)
                    .HasForeignKey(d => d.CustomerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMCustProdMapping_SLCustomerAccount");

                entity.HasOne(d => d.StockItem)
                    .WithMany(p => p.TEMCustProdMappings)
                    .HasForeignKey(d => d.StockItemID)
                    .HasConstraintName("FK_TEMCustProdMapping_StockItem");
            });

            modelBuilder.Entity<TEMCustomerMapping>(entity =>
            {
                entity.ToTable("TEMCustomerMapping");

                entity.HasIndex(e => e.CustomerID, "IX_TEMCustomerMapping_CustomerID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Name, "IX_TEMCustomerMapping_Name")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMCustomerMappingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OriginatorsCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.HasOne(d => d.Customer)
                    .WithOne(p => p.TEMCustomerMapping)
                    .HasForeignKey<TEMCustomerMapping>(d => d.CustomerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMCustomerMapping_SLCustomerAccount");
            });

            modelBuilder.Entity<TEMEventSource>(entity =>
            {
                entity.ToTable("TEMEventSource");

                entity.Property(e => e.TEMEventSourceID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEMEventType>(entity =>
            {
                entity.ToTable("TEMEventType");

                entity.HasIndex(e => e.TEMEventSourceID, "IX_TEMEventType_TEMEventSourceID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMEventTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TEMEventSource)
                    .WithMany(p => p.TEMEventTypes)
                    .HasForeignKey(d => d.TEMEventSourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMEventType_TEMEventSource");
            });

            modelBuilder.Entity<TEMItemUnitMapping>(entity =>
            {
                entity.ToTable("TEMItemUnitMapping");

                entity.HasIndex(e => e.StockItemUnitID, "IX_TEMItemUnitMapping_StockItemUnitID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMItemUnitMappingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.StockItemUnit)
                    .WithMany(p => p.TEMItemUnitMappings)
                    .HasForeignKey(d => d.StockItemUnitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMItemUnitMapping_StockItemUnit");
            });

            modelBuilder.Entity<TEMLocation>(entity =>
            {
                entity.ToTable("TEMLocation");

                entity.Property(e => e.TEMLocationID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEMMessage>(entity =>
            {
                entity.ToTable("TEMMessage");

                entity.HasIndex(e => e.POPInvoiceID, "IX_TEMMessage_POPInvoiceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.RemoteMessageIdentifier, "IX_TEMMessage_RemoveMessageIdentifier")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TEMLocationID, "IX_TEMMessage_TEMLocationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TEMMessageTypeID, "IX_TEMMessage_TEMMessageTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TEMStatusID, "IX_TEMMessage_TEMStatusID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMMessageID).ValueGeneratedNever();

                entity.Property(e => e.AccRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.AmendedXMLDoc)
                    .IsRequired()
                    .HasColumnType("text")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromResolved)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.MAPIGUID)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.MessageBody)
                    .IsRequired()
                    .HasColumnType("text")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.MessageDate).HasColumnType("datetime");

                entity.Property(e => e.MessageTime).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ReceivedXMLDoc)
                    .IsRequired()
                    .HasColumnType("text")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Recipient)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.ReplyTo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Sender)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.HasOne(d => d.POPInvoice)
                    .WithMany(p => p.TEMMessages)
                    .HasForeignKey(d => d.POPInvoiceID)
                    .HasConstraintName("FK_TEMMessage_POPInvCredDispute");

                entity.HasOne(d => d.TEMLocation)
                    .WithMany(p => p.TEMMessages)
                    .HasForeignKey(d => d.TEMLocationID)
                    .HasConstraintName("FK_TEMMessage_TEMLocation");

                entity.HasOne(d => d.TEMMessageType)
                    .WithMany(p => p.TEMMessages)
                    .HasForeignKey(d => d.TEMMessageTypeID)
                    .HasConstraintName("FK_TEMMessage_TEMMessageType");

                entity.HasOne(d => d.TEMStatus)
                    .WithMany(p => p.TEMMessages)
                    .HasForeignKey(d => d.TEMStatusID)
                    .HasConstraintName("FK_TEMMessage_TEMStatus");
            });

            modelBuilder.Entity<TEMMessageEvent>(entity =>
            {
                entity.ToTable("TEMMessageEvent");

                entity.HasIndex(e => e.TEMEventTypeID, "IX_TEMMessageEvent_TEMEventTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TEMMessageID, "IX_TEMMessageEvent_TEMMessageID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMMessageEventID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExtraInfo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MessageDate).HasColumnType("datetime");

                entity.Property(e => e.MessageTime).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.TEMEventType)
                    .WithMany(p => p.TEMMessageEvents)
                    .HasForeignKey(d => d.TEMEventTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMMessageEvent_TEMEventType");

                entity.HasOne(d => d.TEMMessage)
                    .WithMany(p => p.TEMMessageEvents)
                    .HasForeignKey(d => d.TEMMessageID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MessageEvents_Message");
            });

            modelBuilder.Entity<TEMMessageOrder>(entity =>
            {
                entity.ToTable("TEMMessageOrder");

                entity.HasIndex(e => e.SOPOrderID, "IX_TEMMessageOrder_SOPOrderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TEMMessageID, "IX_TEMMessageOrder_TEMMessageID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMMessageOrderID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SOPOrder)
                    .WithMany(p => p.TEMMessageOrders)
                    .HasForeignKey(d => d.SOPOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMMessageOrder_SOPOrderReturn");

                entity.HasOne(d => d.TEMMessage)
                    .WithMany(p => p.TEMMessageOrders)
                    .HasForeignKey(d => d.TEMMessageID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMMessageOrder_TEMMessage");
            });

            modelBuilder.Entity<TEMMessageType>(entity =>
            {
                entity.ToTable("TEMMessageType");

                entity.Property(e => e.TEMMessageTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<TEMOutputOption>(entity =>
            {
                entity.ToTable("TEMOutputOption");

                entity.Property(e => e.TEMOutputOptionID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEMPriceToleranceBasis>(entity =>
            {
                entity.ToTable("TEMPriceToleranceBasis");

                entity.Property(e => e.TEMPriceToleranceBasisID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEMSetting>(entity =>
            {
                entity.ToTable("TEMSetting");

                entity.HasIndex(e => e.OrdInvAcceptedStatMessID, "IX_TEMSetting_OrdInvAcceptedStatMessID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OrdInvDeletedStatMessID, "IX_TEMSetting_OrdInvDeletedStatMessID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OrdInvReceivedStatMessID, "IX_TEMSetting_OrdInvReceivedStatMessID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OrdInvRejectedStatMessID, "IX_TEMSetting_OrdInvRejectedStatMessID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TEMActionOnRetrievalID, "IX_TEMSetting_TEMActionOnRetrievalID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TEMOutputOptionID, "IX_TEMSetting_TEMOutputOptionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TEMPriceToleranceBasisID, "IX_TEMSetting_TEMPriceToleranceBasisID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMSettingID).ValueGeneratedNever();

                entity.Property(e => e.AskUpdateEmailAddress)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoImportPurchInvoices)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoImportSalesOrders)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoReleaseReceipts)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoSendPurchaseOrders)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoSendSalesInvoices)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CheckPriceTolerance)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CompanyTeMailAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CoreCurrencyISOCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('GBP')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MAPIPassword)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MAPIProfile)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MailFolderIndexNo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MailFolderName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MessageBody)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MessageSubject)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MoveToFolderIndexNo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MoveToFolderName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PriceTolerancePercentage).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TEMActionOnRetrievalID).HasDefaultValueSql("((0))");

                entity.Property(e => e.TEMPriceToleranceBasisID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.OrdInvAcceptedStatMess)
                    .WithMany(p => p.TEMSettingOrdInvAcceptedStatMesses)
                    .HasForeignKey(d => d.OrdInvAcceptedStatMessID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMSetting_TEMStatusMessage1");

                entity.HasOne(d => d.OrdInvDeletedStatMess)
                    .WithMany(p => p.TEMSettingOrdInvDeletedStatMesses)
                    .HasForeignKey(d => d.OrdInvDeletedStatMessID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMSetting_TEMStatusMessage3");

                entity.HasOne(d => d.OrdInvReceivedStatMess)
                    .WithMany(p => p.TEMSettingOrdInvReceivedStatMesses)
                    .HasForeignKey(d => d.OrdInvReceivedStatMessID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMSetting_TEMStatusMessage");

                entity.HasOne(d => d.OrdInvRejectedStatMess)
                    .WithMany(p => p.TEMSettingOrdInvRejectedStatMesses)
                    .HasForeignKey(d => d.OrdInvRejectedStatMessID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMSetting_TEMStatusMessage2");

                entity.HasOne(d => d.TEMActionOnRetrieval)
                    .WithMany(p => p.TEMSettings)
                    .HasForeignKey(d => d.TEMActionOnRetrievalID)
                    .HasConstraintName("FK_TEMSetting_TEMActionOnRetrieval");

                entity.HasOne(d => d.TEMOutputOption)
                    .WithMany(p => p.TEMSettings)
                    .HasForeignKey(d => d.TEMOutputOptionID)
                    .HasConstraintName("FK_TEMSetting_TEMOutputOption");

                entity.HasOne(d => d.TEMPriceToleranceBasis)
                    .WithMany(p => p.TEMSettings)
                    .HasForeignKey(d => d.TEMPriceToleranceBasisID)
                    .HasConstraintName("FK_TEMSetting_TEMPriceToleranceBasis");
            });

            modelBuilder.Entity<TEMStandardTaxCode>(entity =>
            {
                entity.ToTable("TEMStandardTaxCode");

                entity.HasIndex(e => e.CountryCodeID, "IX_TEMStandardTaxCode_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMStandardTaxCodeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.TEMStandardTaxCodes)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_TEMStandardTaxCode_SYSCountryCode");
            });

            modelBuilder.Entity<TEMStatus>(entity =>
            {
                entity.ToTable("TEMStatus");

                entity.Property(e => e.TEMStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<TEMStatusMessage>(entity =>
            {
                entity.ToTable("TEMStatusMessage");

                entity.Property(e => e.TEMStatusMessageID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TEMSuppProdMapping>(entity =>
            {
                entity.ToTable("TEMSuppProdMapping");

                entity.HasIndex(e => e.StockItemID, "IX_TEMSuppProdMapping_StockItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierID, "IX_TEMSuppProdMapping_SupplierID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierProductCode, "IX_TEMSuppProdMapping_SupplierProductCode")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMSuppProdMappingID).ValueGeneratedNever();

                entity.Property(e => e.AdditionalChargeCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SupplierProductCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.SupplierProductDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.HasOne(d => d.StockItem)
                    .WithMany(p => p.TEMSuppProdMappings)
                    .HasForeignKey(d => d.StockItemID)
                    .HasConstraintName("FK_TEMSuppProdMapping_StockItem");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.TEMSuppProdMappings)
                    .HasForeignKey(d => d.SupplierID)
                    .HasConstraintName("FK_TEMSuppProdMapping_PLSupplierAccount");
            });

            modelBuilder.Entity<TEMSupplierMapping>(entity =>
            {
                entity.ToTable("TEMSupplierMapping");

                entity.HasIndex(e => e.Name, "IX_TEMSupplierMapping_Name")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SupplierID, "IX_TEMSupplierMapping_SupplierID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMSupplierMappingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultNominalCodeID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OriginatorsCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.HasOne(d => d.Supplier)
                    .WithOne(p => p.TEMSupplierMapping)
                    .HasForeignKey<TEMSupplierMapping>(d => d.SupplierID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMSupplierMapping_PLSupplierAccount");
            });

            modelBuilder.Entity<TEMTaxCodeMapping>(entity =>
            {
                entity.ToTable("TEMTaxCodeMapping");

                entity.HasIndex(e => e.InternalTaxCodeID, "IX_TEMTaxCodeMapping_InternalTaxCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TEMStandardTaxCodeID, "IX_TEMTaxCodeMapping_TEMStandardTaxCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TEMTaxCodeMappingID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.InternalTaxCode)
                    .WithMany(p => p.TEMTaxCodeMappings)
                    .HasForeignKey(d => d.InternalTaxCodeID)
                    .HasConstraintName("FK_TEMTaxCodeMapping_SYSTaxRate");

                entity.HasOne(d => d.TEMStandardTaxCode)
                    .WithMany(p => p.TEMTaxCodeMappings)
                    .HasForeignKey(d => d.TEMStandardTaxCodeID)
                    .HasConstraintName("FK_TEMTaxCodeMapping_TEMStandardTaxCode");
            });

            modelBuilder.Entity<TSActivityGroupsVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TSActivityGroupsVw");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSActivityItemsVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TSActivityItemsVw");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSActivitySearchKey>(entity =>
            {
                entity.ToTable("TSActivitySearchKey");

                entity.Property(e => e.TSActivitySearchKeyID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSAuthGroupAuthoriser>(entity =>
            {
                entity.HasKey(e => e.TSAuthGroupAuthorisers)
                    .IsClustered(false);

                entity.HasIndex(e => e.TSAuthorisationGroupID, "IX_TSAuthGroupAuthorisers_TSAuthorisationGroupID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSPersonID, "IX_TSAuthGroupAuthorisers_TSPersonID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSAuthGroupAuthorisers).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSAuthorisationGroup)
                    .WithMany(p => p.TSAuthGroupAuthorisers)
                    .HasForeignKey(d => d.TSAuthorisationGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupAuthoriserLink_AuthorisationGroup");

                entity.HasOne(d => d.TSPerson)
                    .WithMany(p => p.TSAuthGroupAuthorisers)
                    .HasForeignKey(d => d.TSPersonID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupAuthoriserLink_Person1");
            });

            modelBuilder.Entity<TSAuthGroupMember>(entity =>
            {
                entity.HasKey(e => e.TSAuthGroupMembersID)
                    .IsClustered(false);

                entity.HasIndex(e => e.TSAuthorisationGroupID, "IX_TSAuthGroupMembers_TSAuthorisationGroupID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSPersonID, "IX_TSAuthGroupMembers_TSPersonID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSAuthGroupMembersID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSAuthorisationGroup)
                    .WithMany(p => p.TSAuthGroupMembers)
                    .HasForeignKey(d => d.TSAuthorisationGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonAuthorisationGroupLink_AuthorisationGroup");

                entity.HasOne(d => d.TSPerson)
                    .WithMany(p => p.TSAuthGroupMembers)
                    .HasForeignKey(d => d.TSPersonID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonAuthorisationGroupLink_Person1");
            });

            modelBuilder.Entity<TSAuthorisationGroup>(entity =>
            {
                entity.ToTable("TSAuthorisationGroup");

                entity.Property(e => e.TSAuthorisationGroupID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSCategoryCompStatusType>(entity =>
            {
                entity.HasKey(e => e.TSCategoryStatusTypeID)
                    .HasName("PK_CategoryStatusType");

                entity.ToTable("TSCategoryCompStatusType");

                entity.Property(e => e.TSCategoryStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSCategoryCompType>(entity =>
            {
                entity.HasKey(e => e.TSCategoryComponentTypeID)
                    .HasName("PK_CategoryComponentType");

                entity.ToTable("TSCategoryCompType");

                entity.Property(e => e.TSCategoryComponentTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSCategoryComponent>(entity =>
            {
                entity.HasKey(e => e.TSCategoryComponentID)
                    .HasName("PK_Component")
                    .IsClustered(false);

                entity.ToTable("TSCategoryComponent");

                entity.HasIndex(e => e.Code, "IX_TSCategoryComponent_Code")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ParentCategoryComponentID, "IX_TSCategoryComponent_ParentCategoryComponentID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSCategoryCompStatusTypeID, "IX_TSCategoryComponent_TSCategoryCompStatusTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSCategoryComponentTypeID, "IX_TSCategoryComponent_TSCategoryComponentTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSCategoryComponentID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.UnitRate).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.ParentCategoryComponent)
                    .WithMany(p => p.InverseParentCategoryComponent)
                    .HasForeignKey(d => d.ParentCategoryComponentID)
                    .HasConstraintName("FK_CategoryComponent_CategoryComponent");

                entity.HasOne(d => d.TSCategoryCompStatusType)
                    .WithMany(p => p.TSCategoryComponents)
                    .HasForeignKey(d => d.TSCategoryCompStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CategoryComponent_CategoryComponentStatusType");

                entity.HasOne(d => d.TSCategoryComponentType)
                    .WithMany(p => p.TSCategoryComponents)
                    .HasForeignKey(d => d.TSCategoryComponentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CategoryComponent_CategoryComponentType");
            });

            modelBuilder.Entity<TSChargeRate>(entity =>
            {
                entity.HasKey(e => e.TSChargeRateID)
                    .HasName("PK_ChargeRate")
                    .IsClustered(false);

                entity.ToTable("TSChargeRate");

                entity.HasIndex(e => new { e.TSChargeRateID, e.TSChargeRateTypeID }, "IX_TSChargeRate_TSChargeRateID_TSChargeRateTypeID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSChargeRateID).ValueGeneratedNever();

                entity.Property(e => e.ChargeRateValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSChargeRateType)
                    .WithMany(p => p.TSChargeRates)
                    .HasForeignKey(d => d.TSChargeRateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChargeRate_ChargeRateType");
            });

            modelBuilder.Entity<TSChargeRateType>(entity =>
            {
                entity.ToTable("TSChargeRateType");

                entity.Property(e => e.TSChargeRateTypeID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSChgRateTypePriceModLink>(entity =>
            {
                entity.HasKey(e => e.TSChgRateTypePriceModLinkID)
                    .IsClustered(false);

                entity.ToTable("TSChgRateTypePriceModLink");

                entity.HasIndex(e => new { e.TSChargeRateTypeID, e.PCTimeMaterialsPriceRuleID }, "IX_TSChgRateTypePriceModLink_TSChargeRateTypeID_PCPriceModifierTypeID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSChgRateTypePriceModLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.PCTimeMaterialsPriceRule)
                    .WithMany(p => p.TSChgRateTypePriceModLinks)
                    .HasForeignKey(d => d.PCTimeMaterialsPriceRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSChgRateTypePriceModLink_PCTimeMaterialsPriceRule");

                entity.HasOne(d => d.TSChargeRateType)
                    .WithMany(p => p.TSChgRateTypePriceModLinks)
                    .HasForeignKey(d => d.TSChargeRateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSChgRateTypePriceModLink_TSChargeRateType");
            });

            modelBuilder.Entity<TSClaimRecord>(entity =>
            {
                entity.HasKey(e => e.TSClaimRecordID)
                    .HasName("PK_ClaimRecord")
                    .IsClustered(false);

                entity.ToTable("TSClaimRecord");

                entity.HasIndex(e => e.ActivityID, "IX_TSClaimRecord_ActivityID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCProjectEntryID, "IX_TSClaimRecord_PCProjectEntryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ParentProjectID, "IX_TSClaimRecord_ParentProjectID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSCategoryGroupID, "IX_TSClaimRecord_TSCategoryGroupID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSCategoryID, "IX_TSClaimRecord_TSCategoryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSClaimRecordStatusID, "IX_TSClaimRecord_TSClaimRecordStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSClaimSheetID, "IX_TSClaimRecord_TSClaimSheetID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSReceiptAttachedTypeID, "IX_TSClaimRecord_TSReceiptAttachedTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSClaimRecordID).ValueGeneratedNever();

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.DateIncurred).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NetAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OverheadUpliftRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedToPayrollDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UnitRate).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.PCProjectEntry)
                    .WithMany(p => p.TSClaimRecords)
                    .HasForeignKey(d => d.PCProjectEntryID)
                    .HasConstraintName("FK_TSClaimRecord_PCProjectEntry");

                entity.HasOne(d => d.TSCategoryGroup)
                    .WithMany(p => p.TSClaimRecordTSCategoryGroups)
                    .HasForeignKey(d => d.TSCategoryGroupID)
                    .HasConstraintName("FK_TSClaimRecord_TSCategoryComponent");

                entity.HasOne(d => d.TSCategory)
                    .WithMany(p => p.TSClaimRecordTSCategories)
                    .HasForeignKey(d => d.TSCategoryID)
                    .HasConstraintName("FK_ClaimRecord_Component");

                entity.HasOne(d => d.TSClaimRecordStatus)
                    .WithMany(p => p.TSClaimRecords)
                    .HasForeignKey(d => d.TSClaimRecordStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimRecord_ClaimRecordStatusType");

                entity.HasOne(d => d.TSClaimSheet)
                    .WithMany(p => p.TSClaimRecords)
                    .HasForeignKey(d => d.TSClaimSheetID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimRecord_ClaimSheet");

                entity.HasOne(d => d.TSReceiptAttachedType)
                    .WithMany(p => p.TSClaimRecords)
                    .HasForeignKey(d => d.TSReceiptAttachedTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimRecord_ReceiptAttachedType");
            });

            modelBuilder.Entity<TSClaimRecordStatusType>(entity =>
            {
                entity.ToTable("TSClaimRecordStatusType");

                entity.Property(e => e.TSClaimRecordStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSClaimSheet>(entity =>
            {
                entity.HasKey(e => e.TSClaimSheetID)
                    .HasName("PK_ClaimSheet")
                    .IsClustered(false);

                entity.ToTable("TSClaimSheet");

                entity.HasIndex(e => e.ClaimantID, "IX_TSClaimSheet_ClaimantID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_TSClaimSheet_PLSupplierAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceID, "IX_TSClaimSheet_SourceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSExpenseClaimStatusTypeID, "IX_TSClaimSheet_TSExpenseClaimStatusTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSExpensesPostingStatusID, "IX_TSClaimSheet_TSExpensesPostingStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSReimbursmentMethodTypeID, "IX_TSClaimSheet_TSReimbursmentMethodTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSClaimSheetID).ValueGeneratedNever();

                entity.Property(e => e.ChequeNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClaimNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ToBaseCurrencyRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.User)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Claimant)
                    .WithMany(p => p.TSClaimSheets)
                    .HasForeignKey(d => d.ClaimantID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSClaimSheet_TSPerson");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.TSClaimSheets)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .HasConstraintName("FK_TSClaimSheet_PLSupplierAccount");

                entity.HasOne(d => d.SYSCurrency)
                    .WithMany(p => p.TSClaimSheets)
                    .HasForeignKey(d => d.SYSCurrencyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSClaimSheet_SYSCurrency");

                entity.HasOne(d => d.Source)
                    .WithMany(p => p.TSClaimSheets)
                    .HasForeignKey(d => d.SourceID)
                    .HasConstraintName("FK_TSClaimSheet_Source");

                entity.HasOne(d => d.TSExpenseClaimStatusType)
                    .WithMany(p => p.TSClaimSheets)
                    .HasForeignKey(d => d.TSExpenseClaimStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSClaimSheet_TSExpenseClaimStatusTypeID");

                entity.HasOne(d => d.TSExpensesPostingStatus)
                    .WithMany(p => p.TSClaimSheets)
                    .HasForeignKey(d => d.TSExpensesPostingStatusID)
                    .HasConstraintName("FK_TSClaimSheet_TSExpensesPostingStatus");

                entity.HasOne(d => d.TSReimbursmentMethodType)
                    .WithMany(p => p.TSClaimSheets)
                    .HasForeignKey(d => d.TSReimbursmentMethodTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimSheet_PaymentMethod");
            });

            modelBuilder.Entity<TSConfigurableTerm>(entity =>
            {
                entity.ToTable("TSConfigurableTerm");

                entity.Property(e => e.TSConfigurableTermID).ValueGeneratedNever();

                entity.Property(e => e.ConfiguredTerm)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultTerm)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSCostRate>(entity =>
            {
                entity.HasKey(e => e.TSCostRateID)
                    .HasName("PK_CostRate")
                    .IsClustered(false);

                entity.ToTable("TSCostRate");

                entity.HasIndex(e => e.TSChargeRateTypeID, "IX_TSCostRate_TSChargeRateTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TSCostRateID, e.TSChargeRateTypeID }, "IX_TSCostRate_TSCostRateID_TSCostRateTypeID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSPayRateTypeID, "IX_TSCostRate_TSPayRateTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSCostRateID).ValueGeneratedNever();

                entity.Property(e => e.CostRateValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSChargeRateType)
                    .WithMany(p => p.TSCostRates)
                    .HasForeignKey(d => d.TSChargeRateTypeID)
                    .HasConstraintName("FK_TSCostRate_TSChargeRateType");

                entity.HasOne(d => d.TSCostRateType)
                    .WithMany(p => p.TSCostRates)
                    .HasForeignKey(d => d.TSCostRateTypeID)
                    .HasConstraintName("FK_CostRate_CostRateType");

                entity.HasOne(d => d.TSPayRateType)
                    .WithMany(p => p.TSCostRates)
                    .HasForeignKey(d => d.TSPayRateTypeID)
                    .HasConstraintName("FK_TSCostRate_TSPayRateType");
            });

            modelBuilder.Entity<TSCostRateType>(entity =>
            {
                entity.ToTable("TSCostRateType");

                entity.Property(e => e.TSCostRateTypeID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSCostRateTypeVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TSCostRateTypeVw");

                entity.Property(e => e.Code)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSDayOfWeek>(entity =>
            {
                entity.ToTable("TSDayOfWeek");

                entity.Property(e => e.TSDayOfWeekID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSExpFinancialsIntegration>(entity =>
            {
                entity.ToTable("TSExpFinancialsIntegration");

                entity.Property(e => e.TSExpFinancialsIntegrationID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NominalControlAccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalControlAccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalControlAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSExpenseClaimStatusType>(entity =>
            {
                entity.ToTable("TSExpenseClaimStatusType");

                entity.Property(e => e.TSExpenseClaimStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSExpenseProjectIntegration>(entity =>
            {
                entity.ToTable("TSExpenseProjectIntegration");

                entity.Property(e => e.TSExpenseProjectIntegrationID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsIntegrated)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSExpensesClientConfig>(entity =>
            {
                entity.ToTable("TSExpensesClientConfig");

                entity.HasIndex(e => e.TSActivitySearchKeyID, "IX_TSExpensesClientConfig_TSActivitySearchKeyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSUserSearchKeyID, "IX_TSExpensesClientConfig_TSUserSearchKeyID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSExpensesClientConfigID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSActivitySearchKey)
                    .WithMany(p => p.TSExpensesClientConfigs)
                    .HasForeignKey(d => d.TSActivitySearchKeyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExpensesClientConfig_ActivitySearchKey");

                entity.HasOne(d => d.TSUserSearchKey)
                    .WithMany(p => p.TSExpensesClientConfigs)
                    .HasForeignKey(d => d.TSUserSearchKeyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExpensesClientConfig_UserSearchKey");
            });

            modelBuilder.Entity<TSExpensesConfiguration>(entity =>
            {
                entity.ToTable("TSExpensesConfiguration");

                entity.Property(e => e.TSExpensesConfigurationID).ValueGeneratedNever();

                entity.Property(e => e.AllowExpenseEntry)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NextExpenseClaimNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSExpensesPostingStatus>(entity =>
            {
                entity.ToTable("TSExpensesPostingStatus");

                entity.HasIndex(e => e.TSPostToFinancialsStatusID, "IX_TSExpensesPostingStatus_TSPostToFinancialsStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSPostToProjCostStatusID, "IX_TSExpensesPostingStatus_TSPostToProjCostStatusID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSExpensesPostingStatusID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PayrollPostingDate).HasColumnType("datetime");

                entity.Property(e => e.WhenModified).HasColumnType("datetime");

                entity.HasOne(d => d.TSPostToFinancialsStatus)
                    .WithMany(p => p.TSExpensesPostingStatusTSPostToFinancialsStatuses)
                    .HasForeignKey(d => d.TSPostToFinancialsStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExpensesPostingStatus_ExpensesPostingStatusType");

                entity.HasOne(d => d.TSPostToProjCostStatus)
                    .WithMany(p => p.TSExpensesPostingStatusTSPostToProjCostStatuses)
                    .HasForeignKey(d => d.TSPostToProjCostStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExpensesPostingStatus_ExpensesPostingStatusType1");
            });

            modelBuilder.Entity<TSExpensesPostingStatusType>(entity =>
            {
                entity.ToTable("TSExpensesPostingStatusType");

                entity.Property(e => e.TSExpensesPostingStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSExpensesRecordSheetStatus>(entity =>
            {
                entity.ToTable("TSExpensesRecordSheetStatus");

                entity.HasIndex(e => e.TSClaimSheetID, "IX_TSExpensesRecordSheetStatus_TSClaimSheetID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSExpensesRecordStatusTypeID, "IX_TSExpensesRecordSheetStatus_TSExpensesRecordStatusTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSExpensesRecordSheetStatusID).ValueGeneratedNever();

                entity.Property(e => e.Assigner)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WhenModified).HasColumnType("datetime");

                entity.HasOne(d => d.TSClaimSheet)
                    .WithMany(p => p.TSExpensesRecordSheetStatuses)
                    .HasForeignKey(d => d.TSClaimSheetID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSExpensesRecordSheetStatus_TSClaimSheet");

                entity.HasOne(d => d.TSExpensesRecordStatusType)
                    .WithMany(p => p.TSExpensesRecordSheetStatuses)
                    .HasForeignKey(d => d.TSExpensesRecordStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSExpensesRecordSheetStatus_TSExpensesRecordStatusType");
            });

            modelBuilder.Entity<TSExpensesRecordStatusType>(entity =>
            {
                entity.ToTable("TSExpensesRecordStatusType");

                entity.Property(e => e.TSExpensesRecordStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSHumanResource>(entity =>
            {
                entity.HasKey(e => e.TSHumanResourceID)
                    .HasName("PK_Employee")
                    .IsClustered(false);

                entity.ToTable("TSHumanResource");

                entity.HasIndex(e => new { e.TSHumanResourceID, e.EmployeeReference, e.WorksNumber, e.TSPersonID }, "IX_TSHumanResource_EmployeeReference_WorksNumber_TSPersonID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PLSupplierAccountID, "IX_TSHumanResource_PLSupplierAccountID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSPaymentFrequencyTypeID, "IX_TSHumanResource_TSPaymentFrequencyTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSPaymentMethodID, "IX_TSHumanResource_TSPaymentMethodID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSResourceStatusTypeID, "IX_TSHumanResource_TSResourceStatusTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSHumanResourceID).ValueGeneratedNever();

                entity.Property(e => e.BankAccountName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankAccountNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BankPaymentReference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BankSortCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeReference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.WorksNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CBAccount)
                    .WithMany(p => p.TSHumanResources)
                    .HasForeignKey(d => d.CBAccountID)
                    .HasConstraintName("FK_TSEmployee_CBBankAccount");

                entity.HasOne(d => d.PLSupplierAccount)
                    .WithMany(p => p.TSHumanResources)
                    .HasForeignKey(d => d.PLSupplierAccountID)
                    .HasConstraintName("FK_TSEmployee_PLSupplierAccount");

                entity.HasOne(d => d.TSPaymentFrequencyType)
                    .WithMany(p => p.TSHumanResources)
                    .HasForeignKey(d => d.TSPaymentFrequencyTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSEmployee_TSPaymentFrequency");

                entity.HasOne(d => d.TSPaymentMethod)
                    .WithMany(p => p.TSHumanResources)
                    .HasForeignKey(d => d.TSPaymentMethodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSEmployee_TSPaymentMethod");

                entity.HasOne(d => d.TSPerson)
                    .WithMany(p => p.TSHumanResources)
                    .HasForeignKey(d => d.TSPersonID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSEmployee_TSPerson");

                entity.HasOne(d => d.TSResourceStatusType)
                    .WithMany(p => p.TSHumanResources)
                    .HasForeignKey(d => d.TSResourceStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSHumanResource_TSResourceStatusType");
            });

            modelBuilder.Entity<TSHumanResourceChargeRateLink>(entity =>
            {
                entity.HasKey(e => e.TSHumanResourceChargeRateLinkID)
                    .IsClustered(false);

                entity.ToTable("TSHumanResourceChargeRateLink");

                entity.HasIndex(e => new { e.TSHumanResourceID, e.TSChargeRateID }, "IX_TSHumanResourceChargeRateLink_TSHumanResourceID_TSChargeRateID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSHumanResourceChargeRateLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSChargeRate)
                    .WithMany(p => p.TSHumanResourceChargeRateLinks)
                    .HasForeignKey(d => d.TSChargeRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSHumanResourceChargeRateLink_TSCostRate");

                entity.HasOne(d => d.TSHumanResource)
                    .WithMany(p => p.TSHumanResourceChargeRateLinks)
                    .HasForeignKey(d => d.TSHumanResourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSHumanResourceChargeRateLink_TSHumanResource");
            });

            modelBuilder.Entity<TSHumanResourceCostRateLink>(entity =>
            {
                entity.HasKey(e => e.TSHumanResourceCostRateLinkID)
                    .IsClustered(false);

                entity.ToTable("TSHumanResourceCostRateLink");

                entity.HasIndex(e => new { e.TSHumanResourceID, e.TSCostRateID }, "IX_TSHumanResourceCostRateLink_TSHumanResourceID_TSCostRateID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSHumanResourceCostRateLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSCostRate)
                    .WithMany(p => p.TSHumanResourceCostRateLinks)
                    .HasForeignKey(d => d.TSCostRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSHumanResourceCostRateLink_TSCostRate");

                entity.HasOne(d => d.TSHumanResource)
                    .WithMany(p => p.TSHumanResourceCostRateLinks)
                    .HasForeignKey(d => d.TSHumanResourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSHumanResourceCostRateLink_TSHumanResource");
            });

            modelBuilder.Entity<TSHumanResourcePayRateLink>(entity =>
            {
                entity.HasKey(e => e.TSHumanResourcePayRateLinkID)
                    .IsClustered(false);

                entity.ToTable("TSHumanResourcePayRateLink");

                entity.HasIndex(e => new { e.TSHumanResourceID, e.TSPayRateID }, "IX_TSHumanResourcePayRateLink_TSHumanResourceID_TSPayRateID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSHumanResourcePayRateLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSHumanResource)
                    .WithMany(p => p.TSHumanResourcePayRateLinks)
                    .HasForeignKey(d => d.TSHumanResourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeePayRateLink_Employee");

                entity.HasOne(d => d.TSPayRate)
                    .WithMany(p => p.TSHumanResourcePayRateLinks)
                    .HasForeignKey(d => d.TSPayRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeePayRateLink_PayRate");
            });

            modelBuilder.Entity<TSPayRate>(entity =>
            {
                entity.ToTable("TSPayRate");

                entity.HasIndex(e => e.TSPayRateTypeID, "IX_TSPayRate_TSPayRateTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSPayRateID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PayRateValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.TSPayRateType)
                    .WithMany(p => p.TSPayRates)
                    .HasForeignKey(d => d.TSPayRateTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPayRate_TSPayRateType");
            });

            modelBuilder.Entity<TSPayRateType>(entity =>
            {
                entity.ToTable("TSPayRateType");

                entity.Property(e => e.TSPayRateTypeID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSPaymentFrequencyType>(entity =>
            {
                entity.ToTable("TSPaymentFrequencyType");

                entity.Property(e => e.TSPaymentFrequencyTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSPaymentMethod>(entity =>
            {
                entity.ToTable("TSPaymentMethod");

                entity.Property(e => e.TSPaymentMethodID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSPayrollIntegration>(entity =>
            {
                entity.ToTable("TSPayrollIntegration");

                entity.Property(e => e.TSPayrollIntegrationID).ValueGeneratedNever();

                entity.Property(e => e.AccumulatePayments)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoSynchronise)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastImportDate).HasColumnType("datetime");

                entity.Property(e => e.LastSynchroniseEndTime).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSPerson>(entity =>
            {
                entity.ToTable("TSPerson");

                entity.Property(e => e.TSPersonID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FileAsName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleNames)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MobileNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NINumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TSPostingMethodType>(entity =>
            {
                entity.HasKey(e => e.TSPostingMethodID)
                    .HasName("PK_PostingMethodType");

                entity.ToTable("TSPostingMethodType");

                entity.Property(e => e.TSPostingMethodID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSProviderAttribute>(entity =>
            {
                entity.HasKey(e => new { e.TSProviderConfigID, e.TSProviderConfigAttributeID })
                    .HasName("PK_PayrollProviderAttributes");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSReceiptAttachedType>(entity =>
            {
                entity.ToTable("TSReceiptAttachedType");

                entity.Property(e => e.TSReceiptAttachedTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSResourceChargeRateLink>(entity =>
            {
                entity.HasKey(e => e.TSResourceChargeRateLinkID)
                    .IsClustered(false);

                entity.ToTable("TSResourceChargeRateLink");

                entity.HasIndex(e => new { e.TSResourceHierarchyID, e.TSChargeRateID }, "IX_TSResourceChargeRateLink_TSResourceHierarchyID_TSChargeRateID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSResourceChargeRateLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSChargeRate)
                    .WithMany(p => p.TSResourceChargeRateLinks)
                    .HasForeignKey(d => d.TSChargeRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonChargeRateLink_ChargeRate");

                entity.HasOne(d => d.TSResourceHierarchy)
                    .WithMany(p => p.TSResourceChargeRateLinks)
                    .HasForeignKey(d => d.TSResourceHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSResourceChargeRateLink_TSResourceHierarchy");
            });

            modelBuilder.Entity<TSResourceCostRateLink>(entity =>
            {
                entity.HasKey(e => e.TSResourceCostRateLink1)
                    .IsClustered(false);

                entity.ToTable("TSResourceCostRateLink");

                entity.HasIndex(e => new { e.TSResourceHierarchyID, e.TSCostRateID }, "IX_TSResourceCostRateLink_TSResourceHierarchyID_TSCostRateID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSResourceCostRateLink1)
                    .ValueGeneratedNever()
                    .HasColumnName("TSResourceCostRateLink");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSCostRate)
                    .WithMany(p => p.TSResourceCostRateLinks)
                    .HasForeignKey(d => d.TSCostRateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResourceCostRateLink_CostRate");

                entity.HasOne(d => d.TSResourceHierarchy)
                    .WithMany(p => p.TSResourceCostRateLinks)
                    .HasForeignKey(d => d.TSResourceHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSResourceCostRateLink_TSResourceHierarchy");
            });

            modelBuilder.Entity<TSResourceHierarchy>(entity =>
            {
                entity.HasKey(e => e.TSResourceHierarchyID)
                    .HasName("PK_ResourceHierarchyItem")
                    .IsClustered(false);

                entity.ToTable("TSResourceHierarchy");

                entity.HasIndex(e => e.ParentHierarchyID, "IX_TSResourceHierarchy_ParentHierarchyID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSResourceHierarchyItemTypeID, "IX_TSResourceHierarchy_TSResourceHierarchyItemTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSResourceTypeID, "IX_TSResourceHierarchy_TSResourceTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSResourceHierarchyID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ParentHierarchy)
                    .WithMany(p => p.InverseParentHierarchy)
                    .HasForeignKey(d => d.ParentHierarchyID)
                    .HasConstraintName("FK_ResourceHierarchyItem_ResourceHierarchyItem");

                entity.HasOne(d => d.TSResourceHierarchyItemType)
                    .WithMany(p => p.TSResourceHierarchies)
                    .HasForeignKey(d => d.TSResourceHierarchyItemTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResourceHierarchyItem_ResourceHierarchyItemType");

                entity.HasOne(d => d.TSResourceType)
                    .WithMany(p => p.TSResourceHierarchies)
                    .HasForeignKey(d => d.TSResourceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSResourceHierarchy_TSResourceType");
            });

            modelBuilder.Entity<TSResourceHierarchyItemType>(entity =>
            {
                entity.ToTable("TSResourceHierarchyItemType");

                entity.Property(e => e.TSResourceHierarchyItemTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSResourceHierarchyPerson>(entity =>
            {
                entity.HasKey(e => e.TSResourceHierarchyPersonID)
                    .IsClustered(false);

                entity.ToTable("TSResourceHierarchyPerson");

                entity.HasIndex(e => new { e.TSResourceHierarchyID, e.TSPersonID }, "IX_TSResourceHierarchyPerson_TSResourceHierarchyID_TSPersonID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSResourceHierarchyPersonID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSPerson)
                    .WithMany(p => p.TSResourceHierarchyPeople)
                    .HasForeignKey(d => d.TSPersonID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSResourceHierarchyPerson_TSPerson");

                entity.HasOne(d => d.TSResourceHierarchy)
                    .WithMany(p => p.TSResourceHierarchyPeople)
                    .HasForeignKey(d => d.TSResourceHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSResourceHierarchyPerson_TSResourceHierarchy");
            });

            modelBuilder.Entity<TSResourceResourceLink>(entity =>
            {
                entity.HasKey(e => e.TSResourceResourceLinkID)
                    .IsClustered(false);

                entity.ToTable("TSResourceResourceLink");

                entity.HasIndex(e => new { e.OwnerID, e.ResourceID }, "IX_TSResourceResourceLink_OwnerID_ResourceID")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSResourceResourceLinkID).ValueGeneratedNever();

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.TSResourceResourceLinkOwners)
                    .HasForeignKey(d => d.OwnerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSResourceResourceLink_TSHumanResource_Owner");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.TSResourceResourceLinkResources)
                    .HasForeignKey(d => d.ResourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSResourceResourceLink_TSHumanResource_Resource");
            });

            modelBuilder.Entity<TSResourceStatusType>(entity =>
            {
                entity.ToTable("TSResourceStatusType");

                entity.Property(e => e.TSResourceStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TSResourceType>(entity =>
            {
                entity.ToTable("TSResourceType");

                entity.Property(e => e.TSResourceTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSSubmissionFrequencyType>(entity =>
            {
                entity.HasKey(e => e.SubmissionFrequencyTypeID)
                    .HasName("PK_SubmissionFrequencyType");

                entity.ToTable("TSSubmissionFrequencyType");

                entity.Property(e => e.SubmissionFrequencyTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSTermExpensesConfigLink>(entity =>
            {
                entity.HasKey(e => new { e.TSExpensesClientConfigID, e.TSTerminologyID })
                    .HasName("PK_TerminologyExpensesConfigLink");

                entity.ToTable("TSTermExpensesConfigLink");

                entity.HasIndex(e => e.TSExpensesClientConfigID, "IX_TSTermExpensesConfigLink_TSExpensesClientConfigID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSTerminologyID, "IX_TSTermExpensesConfigLink_TSTerminologyID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSExpensesClientConfig)
                    .WithMany(p => p.TSTermExpensesConfigLinks)
                    .HasForeignKey(d => d.TSExpensesClientConfigID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TerminologyExpensesConfigLink_ExpensesClientConfig");

                entity.HasOne(d => d.TSTerminology)
                    .WithMany(p => p.TSTermExpensesConfigLinks)
                    .HasForeignKey(d => d.TSTerminologyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TerminologyExpensesConfigLink_Terminology");
            });

            modelBuilder.Entity<TSTermTimesheetConfigLink>(entity =>
            {
                entity.HasKey(e => new { e.TimesheetClientConfigID, e.TerminologyID })
                    .HasName("PK_TerminologyTimesheetConfigLink");

                entity.ToTable("TSTermTimesheetConfigLink");

                entity.HasIndex(e => e.TerminologyID, "IX_TSTermTimesheetConfigLink_TerminologyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TimesheetClientConfigID, "IX_TSTermTimesheetConfigLink_TimesheetClientConfigID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Terminology)
                    .WithMany(p => p.TSTermTimesheetConfigLinks)
                    .HasForeignKey(d => d.TerminologyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TerminologyTimesheetConfigLink_Terminology");

                entity.HasOne(d => d.TimesheetClientConfig)
                    .WithMany(p => p.TSTermTimesheetConfigLinks)
                    .HasForeignKey(d => d.TimesheetClientConfigID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTermTimesheetConfigLink_TSTimesheetClientConfig");
            });

            modelBuilder.Entity<TSTimeFinancialsIntegration>(entity =>
            {
                entity.HasKey(e => e.TSFinancialsIntegrationID)
                    .HasName("PK_FinancialsIntegration");

                entity.ToTable("TSTimeFinancialsIntegration");

                entity.HasIndex(e => e.TSPostingMethodID, "IX_TSTimeFinancialsIntegration_TSPostingMethodID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSFinancialsIntegrationID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultNominalAccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DefaultNominalAccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DefaultNominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalControlAccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalControlAccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalControlAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TSPostingMethod)
                    .WithMany(p => p.TSTimeFinancialsIntegrations)
                    .HasForeignKey(d => d.TSPostingMethodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FinancialsIntegration_PostingMethodType");
            });

            modelBuilder.Entity<TSTimeProjectIntegration>(entity =>
            {
                entity.ToTable("TSTimeProjectIntegration");

                entity.Property(e => e.TSTimeProjectIntegrationID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsIntegrated)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSTimeRecord>(entity =>
            {
                entity.HasKey(e => e.TSTimeRecordID)
                    .HasName("PK_TimeRecord")
                    .IsClustered(false);

                entity.ToTable("TSTimeRecord");

                entity.HasIndex(e => e.ActivityID, "IX_TSTimeRecord_ActivityID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PCProjectEntryID, "IX_TSTimeRecord_PCProjectEntryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ParentProjectID, "IX_TSTimeRecord_ParentProjectID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.StartDate, e.TSPersonID }, "IX_TSTimeRecord_StartDate_TSPersonID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSChargeRateID, "IX_TSTimeRecord_TSChargeRateID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSCostRateID, "IX_TSTimeRecord_TSCostRateID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSPayRateID, "IX_TSTimeRecord_TSPayRateID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSTimesheetPostStatusID, "IX_TSTimeRecord_TSTimesheetPostStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSTimesheetRecordStatusTypeID, "IX_TSTimeRecord_TSTimesheetRecordStatusTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSTimeRecordID).ValueGeneratedNever();

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DateRecorded).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Department)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedToPayrollDate).HasColumnType("datetime");

                entity.Property(e => e.RejectReason)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalChargeAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalCostAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalPayAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.User)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.PCProjectEntry)
                    .WithMany(p => p.TSTimeRecords)
                    .HasForeignKey(d => d.PCProjectEntryID)
                    .HasConstraintName("FK_TSTimeRecord_PCProjectEntry");

                entity.HasOne(d => d.TSChargeRate)
                    .WithMany(p => p.TSTimeRecords)
                    .HasForeignKey(d => d.TSChargeRateID)
                    .HasConstraintName("FK_TimeRecord_ChargeRate");

                entity.HasOne(d => d.TSCostRate)
                    .WithMany(p => p.TSTimeRecords)
                    .HasForeignKey(d => d.TSCostRateID)
                    .HasConstraintName("FK_TSTimeRecord_TSCostRate");

                entity.HasOne(d => d.TSPayRate)
                    .WithMany(p => p.TSTimeRecords)
                    .HasForeignKey(d => d.TSPayRateID)
                    .HasConstraintName("FK_TimeRecord_PayRate");

                entity.HasOne(d => d.TSPerson)
                    .WithMany(p => p.TSTimeRecords)
                    .HasForeignKey(d => d.TSPersonID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTimeRecord_TSPerson");

                entity.HasOne(d => d.TSTimesheetPostStatus)
                    .WithMany(p => p.TSTimeRecords)
                    .HasForeignKey(d => d.TSTimesheetPostStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTimeRecord_TSTimesheetPostStatus");

                entity.HasOne(d => d.TSTimesheetRecordStatusType)
                    .WithMany(p => p.TSTimeRecords)
                    .HasForeignKey(d => d.TSTimesheetRecordStatusTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTimeRecord_TSTimesheetRecordStatusType");
            });

            modelBuilder.Entity<TSTimeUnitType>(entity =>
            {
                entity.ToTable("TSTimeUnitType");

                entity.Property(e => e.TSTimeUnitTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSTimesheetClientConfig>(entity =>
            {
                entity.ToTable("TSTimesheetClientConfig");

                entity.HasIndex(e => e.TSActivitySearchKeyID, "IX_TSTimesheetClientConfig_TSActivitySearchKeyID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSSubmissionFrequencyTypeID, "IX_TSTimesheetClientConfig_TSSubmissionFrequencyTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSUserSearchKeyID, "IX_TSTimesheetClientConfig_TSUserSearchKeyID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSTimesheetClientConfigID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnableChargeRates)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EnableCostRates)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EnablePayRates)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SelectChargeRates)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SelectCostRates)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SelectPayRates)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TSSubmissionFrequencyTypeID).HasDefaultValueSql("((1))");

                entity.Property(e => e.ZeroSubmissionActivityRetension).HasDefaultValueSql("((4))");

                entity.HasOne(d => d.TSActivitySearchKey)
                    .WithMany(p => p.TSTimesheetClientConfigs)
                    .HasForeignKey(d => d.TSActivitySearchKeyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTimesheetClientConfig_TSActivitySearchKey");

                entity.HasOne(d => d.TSSubmissionFrequencyType)
                    .WithMany(p => p.TSTimesheetClientConfigs)
                    .HasForeignKey(d => d.TSSubmissionFrequencyTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTimesheetClientConfig_TSSubmissionFrequencyType");

                entity.HasOne(d => d.TSUserSearchKey)
                    .WithMany(p => p.TSTimesheetClientConfigs)
                    .HasForeignKey(d => d.TSUserSearchKeyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTimesheetClientConfig_TSUserSearchKey");
            });

            modelBuilder.Entity<TSTimesheetConfiguration>(entity =>
            {
                entity.ToTable("TSTimesheetConfiguration");

                entity.HasIndex(e => e.TSDayOfWeekID, "IX_TSTimesheetConfiguration_TSDayOfWeekID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSTimeUnitTypeID, "IX_TSTimesheetConfiguration_TSTimeUnitTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSWorkPeriodID, "IX_TSTimesheetConfiguration_TSWorkPeriodID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSTimesheetConfigurationID).ValueGeneratedNever();

                entity.Property(e => e.AllowTimesheetEntry)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AllowWeekendWorking)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MaximumHierarchyDepth).HasDefaultValueSql("((3))");

                entity.Property(e => e.NextTimeRecordNumber).HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TSTimeUnitTypeID).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.TSDayOfWeek)
                    .WithMany(p => p.TSTimesheetConfigurations)
                    .HasForeignKey(d => d.TSDayOfWeekID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTimesheetConfiguration_TSDayOfWeek");

                entity.HasOne(d => d.TSTimeUnitType)
                    .WithMany(p => p.TSTimesheetConfigurations)
                    .HasForeignKey(d => d.TSTimeUnitTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTimesheetConfiguration_TSTimeUnitType");

                entity.HasOne(d => d.TSWorkPeriod)
                    .WithMany(p => p.TSTimesheetConfigurations)
                    .HasForeignKey(d => d.TSWorkPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTimesheetConfiguration_TSWorkPeriod");
            });

            modelBuilder.Entity<TSTimesheetPostStatus>(entity =>
            {
                entity.HasKey(e => e.TSTimesheetPostingStatusID)
                    .HasName("PK_PostingStatus")
                    .IsClustered(false);

                entity.ToTable("TSTimesheetPostStatus");

                entity.HasIndex(e => new { e.TSPostedToProjCostStatusID, e.TSPostedToFinancialsStatusID }, "IX_TSTimesheetPostStatus_TSPostedToProjCostStatusID_TSPostedToFinancialsStatusID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSTimesheetPostingStatusID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PayrollPostingDate).HasColumnType("datetime");

                entity.Property(e => e.WhenModified).HasColumnType("datetime");

                entity.HasOne(d => d.TSPostedToFinancialsStatus)
                    .WithMany(p => p.TSTimesheetPostStatusTSPostedToFinancialsStatuses)
                    .HasForeignKey(d => d.TSPostedToFinancialsStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostingStatus_PostedStatusType1");

                entity.HasOne(d => d.TSPostedToProjCostStatus)
                    .WithMany(p => p.TSTimesheetPostStatusTSPostedToProjCostStatuses)
                    .HasForeignKey(d => d.TSPostedToProjCostStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostingStatus_PostedStatusType");
            });

            modelBuilder.Entity<TSTimesheetPostStatusType>(entity =>
            {
                entity.HasKey(e => e.TSPostedStatusTypeID)
                    .HasName("PK_PostedStatus");

                entity.ToTable("TSTimesheetPostStatusType");

                entity.Property(e => e.TSPostedStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSTimesheetRecordStatus>(entity =>
            {
                entity.ToTable("TSTimesheetRecordStatus");

                entity.HasIndex(e => e.TSTimesheetRecordStatusTypeID, "IX_TSTimesheetRecordStatus_TSTimesheetRecordStatusTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSTimesheetRecordStatusID).ValueGeneratedNever();

                entity.Property(e => e.Assigner)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WhenModified).HasColumnType("datetime");

                entity.HasOne(d => d.TSTimesheetRecordStatusType)
                    .WithMany(p => p.TSTimesheetRecordStatuses)
                    .HasForeignKey(d => d.TSTimesheetRecordStatusTypeID)
                    .HasConstraintName("FK_TimeRecordStatus_TimeRecordStatusType");
            });

            modelBuilder.Entity<TSTimesheetRecordStatusType>(entity =>
            {
                entity.ToTable("TSTimesheetRecordStatusType");

                entity.Property(e => e.TSTimesheetRecordStatusTypeID).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSUserProfile>(entity =>
            {
                entity.HasKey(e => e.TSUserProfileID)
                    .HasName("PK_ExpensesUser")
                    .IsClustered(false);

                entity.ToTable("TSUserProfile");

                entity.HasIndex(e => e.SYSProviderConfigurationID, "IX_TSUserProfile_SYSProviderConfigurationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSPersonID, "IX_TSUserProfile_TSPersonID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TSUserStatusID, "IX_TSUserProfile_TSUserStatusID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TSUserProfileID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpensesAuthorisationLimit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LastDateWeeklyTSEntry).HasColumnType("datetime");

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.LastUpdateBy)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PayrollProviderName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PostingNLCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostingNLDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TSUserStatusID).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.SYSProviderConfiguration)
                    .WithMany(p => p.TSUserProfiles)
                    .HasForeignKey(d => d.SYSProviderConfigurationID)
                    .HasConstraintName("FK_TSUserProfile_SYSProviderConfiguration");

                entity.HasOne(d => d.TSPerson)
                    .WithMany(p => p.TSUserProfiles)
                    .HasForeignKey(d => d.TSPersonID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExpensesUserProfile_Person");

                entity.HasOne(d => d.TSUserStatus)
                    .WithMany(p => p.TSUserProfiles)
                    .HasForeignKey(d => d.TSUserStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSUserProfile_TSUserStatus");
            });

            modelBuilder.Entity<TSUserSearchKey>(entity =>
            {
                entity.ToTable("TSUserSearchKey");

                entity.Property(e => e.TSUserSearchKeyID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TSUserStatus>(entity =>
            {
                entity.ToTable("TSUserStatus");

                entity.Property(e => e.TSUserStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSWorkPeriod>(entity =>
            {
                entity.ToTable("TSWorkPeriod");

                entity.Property(e => e.TSWorkPeriodID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TermsOfDelivery>(entity =>
            {
                entity.ToTable("TermsOfDelivery");

                entity.HasIndex(e => e.CountryCodeID, "IX_TermsOfDelivery_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TermsOfDeliveryID).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.TermsOfDeliveries)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_TermsOfDelivery_SYSCountryCode");
            });

            modelBuilder.Entity<TimeUnit>(entity =>
            {
                entity.ToTable("TimeUnit");

                entity.Property(e => e.TimeUnitID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TimeUnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TimesheetHeader>(entity =>
            {
                entity.ToTable("TimesheetHeader");

                entity.Property(e => e.EmployeeNumber)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Surname)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TimesheetDate).HasColumnType("datetime");

                entity.Property(e => e.TotalHours).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<TimesheetLine>(entity =>
            {
                entity.HasIndex(e => e.HeaderID, "IX_TimesheetLines_HeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CategoryDesc)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CategoryRef)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Completed).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Finished)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobDebit)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JobNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LabCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabCredit)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LabDebit)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LabMins).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachCredit)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MachDebit)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MachMins).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonChargeableRef)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpDescription)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpOnStage)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PieceQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupCredit)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SetupDebit)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SetupMins).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StageRef)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Started)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.TimesheetLines)
                    .HasForeignKey(d => d.HeaderID)
                    .HasConstraintName("FK_TimesheetLines_TimesheetHeader");
            });

            modelBuilder.Entity<Titan_SLAWKContacts_vw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Titan_SLAWKContacts_vw");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(121)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Titan_SLContacts_vw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Titan_SLContacts_vw");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactRoleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultEmail)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultFax)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultMobile)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultTelephone)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultWebsite)
                    .HasMaxLength(227)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Titan_SLOrderAckContacts_vw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Titan_SLOrderAckContacts_vw");

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                     .IsRequired()
                     .HasMaxLength(235)
                     .IsUnicode(false);

            });

            modelBuilder.Entity<ToolToolingResource>(entity =>
            {
                entity.HasKey(e => e.ToolToolingResourceID)
                    .IsClustered(false);

                entity.ToTable("ToolToolingResource");

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_ToolToolingResource_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ToolToolingResourceGroupID, "IX_ToolToolingResource_ToolToolingResourceGroupID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ToolToolingResourceID).ValueGeneratedNever();

                entity.Property(e => e.AssetSerialNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CostRate)
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("Cost Rate");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Dimensions)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EfficiencyPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("Nominal Cost Centre");

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("Nominal Department");

                entity.Property(e => e.NominalAccountID).HasComment("Primary Key for Nominal Account");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("Nominal Account Number");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.OriginalCertificate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OverheadNominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadRecoveryPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Overhead Recovery Percentage");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(12, 5)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Range)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SourceCalibration)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CalibrationIntervalPeriod)
                    .WithMany(p => p.ToolToolingResourceCalibrationIntervalPeriods)
                    .HasForeignKey(d => d.CalibrationIntervalPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ToolToolingResource_MsmPeriodFrequencyCalibration");

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.ToolToolingResources)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ToolToolingResource_MsmCostHeading");

                entity.HasOne(d => d.ServiceIntervalPeriod)
                    .WithMany(p => p.ToolToolingResourceServiceIntervalPeriods)
                    .HasForeignKey(d => d.ServiceIntervalPeriodID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ToolToolingResource_MsmPeriodFrequencyService");

                entity.HasOne(d => d.ToolToolingResourceGroup)
                    .WithMany(p => p.ToolToolingResources)
                    .HasForeignKey(d => d.ToolToolingResourceGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ToolToolingResource_ToolToolingResourceGroup");
            });

            modelBuilder.Entity<ToolToolingResourceActivity>(entity =>
            {
                entity.ToTable("ToolToolingResourceActivity");

                entity.HasIndex(e => e.ToolToolingResourceID, "IX_ToolToolingResourceActivity_ToolToolingResourceID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ToolToolingResourceActivityID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NextActivityDate).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasComment("Required By ObjectStore");

                entity.Property(e => e.Reference)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Result)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ThisActivityDate).HasColumnType("datetime");

                entity.HasOne(d => d.ToolToolingResourceActivityType)
                    .WithMany(p => p.ToolToolingResourceActivities)
                    .HasForeignKey(d => d.ToolToolingResourceActivityTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ToolToolingResource_ToolToolingResourceActivityType");

                entity.HasOne(d => d.ToolToolingResource)
                    .WithMany(p => p.ToolToolingResourceActivities)
                    .HasForeignKey(d => d.ToolToolingResourceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ToolToolingResourceActivity_ToolToolingResource");
            });

            modelBuilder.Entity<ToolToolingResourceActivityType>(entity =>
            {
                entity.ToTable("ToolToolingResourceActivityType");

                entity.Property(e => e.ToolToolingResourceActivityTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ToolToolingResourceGroup>(entity =>
            {
                entity.ToTable("ToolToolingResourceGroup");

                entity.HasIndex(e => e.MsmCostHeadingID, "IX_ToolToolingResourceGroup_MsmCostHeadingID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ToolToolingResourceGroupID).ValueGeneratedNever();

                entity.Property(e => e.CostRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EfficiencyPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GroupReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("Nominal Cost Centre");

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("Nominal Department");

                entity.Property(e => e.NominalAccountID).HasComment("Primary Key for Nominal Account");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("Nominal Account Number");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OverheadNominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OverheadRecoveryPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("Overhead Recovery Percentage");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(12, 5)")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.MsmCostHeading)
                    .WithMany(p => p.ToolToolingResourceGroups)
                    .HasForeignKey(d => d.MsmCostHeadingID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ToolToolingResourceGroup_MsmCostHeading");
            });

            modelBuilder.Entity<TraceBOMBuildComp>(entity =>
            {
                entity.ToTable("TraceBOMBuildComp");

                entity.HasIndex(e => e.BOMBuildComponentID, "IX_TraceBOMBuildComp_BOMBuildComponentID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceBOMBuildFinItemID, "IX_TraceBOMBuildComp_TraceBOMBuildFinItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableBinItemID, "IX_TraceBOMBuildComp_TraceableBinItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceBOMBuildCompID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BOMBuildComponent)
                    .WithMany(p => p.TraceBOMBuildComps)
                    .HasForeignKey(d => d.BOMBuildComponentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceBOMBuildComp_BOMBuildComponent");

                entity.HasOne(d => d.TraceBOMBuildFinItem)
                    .WithMany(p => p.TraceBOMBuildComps)
                    .HasForeignKey(d => d.TraceBOMBuildFinItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceBOMBuildComp_TraceBOMBuildFinItem");
            });

            modelBuilder.Entity<TraceBOMBuildFinItem>(entity =>
            {
                entity.ToTable("TraceBOMBuildFinItem");

                entity.HasIndex(e => e.BOMBuildFinishedItemID, "IX_TraceBOMBuildFinItem_BOMBuildFinishedItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableBinItemID, "IX_TraceBOMBuildFinItem_TraceableBinItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceBOMBuildFinItemID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.BOMBuildFinishedItem)
                    .WithMany(p => p.TraceBOMBuildFinItems)
                    .HasForeignKey(d => d.BOMBuildFinishedItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceBOMBuildFinItem_BOMBuildFinishedItem");
            });

            modelBuilder.Entity<TraceCountSheetItem>(entity =>
            {
                entity.ToTable("TraceCountSheetItem");

                entity.HasIndex(e => e.IdentificationNo, "IX_TraceCountSheetItem_IdentificationNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StocktakeCountShtItemID, "IX_TraceCountSheetItem_StocktakeCountShtItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableBinItemID, "IX_TraceCountSheetItem_TraceableBinItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceCountSheetItemID).ValueGeneratedNever();

                entity.Property(e => e.ActualQuantityInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RecordedQuantityInStock).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.StocktakeCountShtItem)
                    .WithMany(p => p.TraceCountSheetItems)
                    .HasForeignKey(d => d.StocktakeCountShtItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceCountSheetItem_StocktakeCountSheetItem");

                entity.HasOne(d => d.TraceableBinItem)
                    .WithMany(p => p.TraceCountSheetItems)
                    .HasForeignKey(d => d.TraceableBinItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceCountSheetItem_TraceableBinItem");
            });

            modelBuilder.Entity<TracePOPInvCredLine>(entity =>
            {
                entity.ToTable("TracePOPInvCredLine");

                entity.HasIndex(e => e.PopInvoiceCreditLineID, "IX_TracePOPInvCredLine_PopInvoiceCreditLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableBinItemID, "IX_TracePOPInvCredLine_TraceableBinItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TracePOPInvCredLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InvoicedCreditedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.PopInvoiceCreditLine)
                    .WithMany(p => p.TracePOPInvCredLines)
                    .HasForeignKey(d => d.PopInvoiceCreditLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TracePOPInvCredLine_POPInvoiceCreditLine");

                entity.HasOne(d => d.TraceableBinItem)
                    .WithMany(p => p.TracePOPInvCredLines)
                    .HasForeignKey(d => d.TraceableBinItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TracePOPInvCredLine_TraceableBinItem");
            });

            modelBuilder.Entity<TracePOPRcptRtnLine>(entity =>
            {
                entity.ToTable("TracePOPRcptRtnLine");

                entity.HasIndex(e => e.POPReceiptReturnLineID, "IX_TracePOPRcptRtnLine_POPReceiptReturnLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableBinItemID, "IX_TracePOPRcptRtnLine_TraceableBinItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TracePOPRcptRtnLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InvoicedCreditedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.POPReceiptReturnLine)
                    .WithMany(p => p.TracePOPRcptRtnLines)
                    .HasForeignKey(d => d.POPReceiptReturnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TracePOPRcptRtnLine_POPReceiptReturnLine");

                entity.HasOne(d => d.TraceableBinItem)
                    .WithMany(p => p.TracePOPRcptRtnLines)
                    .HasForeignKey(d => d.TraceableBinItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TracePOPRcptRtnLine_TraceableBinItem");
            });

            modelBuilder.Entity<TraceSOPDespRcptLine>(entity =>
            {
                entity.ToTable("TraceSOPDespRcptLine");

                entity.HasIndex(e => e.SOPDespatchReceiptLineID, "IX_TraceSOPDespRcptLine_SOPDespatchReceiptLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableBinItemID, "IX_TraceSOPDespRcptLine_TraceableBinItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceSOPDespRcptLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.SOPDespatchReceiptLine)
                    .WithMany(p => p.TraceSOPDespRcptLines)
                    .HasForeignKey(d => d.SOPDespatchReceiptLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceSOPDespRcptLine_SOPDespatchReceiptLine");

                entity.HasOne(d => d.TraceableBinItem)
                    .WithMany(p => p.TraceSOPDespRcptLines)
                    .HasForeignKey(d => d.TraceableBinItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceSOPDespRcptLine_TraceableBinItem");
            });

            modelBuilder.Entity<TraceSOPInvCredLine>(entity =>
            {
                entity.ToTable("TraceSOPInvCredLine");

                entity.HasIndex(e => e.SOPInvoiceCreditLineID, "IX_TraceSOPInvCredLine_SOPInvoiceCreditLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableBinItemID, "IX_TraceSOPInvCredLine_TraceableBinItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceSOPInvCredLineID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.SOPInvoiceCreditLine)
                    .WithMany(p => p.TraceSOPInvCredLines)
                    .HasForeignKey(d => d.SOPInvoiceCreditLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceSOPInvCredLine_SOPInvoiceCreditLine");

                entity.HasOne(d => d.TraceableBinItem)
                    .WithMany(p => p.TraceSOPInvCredLines)
                    .HasForeignKey(d => d.TraceableBinItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceSOPInvCredLine_TraceableBinItem");
            });

            modelBuilder.Entity<TraceableAllocationBal>(entity =>
            {
                entity.ToTable("TraceableAllocationBal");

                entity.HasIndex(e => e.AllocationBalanceID, "IX_TraceableAllocationBal_AllocationBalanceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableBinItemID, "IX_TraceableAllocationBal_TraceableBinItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceableAllocationBalID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DespatchedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.AllocationBalance)
                    .WithMany(p => p.TraceableAllocationBals)
                    .HasForeignKey(d => d.AllocationBalanceID)
                    .HasConstraintName("FK_BatchAllocationBalance_AllocationBalance");

                entity.HasOne(d => d.TraceableBinItem)
                    .WithMany(p => p.TraceableAllocationBals)
                    .HasForeignKey(d => d.TraceableBinItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BatchAllocationBalance_BinItemBatch");
            });

            modelBuilder.Entity<TraceableBinItem>(entity =>
            {
                entity.ToTable("TraceableBinItem");

                entity.HasIndex(e => e.BinItemID, "IX_TraceableBinItem_BinItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableItemID, "IX_TraceableBinItem_TraceableItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseItemID, "IX_TraceableBinItem_WarehouseItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceableBinItemID).ValueGeneratedNever();

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GoodsInQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.GoodsOutQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.BinItem)
                    .WithMany(p => p.TraceableBinItems)
                    .HasForeignKey(d => d.BinItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BinItemBatch_BinItem");

                entity.HasOne(d => d.TraceableItem)
                    .WithMany(p => p.TraceableBinItems)
                    .HasForeignKey(d => d.TraceableItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableBinItem_TraceableItem");
            });

            modelBuilder.Entity<TraceableItem>(entity =>
            {
                entity.ToTable("TraceableItem");

                entity.HasIndex(e => new { e.IdentificationNo, e.StockItemID, e.UniqueDuplicateNo }, "IX_TraceableItem_IdentificationNo_StockItemID_UniqueDuplicateNo")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TraceableItemStatusID, e.StockItemID, e.GoodsOutQuantity }, "IX_TraceableItem_SOPGoodsReceived")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceAreaTypeID, "IX_TraceableItem_SourceAreaTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_TraceableItem_StockItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableItemStatusID, "IX_TraceableItem_TraceableItemStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableTypeID, "IX_TraceableItem_TraceableTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceableItemID).ValueGeneratedNever();

                entity.Property(e => e.AdditionalReference)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GoodsInQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.GoodsOutQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PurchaseOrderNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.SellByDate).HasColumnType("datetime");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupplierGRNNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.UseByDate).HasColumnType("datetime");

                entity.HasOne(d => d.SourceAreaType)
                    .WithMany(p => p.TraceableItems)
                    .HasForeignKey(d => d.SourceAreaTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableItem_SourceAreaType");

                entity.HasOne(d => d.StockItem)
                    .WithMany(p => p.TraceableItems)
                    .HasForeignKey(d => d.StockItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableItem_StockItem");

                entity.HasOne(d => d.TraceableItemStatus)
                    .WithMany(p => p.TraceableItems)
                    .HasForeignKey(d => d.TraceableItemStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableItem_TraceableItemStatus");

                entity.HasOne(d => d.TraceableType)
                    .WithMany(p => p.TraceableItems)
                    .HasForeignKey(d => d.TraceableTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableItem_TraceableType");
            });

            modelBuilder.Entity<TraceableItemArch>(entity =>
            {
                entity.ToTable("TraceableItemArch");

                entity.HasIndex(e => e.SourceAreaTypeID, "IX_TraceableItemArch_SourceAreaTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemID, "IX_TraceableItemArch_StockItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableItemStatusID, "IX_TraceableItemArch_TraceableItemStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableTypeID, "IX_TraceableItemArch_TraceableTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceableItemArchID).ValueGeneratedNever();

                entity.Property(e => e.AdditionalReference)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GoodsInQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.GoodsOutQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PurchaseOrderNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.SellByDate).HasColumnType("datetime");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupplierGRNNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.UseByDate).HasColumnType("datetime");

                entity.HasOne(d => d.SourceAreaType)
                    .WithMany(p => p.TraceableItemArches)
                    .HasForeignKey(d => d.SourceAreaTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableItemArch_SourceAreaType");

                entity.HasOne(d => d.StockItem)
                    .WithMany(p => p.TraceableItemArches)
                    .HasForeignKey(d => d.StockItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableItemArch_StockItem");

                entity.HasOne(d => d.TraceableItemStatus)
                    .WithMany(p => p.TraceableItemArches)
                    .HasForeignKey(d => d.TraceableItemStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableItemArch_TraceableItemStatus");

                entity.HasOne(d => d.TraceableType)
                    .WithMany(p => p.TraceableItemArches)
                    .HasForeignKey(d => d.TraceableTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableItemArch_TraceableType");
            });

            modelBuilder.Entity<TraceableItemStatus>(entity =>
            {
                entity.ToTable("TraceableItemStatus");

                entity.Property(e => e.TraceableItemStatusID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TraceableMovementBal>(entity =>
            {
                entity.ToTable("TraceableMovementBal");

                entity.HasIndex(e => e.MovementBalanceID, "IX_TraceableMovementBal_MovementBalanceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableBinItemID, "IX_TraceableMovementBal_TraceableBinItemID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceableMovementBalID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OpeningStockLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockLevelIssued).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.MovementBalance)
                    .WithMany(p => p.TraceableMovementBals)
                    .HasForeignKey(d => d.MovementBalanceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BatchMovementBalance_MovementBalance");

                entity.HasOne(d => d.TraceableBinItem)
                    .WithMany(p => p.TraceableMovementBals)
                    .HasForeignKey(d => d.TraceableBinItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BatchMovementBalance_BinItemBatch");
            });

            modelBuilder.Entity<TraceableTransArchive>(entity =>
            {
                entity.ToTable("TraceableTransArchive");

                entity.HasIndex(e => e.TraceableItemID, "IX_TraceableTransArchive_TraceableItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableItemStatusID, "IX_TraceableTransArchive_TraceableItemStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableTransTypeID, "IX_TraceableTransArchive_TraceableTransTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransactionArchiveID, "IX_TraceableTransArchive_TransactionArchiveID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceableTransArchiveID).ValueGeneratedNever();

                entity.Property(e => e.AdditionalReference)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SellByDate).HasColumnType("datetime");

                entity.Property(e => e.UseByDate).HasColumnType("datetime");

                entity.HasOne(d => d.TraceableItemStatus)
                    .WithMany(p => p.TraceableTransArchives)
                    .HasForeignKey(d => d.TraceableItemStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableTransArchive_TraceableItemStatus");

                entity.HasOne(d => d.TraceableTransType)
                    .WithMany(p => p.TraceableTransArchives)
                    .HasForeignKey(d => d.TraceableTransTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableTransArchive_TraceableTransType");

                entity.HasOne(d => d.TransactionArchive)
                    .WithMany(p => p.TraceableTransArchives)
                    .HasForeignKey(d => d.TransactionArchiveID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableTransArchive_TransactionArchive");
            });

            modelBuilder.Entity<TraceableTransHistory>(entity =>
            {
                entity.ToTable("TraceableTransHistory");

                entity.HasIndex(e => e.TraceableItemID, "IX_TraceableTransHistory_TraceableItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableItemStatusID, "IX_TraceableTransHistory_TraceableItemStatusID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableTransTypeID, "IX_TraceableTransHistory_TraceableTransTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransactionHistoryID, "IX_TraceableTransHistory_TransactionHistoryID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableTransTypeID, "IX_TraceableTransHistory_TransactionHistoryID_TransTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TraceableTransHistoryID, e.TransactionHistoryID, e.TraceableItemID }, "_dta_index_TraceableTransHistory_18_836198029__K1_K2_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TransactionHistoryID, e.TraceableTransHistoryID, e.TraceableItemID }, "_dta_index_TraceableTransHistory_18_836198029__K2_K1_K4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TraceableTransHistoryID).ValueGeneratedNever();

                entity.Property(e => e.AdditionalReference)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SellByDate).HasColumnType("datetime");

                entity.Property(e => e.UseByDate).HasColumnType("datetime");

                entity.HasOne(d => d.TraceableItemStatus)
                    .WithMany(p => p.TraceableTransHistories)
                    .HasForeignKey(d => d.TraceableItemStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableTransHistory_TraceableItemStatus");

                entity.HasOne(d => d.TraceableTransType)
                    .WithMany(p => p.TraceableTransHistories)
                    .HasForeignKey(d => d.TraceableTransTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableTransHistory_TraceableTransType");

                entity.HasOne(d => d.TransactionHistory)
                    .WithMany(p => p.TraceableTransHistories)
                    .HasForeignKey(d => d.TransactionHistoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TraceableTransHistory_TransactionHistory");
            });

            modelBuilder.Entity<TraceableTransType>(entity =>
            {
                entity.ToTable("TraceableTransType");

                entity.Property(e => e.TraceableTransTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TraceableType>(entity =>
            {
                entity.ToTable("TraceableType");

                entity.Property(e => e.TraceableTypeID).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransactionArchive>(entity =>
            {
                entity.ToTable("TransactionArchive");

                entity.HasIndex(e => e.EntrySourceID, "IX_TransactionArchive_EntrySourceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ItemID, "IX_TransactionArchive_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Reference, "IX_TransactionArchive_Reference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceAreaTypeID, "IX_TransactionArchive_SourceAreaTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransactionTypeID, "IX_TransactionArchive_TransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TransactionArchiveID).ValueGeneratedNever();

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IssueValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceAreaName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceAreaReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TotalOrderDiscount).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UnitCostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitDiscountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitIssuePrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserRevisionNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VersionNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.EntrySource)
                    .WithMany(p => p.TransactionArchives)
                    .HasForeignKey(d => d.EntrySourceID)
                    .HasConstraintName("FK_TransactionArchive_EntrySource");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TransactionArchives)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionArchive_StockItem");

                entity.HasOne(d => d.SourceAreaType)
                    .WithMany(p => p.TransactionArchives)
                    .HasForeignKey(d => d.SourceAreaTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionArchive_SourceAreaType");

                entity.HasOne(d => d.TransactionType)
                    .WithMany(p => p.TransactionArchives)
                    .HasForeignKey(d => d.TransactionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionArchive_TransactionType");
            });

            modelBuilder.Entity<TransactionGroup>(entity =>
            {
                entity.ToTable("TransactionGroup");

                entity.Property(e => e.TransactionGroupID).ValueGeneratedNever();

                entity.Property(e => e.TransactionGroupName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransactionHistory>(entity =>
            {
                entity.ToTable("TransactionHistory");

                entity.HasIndex(e => e.EntrySourceID, "IX_TransactionHistory_EntrySourceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ItemID, e.TransactionDate }, "IX_TransactionHistory_ItemID_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Reference, "IX_TransactionHistory_Reference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SourceAreaTypeID, "IX_TransactionHistory_SourceAreaTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransactionDate, "IX_TransactionHistory_TransactionDate")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TransactionTypeID, "IX_TransactionHistory_TransactionTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.TransactionTypeID, e.TransactionHistoryID, e.SecondReference }, "_dta_index_TransactionHistory_18_916198314__K3_K1_K10_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Reference, e.TransactionHistoryID, e.TransactionTypeID, e.SecondReference }, "_dta_index_TransactionHistory_18_916198314__K9_K1_K3_K10_4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TransactionHistoryID).ValueGeneratedNever();

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode10)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode11)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode12)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode13)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode14)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode15)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode16)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode17)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode18)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode19)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode20)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode7)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode8)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode9)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CostValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IssueValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SecondReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceAreaName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceAreaReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TotalOrderDiscount).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UnitCostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitDiscountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitIssuePrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserRevisionNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VersionNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.EntrySource)
                    .WithMany(p => p.TransactionHistories)
                    .HasForeignKey(d => d.EntrySourceID)
                    .HasConstraintName("FK_TransactionHistory_EntrySource");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TransactionHistories)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionHistory_StockItem");

                entity.HasOne(d => d.SourceAreaType)
                    .WithMany(p => p.TransactionHistories)
                    .HasForeignKey(d => d.SourceAreaTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionHistory_SourceAreaType");

                entity.HasOne(d => d.TransactionType)
                    .WithMany(p => p.TransactionHistories)
                    .HasForeignKey(d => d.TransactionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionHistory_TransactionType");
            });

            modelBuilder.Entity<TransactionType>(entity =>
            {
                entity.ToTable("TransactionType");

                entity.HasIndex(e => e.TransactionGroupID, "IX_TransactionType_TransactionGroupID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TransactionTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.TransactionTypeName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.HasOne(d => d.TransactionGroup)
                    .WithMany(p => p.TransactionTypes)
                    .HasForeignKey(d => d.TransactionGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionType_TransactionGroup");
            });

            modelBuilder.Entity<UniqueStockItemsWithDiscountView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UniqueStockItemsWithDiscountView");

                entity.Property(e => e.ProductGroupCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StockItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockItemName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.UnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.ToTable("Unit");

                entity.HasIndex(e => e.Name, "IX_Unit_Name")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.UnitID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MultipleOfBaseUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<UnitOfMeasureType>(entity =>
            {
                entity.ToTable("UnitOfMeasureType");

                entity.HasIndex(e => e.UnitOfMeasureTypeName, "IX_UnitOfMeasureType")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.UnitOfMeasureTypeID).ValueGeneratedNever();

                entity.Property(e => e.UnitOfMeasureTypeName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserDefaultWarehouse>(entity =>
            {
                entity.HasKey(e => new { e.SOPUserID, e.SOPOrderEntryTypeID });

                entity.ToTable("UserDefaultWarehouse");

                entity.HasIndex(e => e.SOPOrderEntryTypeID, "IX_UserDefaultWarehouse_SOPOrderEntryTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.UserDefaultWarehouseID, "IX_UserDefaultWarehouse_UserDefaultWarehouseID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_UserDefaultWarehouse_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.SOPOrderEntryType)
                    .WithMany(p => p.UserDefaultWarehouses)
                    .HasForeignKey(d => d.SOPOrderEntryTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserDefaultWarehouse_SOPOrderEntryType");

                entity.HasOne(d => d.SOPUser)
                    .WithMany(p => p.UserDefaultWarehouses)
                    .HasForeignKey(d => d.SOPUserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserDefaultWarehouse_SOPUser");

                entity.HasOne(d => d.SOPUserNavigation)
                    .WithMany(p => p.UserDefaultWarehouses)
                    .HasPrincipalKey(p => p.SOPUserID)
                    .HasForeignKey(d => d.SOPUserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserDefaultWarehouse_SOPUserPermission");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.UserDefaultWarehouses)
                    .HasForeignKey(d => d.WarehouseID)
                    .HasConstraintName("FK_UserDefaultWarehouse_Warehouse");
            });

            modelBuilder.Entity<ValueDiscountBreak>(entity =>
            {
                entity.ToTable("ValueDiscountBreak");

                entity.HasIndex(e => e.OrderValueDiscountID, "IX_ValueDiscountBreak_OrderValueDiscountID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ValueDiscountBreakID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountPercentValue).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ValueMoreThan).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.OrderValueDiscount)
                    .WithMany(p => p.ValueDiscountBreaks)
                    .HasForeignKey(d => d.OrderValueDiscountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValueDiscountBreak_OrderValueDiscount");
            });

            modelBuilder.Entity<ViewLookupId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLookupId");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Product Group");

                entity.Property(e => e.SabreSpareNumber1).HasColumnType("decimal(20, 5)");
            });

            modelBuilder.Entity<View_1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_1");

                entity.Property(e => e.Actual).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Adjustments).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountName)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.WeekStartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WTEProjectItemExpenseFilteredMRUSearchView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WTEProjectItemExpenseFilteredMRUSearchView");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.MaxDateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<WTEProjectItemExpenseFilteredSearchView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WTEProjectItemExpenseFilteredSearchView");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<WTEProjectItemExpenseMRUSearchView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WTEProjectItemExpenseMRUSearchView");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.MaxDateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<WTEProjectItemExpenseSearchView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WTEProjectItemExpenseSearchView");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<WTEProjectItemSearchCTEView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WTEProjectItemSearchCTEView");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<WTEProjectItemSearchView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WTEProjectItemSearchView");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<WTEProjectItemTimesheetFilteredMRUSearchView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WTEProjectItemTimesheetFilteredMRUSearchView");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.MaxDateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<WTEProjectItemTimesheetFilteredSearchView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WTEProjectItemTimesheetFilteredSearchView");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<WTEProjectItemTimesheetMRUSearchView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WTEProjectItemTimesheetMRUSearchView");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.MaxDateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<WTEProjectItemTimesheetSearchView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WTEProjectItemTimesheetSearchView");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<Warehouse>(entity =>
            {
                entity.ToTable("Warehouse");

                entity.HasIndex(e => e.CountryCodeID, "IX_Warehouse_CountryCodeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Name, "IX_Warehouse_Name")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseTypeID, "IX_Warehouse_WarehouseTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WarehouseID).ValueGeneratedNever();

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LastCompletedStocktake).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WebAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CountryCode)
                    .WithMany(p => p.Warehouses)
                    .HasForeignKey(d => d.CountryCodeID)
                    .HasConstraintName("FK_Warehouse_SYSCountryCode");

                entity.HasOne(d => d.WarehouseType)
                    .WithMany(p => p.Warehouses)
                    .HasForeignKey(d => d.WarehouseTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Warehouse_WarehouseType");
            });

            modelBuilder.Entity<WarehouseItem>(entity =>
            {
                entity.ToTable("WarehouseItem");

                entity.HasIndex(e => e.ItemID, "IX_WarehouseItem_ItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ItemID, e.ReorderLevel, e.DateOfLastSale, e.ConfirmedQtyInStock, e.UnconfirmedQtyInStock, e.QuantityAllocatedSOP, e.QuantityAllocatedStock, e.QuantityOnPOPOrder, e.DateOfLastStockCount, e.QuantityAllocatedBOM }, "IX_WarehouseItem_StockItemView")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.WarehouseID, e.ItemID }, "IX_WarehouseItem_WarehouseID_ItemID")
                    .IsUnique();

                entity.Property(e => e.WarehouseItemID).ValueGeneratedNever();

                entity.Property(e => e.ConfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateOfLastSale).HasColumnType("datetime");

                entity.Property(e => e.DateOfLastStockCount).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HoldingValueAtBuyPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaximumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PreReceiptAllocationQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedBOM).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedSOP).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityAllocatedStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnconfirmedQtyInStock).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.WarehouseItems)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WarehouseItem_StockItem");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.WarehouseItems)
                    .HasForeignKey(d => d.WarehouseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WarehouseItem_Warehouse");
            });

            modelBuilder.Entity<WarehouseType>(entity =>
            {
                entity.ToTable("WarehouseType");

                entity.Property(e => e.WarehouseTypeID).ValueGeneratedNever();

                entity.Property(e => e.WarehouseTypeName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<WopAllocationBalance>(entity =>
            {
                entity.ToTable("WopAllocationBalance");

                entity.HasIndex(e => e.AllocationBalanceID, "IX_WopAllocationBalance_AllocationBalanceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopAllocationLineID, "IX_WopAllocationBalance_WopAllocationLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopAllocationBalanceID).ValueGeneratedNever();

                entity.Property(e => e.AllocationQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.WopAllocationLine)
                    .WithMany(p => p.WopAllocationBalances)
                    .HasForeignKey(d => d.WopAllocationLineID)
                    .HasConstraintName("FK_WopAllocationBalance_WopAllocationLine");
            });

            modelBuilder.Entity<WopAllocationLine>(entity =>
            {
                entity.ToTable("WopAllocationLine");

                entity.HasIndex(e => e.WopComponentLineID, "IX_WopAllocationLine_WopComponentLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopAllocationLineID).ValueGeneratedNever();

                entity.Property(e => e.AllocationQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.WopComponentLine)
                    .WithMany(p => p.WopAllocationLines)
                    .HasForeignKey(d => d.WopComponentLineID)
                    .HasConstraintName("FK_WopAllocationLine_WopComponentLine");
            });

            modelBuilder.Entity<WopBomComponentLineLink>(entity =>
            {
                entity.ToTable("WopBomComponentLineLink");

                entity.HasIndex(e => e.BomComponentLineID, "IX_WopBomComponentLineLink_BomComponentLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopComponentLineID, "IX_WopBomComponentLineLink_WopComponentLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopBomComponentLineLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BomComponentLine)
                    .WithMany(p => p.WopBomComponentLineLinks)
                    .HasForeignKey(d => d.BomComponentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopBomComponentLineLink_BomComponentLine");

                entity.HasOne(d => d.WopComponentLine)
                    .WithMany(p => p.WopBomComponentLineLinks)
                    .HasForeignKey(d => d.WopComponentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopBomComponentLineLink_WopComponentLine");
            });

            modelBuilder.Entity<WopBuild>(entity =>
            {
                entity.ToTable("WopBuild");

                entity.HasIndex(e => e.BomBuildSessionID, "IX_WopBuild_BomBuildSessionID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopOrderID, "IX_WopBuild_WopOrderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopBuildID).ValueGeneratedNever();

                entity.Property(e => e.BuildDateTime).HasColumnType("datetime");

                entity.Property(e => e.BuildNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuildReference)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BuiltBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BomBuildSession)
                    .WithMany(p => p.WopBuilds)
                    .HasForeignKey(d => d.BomBuildSessionID)
                    .HasConstraintName("FK_WopBuildSession_BomBuildSession");

                entity.HasOne(d => d.WopOrder)
                    .WithMany(p => p.WopBuilds)
                    .HasForeignKey(d => d.WopOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopBuild_WopOrder");
            });

            modelBuilder.Entity<WopBuildComponent>(entity =>
            {
                entity.ToTable("WopBuildComponent");

                entity.HasIndex(e => e.ChildWopBuildID, "IX_WopBuildComponent_ChildWopBuildID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopBuildProductID, "IX_WopBuildComponent_WopBuildProductID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopComponentLineID, "IX_WopBuildComponent_WopComponentLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopBuildComponentID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ChildWopBuild)
                    .WithMany(p => p.WopBuildComponents)
                    .HasForeignKey(d => d.ChildWopBuildID)
                    .HasConstraintName("FK_WopBuildComponent_WopBuild1");

                entity.HasOne(d => d.WopBuildProduct)
                    .WithMany(p => p.WopBuildComponents)
                    .HasForeignKey(d => d.WopBuildProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopBuildComponent_WopBuild");

                entity.HasOne(d => d.WopComponentLine)
                    .WithMany(p => p.WopBuildComponents)
                    .HasForeignKey(d => d.WopComponentLineID)
                    .HasConstraintName("FK_WopBuildComponent_WopComponentLine");
            });

            modelBuilder.Entity<WopBuildComponentIssueLink>(entity =>
            {
                entity.ToTable("WopBuildComponentIssueLink");

                entity.HasIndex(e => e.WopBuildComponentID, "IX_WopBuildComponentIssueLink_WopBuildComponentID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopIssueID, "IX_WopBuildComponentIssueLink_WopIssueID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopBuildComponentIssueLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.WopBuildComponent)
                    .WithMany(p => p.WopBuildComponentIssueLinks)
                    .HasForeignKey(d => d.WopBuildComponentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopBuildComponentIssueLink_WopBuildComponent");

                entity.HasOne(d => d.WopIssue)
                    .WithMany(p => p.WopBuildComponentIssueLinks)
                    .HasForeignKey(d => d.WopIssueID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopBuildComponentIssueLink_WopIssue");
            });

            modelBuilder.Entity<WopBuildComponentTraceability>(entity =>
            {
                entity.ToTable("WopBuildComponentTraceability");

                entity.HasIndex(e => e.WopBuildTraceableComponentID, "IX_WopBuildComponentTraceability_WopBuildTraceableComponentID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopBuildTraceableProductID, "IX_WopBuildComponentTraceability_WopBuildTraceableProductID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopBuildComponentTraceabilityID)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.ComponentQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.WopBuildTraceableComponent)
                    .WithMany(p => p.WopBuildComponentTraceabilities)
                    .HasForeignKey(d => d.WopBuildTraceableComponentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopBuildComponentTraceability_WopBuildComponent");

                entity.HasOne(d => d.WopBuildTraceableProduct)
                    .WithMany(p => p.WopBuildComponentTraceabilities)
                    .HasForeignKey(d => d.WopBuildTraceableProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopBuildComponentTraceability_WopBuildTraceableProduct");
            });

            modelBuilder.Entity<WopBuildProduct>(entity =>
            {
                entity.ToTable("WopBuildProduct");

                entity.HasIndex(e => e.MovementBalanceID, "IX_WopBuildProduct_MovementBalanceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopBuildID, "IX_WopBuildProduct_WopBuildID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopBuildProductID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.WopBuild)
                    .WithMany(p => p.WopBuildProducts)
                    .HasForeignKey(d => d.WopBuildID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopBuildSessionProduct_WopBuildSession");
            });

            modelBuilder.Entity<WopBuildProductNominalPosting>(entity =>
            {
                entity.ToTable("WopBuildProductNominalPosting");

                entity.HasIndex(e => e.WopBuildProductID, "IX_WopBuildProductNominalPosting_WopBuildProductID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopBuildProductNominalPostingID).ValueGeneratedNever();

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.WopBuildProduct)
                    .WithMany(p => p.WopBuildProductNominalPostings)
                    .HasForeignKey(d => d.WopBuildProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopBuildProductNominalPosting_WopBuildProduct");
            });

            modelBuilder.Entity<WopBuildTraceableComponent>(entity =>
            {
                entity.ToTable("WopBuildTraceableComponent");

                entity.HasIndex(e => e.TraceableItemID, "IX_WopBuildTraceableComponent_TraceableItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopBuildComponentID, "IX_WopBuildTraceableComponent_WopBuildComponentID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopBuildTraceableComponentID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.WopBuildComponent)
                    .WithMany(p => p.WopBuildTraceableComponents)
                    .HasForeignKey(d => d.WopBuildComponentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopBuildTraceableComponent_WopBuildComponent");
            });

            modelBuilder.Entity<WopBuildTraceableProduct>(entity =>
            {
                entity.ToTable("WopBuildTraceableProduct");

                entity.HasIndex(e => e.WopBuildProductID, "IX_WopBuildTraceableProduct_WopBuildProductID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopBuildTraceableProductID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.WopBuildProduct)
                    .WithMany(p => p.WopBuildTraceableProducts)
                    .HasForeignKey(d => d.WopBuildProductID)
                    .HasConstraintName("FK_WopBuildTraceableProduct_WopBuildProduct");
            });

            modelBuilder.Entity<WopComponentLine>(entity =>
            {
                entity.ToTable("WopComponentLine");

                entity.HasIndex(e => e.WopComponentLineTypeID, "IX_WopComponentLine_WopComponentLineTypeID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopOrderID, "IX_WopComponentLine_WopOrderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopOrderLinkID, "IX_WopComponentLine_WopOrderLinkID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopComponentLineID).ValueGeneratedNever();

                entity.Property(e => e.CommentText)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentFile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityAllocated).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityIssued).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityRequired).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityUsedInBuild).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SequenceNumber)
                    .HasColumnType("decimal(15, 6)")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.WopComponentLineType)
                    .WithMany(p => p.WopComponentLines)
                    .HasForeignKey(d => d.WopComponentLineTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopComponentLine_WopComponentLineType");

                entity.HasOne(d => d.WopOrder)
                    .WithMany(p => p.WopComponentLines)
                    .HasForeignKey(d => d.WopOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopComponentLine_WopOrder");
            });

            modelBuilder.Entity<WopComponentLineType>(entity =>
            {
                entity.ToTable("WopComponentLineType");

                entity.Property(e => e.WopComponentLineTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<WopIssue>(entity =>
            {
                entity.ToTable("WopIssue");

                entity.HasIndex(e => e.WopComponentLineID, "IX_WopIssue_WopComponentLineID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopIssueID).ValueGeneratedNever();

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CreditNominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreditNominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreditNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DebitNominalAccountCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DebitNominalAccountDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DebitNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IssueBy)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDateTime).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReversedQuantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.WopComponentLine)
                    .WithMany(p => p.WopIssues)
                    .HasForeignKey(d => d.WopComponentLineID)
                    .HasConstraintName("FK_WopIssue_WopComponentLine");
            });

            modelBuilder.Entity<WopIssueShortfall>(entity =>
            {
                entity.ToTable("WopIssueShortfall");

                entity.HasIndex(e => e.MovementBalanceID, "IX_WopIssueShortfall_MovementBalanceID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopIssueID, "IX_WopIssueShortfall_WopIssueID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopIssueShortfallID).ValueGeneratedNever();

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.WopIssue)
                    .WithMany(p => p.WopIssueShortfalls)
                    .HasForeignKey(d => d.WopIssueID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopIssueShortfall_WopIssue");
            });

            modelBuilder.Entity<WopOrder>(entity =>
            {
                entity.ToTable("WopOrder");

                entity.HasIndex(e => e.BomAllocationID, "IX_WopOrder_BomAllocationID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BomRecordID, "IX_WopOrder_BomRecordID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WarehouseID, "IX_WopOrder_WarehouseID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopOrderTypeID, "IX_WopOrder_WopOrderTypeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopOrderID).ValueGeneratedNever();

                entity.Property(e => e.BomAllocationID).HasComment("Holds the DB Key of the BomAllocation if this order relates to a BOM Allocation");

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityCompleted).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.QuantityRequired).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.WopNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.BomAllocation)
                    .WithMany(p => p.WopOrders)
                    .HasForeignKey(d => d.BomAllocationID)
                    .HasConstraintName("FK_WopOrder_BomAllocation");

                entity.HasOne(d => d.BomRecord)
                    .WithMany(p => p.WopOrders)
                    .HasForeignKey(d => d.BomRecordID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopOrder_BomRecord");

                entity.HasOne(d => d.WopOrderType)
                    .WithMany(p => p.WopOrders)
                    .HasForeignKey(d => d.WopOrderTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopOrder_WopOrderType");
            });

            modelBuilder.Entity<WopOrderLink>(entity =>
            {
                entity.ToTable("WopOrderLink");

                entity.HasIndex(e => e.ParentWopOrderID, "IX_WopOrderLink_ParentWopOrderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopOrderID, "IX_WopOrderLink_WopOrderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopOrderLinkID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityRequired).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.ParentWopOrder)
                    .WithMany(p => p.WopOrderLinkParentWopOrders)
                    .HasForeignKey(d => d.ParentWopOrderID)
                    .HasConstraintName("FK_WopOrderLink_WopOrder1");

                entity.HasOne(d => d.WopOrder)
                    .WithMany(p => p.WopOrderLinkWopOrders)
                    .HasForeignKey(d => d.WopOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopOrderLink_WopOrder");
            });

            modelBuilder.Entity<WopOrderType>(entity =>
            {
                entity.ToTable("WopOrderType");

                entity.Property(e => e.WopOrderTypeID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<WopTraceableIssue>(entity =>
            {
                entity.ToTable("WopTraceableIssue");

                entity.HasIndex(e => e.TraceableBinItemID, "IX_WopTraceableIssue_TraceableBinItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TraceableItemID, "IX_WopTraceableIssue_TraceableItemID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WopIssueID, "IX_WopTraceableIssue_WopIssueID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WopTraceableIssueID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Quantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReversedQuantity)
                    .HasColumnType("decimal(15, 5)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.WopIssue)
                    .WithMany(p => p.WopTraceableIssues)
                    .HasForeignKey(d => d.WopIssueID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WopTraceableIssue_WopIssue");
            });

            modelBuilder.Entity<WorksOrder>(entity =>
            {
                entity.HasIndex(e => e.JobID, "IX_WoHdrJobID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.WorksOrderNumber, "IX_WoHdrNumber")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.WorksOrderNumber, e.BomReference }, "IX_WoHdrNumber+BOM")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Status, "IX_WorksOrders_Status")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.ID, "_dta_index_WorksOrders_18_1083202959__K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ID, e.Status }, "_dta_index_WorksOrders_18_1083202959__K1_K6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.ID, e.Status }, "_dta_index_WorksOrders_18_1083202959__K1_K6_7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.Status, e.ID }, "_dta_index_WorksOrders_18_1083202959__K6_K1_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AccToDebit)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActStdMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActStdUnplannedCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubContVariance).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSuggSellPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActUnitCost)
                    .HasColumnType("decimal(38, 12)")
                    .HasComputedColumnSql("(case when [status]='Completed' OR [status]='Cancelled' OR [status]='Closed' then case [QtyFinished] when (0) then (0) else (((((((([IssueCost]+[ActLabourCost])+[ActMachineCost])+[ActSetupCost])+[ActToolingCost])+[ActSubContCost])+[ActualMaterialOverhead])+[ActualLabourOverhead])+[ActualMachineOverhead])/[QtyFinished] end else case [QtyRequired] when (0) then (0) else (((((((([IssueCost]+[ActLabourCost])+[ActMachineCost])+[ActSetupCost])+[ActToolingCost])+[ActSubContCost])+[ActualMaterialOverhead])+[ActualLabourOverhead])+[ActualMachineOverhead])/[QtyRequired] end end)", false);

                entity.Property(e => e.ActualLabourOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMachineOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMaterialOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BOMRevision).HasMaxLength(30);

                entity.Property(e => e.BomDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.BomReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CostPcnt)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.CostsTransStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Custom_1)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#1");

                entity.Property(e => e.Custom_2)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#2");

                entity.Property(e => e.Custom_3)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#3");

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ImageForWoDocs).HasMaxLength(255);

                entity.Property(e => e.IncludeInMrp)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IssueCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.JobID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastCompletedDate).HasColumnType("datetime");

                entity.Property(e => e.LastCosted).HasColumnType("datetime");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LinkedTo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MachineRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSet).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OsCostsToBePosted)
                    .HasColumnType("decimal(24, 5)")
                    .HasComputedColumnSql("(((((([IssueCost]+[ActLabourCost])+[ActMachineCost])+[ActSetupCost])+[ActToolingCost])+[ActSubContCost])-((((([PostedMatCost]+[PostedLabCost])+[PostedMachCost])+[PostedSetupCost])+[PostedToolingCost])+[PostedSubContCost]))", false);

                entity.Property(e => e.PipelineData)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PlanPeriod)
                    .IsRequired()
                    .HasMaxLength(29)
                    .IsUnicode(false)
                    .HasComputedColumnSql("('Obsolete - use vw_WorksOrders')", false);

                entity.Property(e => e.PostedLabCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedMachCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedUnplannedCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Priority).HasDefaultValueSql("((9))");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyFinished).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding)
                    .HasColumnType("decimal(19, 5)")
                    .HasComputedColumnSql("([QtyRequired]-[QtyFinished])", false);

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyScrapped).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ReissueWO).HasMaxLength(30);

                entity.Property(e => e.Salesperson)
                    .IsRequired()
                    .HasMaxLength(235)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalespersonFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalespersonLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalespersonMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SalespersonPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ScrapFactor)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ScrapReason).HasColumnType("ntext");

                entity.Property(e => e.StandardMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.SubContract).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SuggestedSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalLabourOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMachineOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMatOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Warehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WorksNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WorksOrderNumber)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.SalespersonSalutation)
                    .WithMany(p => p.WorksOrders)
                    .HasForeignKey(d => d.SalespersonSalutationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorksOrders_SalespersonSalutationID");
            });

            modelBuilder.Entity<WorksOrderActualOpTime>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_WoActualOpPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_WoActualOpHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualLabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ActualMachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ActualSetupMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.ActualSubMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.CategoryDescription)
                    .HasMaxLength(60)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CategoryReference)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmployeeNumber)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourEnd).HasColumnType("datetime");

                entity.Property(e => e.LabourRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourStart).HasColumnType("datetime");

                entity.Property(e => e.MachineEnd).HasColumnType("datetime");

                entity.Property(e => e.MachineRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineStart).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PieceWorkQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWorkRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UserName).HasMaxLength(30);

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.WorksOrderActualOpTimes)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_WorksOrderActualOpTimes_WorksOrderTracking");
            });

            modelBuilder.Entity<WorksOrderAllocIssue>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_WoAllocIssPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_WoAllocIssHeaderID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Reference }, "IX_WoAllocIssHeaderID+Ref")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MfgAllocLineID, "IX_WorksOrderAllocIssues_MfgAllocLineID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.StockItemUnitID, "IX_WorksOrderAllocIssues_StockItemUnitID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Reference }, "_dta_index_WorksOrderAllocIssues_18_939202446__K2_K3_5_6")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Cancelled).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Issued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Location)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NewComp).HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PostedIssueCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedIssueQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Scrapped).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.TotalIssueCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfMeasure).HasColumnType("ntext");

                entity.Property(e => e.UpdateStock)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.WorksOrderAllocIssues)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_WorksOrderAllocIssues_WorksOrders");
            });

            modelBuilder.Entity<WorksOrderAttachedDocument>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_WoAttPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_WoAttHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.FileName).HasMaxLength(255);

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.WorksOrderAttachedDocuments)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_WorksOrderAttachedDocuments_WorksOrders");
            });

            modelBuilder.Entity<WorksOrderFinishedProduct>(entity =>
            {
                entity.Property(e => e.CostPcnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding)
                    .HasColumnType("decimal(19, 5)")
                    .HasComputedColumnSql("([QtyRequired]-[QtyCompleted])", false);

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.WorksOrderFinishedProducts)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_WorksOrderFinishedProducts_WorksOrders");
            });

            modelBuilder.Entity<WorksOrderImage>(entity =>
            {
                entity.ToTable("WorksOrderImage");

                entity.Property(e => e.Picture).HasColumnType("image");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.WorksOrderImages)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_WorksOrderImage_WorksOrders");
            });

            modelBuilder.Entity<WorksOrderOpComponent>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_WoOpCompPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.ComponentID, "IX_WoOpCompCompID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OperationID, "IX_WoOpCompOpID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LineUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.MultipleOfLineUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MultipleOfStockUnit)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockUnitPrecision).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitofMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Component)
                    .WithMany(p => p.WorksOrderOpComponents)
                    .HasForeignKey(d => d.ComponentID)
                    .HasConstraintName("FK_WorksOrderOpComponents_WorksOrderAllocIssues");
            });

            modelBuilder.Entity<WorksOrderSalesOrder>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_WoSoPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_WoSoHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.AccountNumber, "IX_WorksOrderSalesOrders_AccountNumber_HeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.SOPOrderReturnLineID, e.AccountNumber, e.HeaderID }, "_dta_index_WorksOrderSalesOrders_18_1019202731__K11_K3_K2_5")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountNumber).HasMaxLength(8);

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SalesOrderNumber).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.WorksOrderSalesOrders)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_WorksOrderSalesOrders_WorksOrders");
            });

            modelBuilder.Entity<WorksOrderScrap>(entity =>
            {
                entity.ToTable("WorksOrderScrap");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReasonCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReasonText)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reissued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Scrapped).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<WorksOrderSerialNumber>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_WoSerialPrimaryKey")
                    .IsClustered(false);

                entity.HasIndex(e => e.HeaderID, "IX_WoSerialHeaderID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.DateDespatched).HasColumnType("datetime");

                entity.Property(e => e.FinishedItem).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.SOrderNumber).HasDefaultValueSql("((0))");

                entity.Property(e => e.SerialNumber).HasMaxLength(50);

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.WorksOrderSerialNumbers)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_WorksOrderSerialNumbers_WorksOrders");
            });

            modelBuilder.Entity<WorksOrderTracking>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_WoOpPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("WorksOrderTracking");

                entity.HasIndex(e => e.ProcessReference, "IX_ProcessReference")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.ProcessReference }, "IX_WoOpHeader+Ref")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence }, "IX_WoOpHeader+Sequence")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "IX_WoOpHeaderID")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.SubContractProcess_, "IX_WorksOrderTracking_SubContract")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HeaderID, "_dta_index_WorksOrderTracking_18_1067202902__K2_4_9_10_22")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.ProcessDescription }, "_dta_index_WorksOrderTracking_18_1067202902__K2_K4_9_10_22")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence }, "_dta_index_WorksOrderTracking_18_1067202902__K2_K7_6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.HeaderID, e.Sequence, e.ProcessDescription }, "_dta_index_WorksOrderTracking_18_1067202902__K2_K7_K4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InProgress, e.HeaderID, e.Sequence, e.ProcessDescription }, "_dta_index_WorksOrderTracking_18_1067202902__K5_K2_K7_K4_6_9_10_22")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubContVariance).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Complete).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DelayHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.DelayMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.HeaderID).HasDefaultValueSql("((0))");

                entity.Property(e => e.InProgress).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabSetupHrs).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabSetupMins).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription).HasMaxLength(60);

                entity.Property(e => e.LabourHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople)
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LabourReference).HasMaxLength(30);

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineChargeRate).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineDescription).HasMaxLength(60);

                entity.Property(e => e.MachineHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineReference).HasMaxLength(30);

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Overlap).HasDefaultValueSql("((0))");

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlannedLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlannedMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlannedSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlannedSubcontractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlannedToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.ProcessTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RunTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.RunTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC1To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC2To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC3To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC4To).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5From).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5Hours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SC5To).HasDefaultValueSql("((0))");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupStart).HasColumnType("datetime");

                entity.Property(e => e.SetupTimeHours).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTimeMinutes).HasDefaultValueSql("((0))");

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContLeadTime).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubContractProcess_).HasColumnName("SubContractProcess?");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.Header)
                    .WithMany(p => p.WorksOrderTrackings)
                    .HasForeignKey(d => d.HeaderID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_WorksOrderTracking_WorksOrders");
            });

            modelBuilder.Entity<Workspaces_ContentPartFilter>(entity =>
            {
                entity.HasKey(e => e.ContentPartFilterID)
                    .HasName("PK_ContentPartFilterID")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.ContentPartID, e.UserID }, "ContentPartID_UserID")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ContentPartID)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Filters)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WriteOffCategory>(entity =>
            {
                entity.ToTable("WriteOffCategory");

                entity.HasIndex(e => e.Name, "IX_WriteOffCategory_Name")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NominalCodeID, "IX_WriteOffCategory_NominalCodeID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.WriteOffCategoryID).ValueGeneratedNever();

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NominalCode)
                    .WithMany(p => p.WriteOffCategories)
                    .HasForeignKey(d => d.NominalCodeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WriteOffCategory_NLNominalAccount");
            });

            modelBuilder.Entity<dtproperty>(entity =>
            {
                entity.HasKey(e => new { e.id, e.property })
                    .HasName("pk_dtproperties");

                entity.Property(e => e.id).ValueGeneratedOnAdd();

                entity.Property(e => e.property)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTimeUpdated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.lvalue).HasColumnType("image");

                entity.Property(e => e.uvalue).HasMaxLength(255);

                entity.Property(e => e.value)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<salesforecastdetails_sabre>(entity =>
            {
                entity.HasKey(e => e.sfdId);

                entity.ToTable("salesforecastdetails_sabre");

                entity.Property(e => e.sfdCustomerCode)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.sfdDate).HasColumnType("date");

                entity.Property(e => e.sfdDescription)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.sfdProductCode)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<vPurchaseAllocDateDiscrep>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPurchaseAllocDateDiscrep");

                entity.Property(e => e.AllocatedValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.AllocationDateMonth).HasMaxLength(30);

                entity.Property(e => e.GoodsValueInAccountCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransTypeName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransTypeShortName)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionDateMonth).HasMaxLength(30);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vSalesAllocDateDiscrep>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vSalesAllocDateDiscrep");

                entity.Property(e => e.AllocatedValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.AllocationDateMonth).HasMaxLength(30);

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.GoodsValueInAccountCurrency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.TaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransTypeName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransTypeShortName)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionDateMonth).HasMaxLength(30);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_AvailableSalesOrderLinesForLinking>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AvailableSalesOrderLinesForLinking");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AvailableForDespatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.DespatchNoteComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.LineQuantityStockUnits).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostedInvoiceCreditQty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.PricingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PricingUnitMultiple).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SellingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellingUnitMultiple).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.SellingUnitWeight).HasColumnType("decimal(15, 4)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TaggedTo).HasMaxLength(100);

                entity.Property(e => e.TraceAvailForDespatch).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.UnitDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.UnitDiscountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_BomList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_BomList");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Carton).HasMaxLength(4000);

                entity.Property(e => e.CartonPer).HasMaxLength(4000);

                entity.Property(e => e.CheckedOutBy).HasMaxLength(50);

                entity.Property(e => e.Custom_1)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#1");

                entity.Property(e => e.Custom_10)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#10");

                entity.Property(e => e.Custom_2)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#2");

                entity.Property(e => e.Custom_3)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#3");

                entity.Property(e => e.Custom_4)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#4");

                entity.Property(e => e.Custom_5)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#5");

                entity.Property(e => e.Custom_6)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#6");

                entity.Property(e => e.Custom_7)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#7");

                entity.Property(e => e.Custom_8)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#8");

                entity.Property(e => e.Custom_9)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#9");

                entity.Property(e => e.DefaultQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Entered).HasColumnType("datetime");

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastCosted).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.MachineRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSet).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.Per).HasMaxLength(4000);

                entity.Property(e => e.QtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecordID).HasMaxLength(92);

                entity.Property(e => e.Revision).HasMaxLength(30);

                entity.Property(e => e.Standard).HasMaxLength(4000);

                entity.Property(e => e.StandardMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContract).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SuggestedSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalLabourOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMachineOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMatOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalOverheads).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");

                entity.Property(e => e.VersionStatusDesc)
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasMaxLength(4000);
            });

            modelBuilder.Entity<vw_DashboardEstTop5Customer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardEstTop5Customers");

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<vw_DashboardEstTop5Ytd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardEstTop5Ytd");

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.EstimateNumber).HasMaxLength(30);

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_DashboardEstUnsuccessful>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardEstUnsuccessful");

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<vw_DashboardEstValueO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardEstValueOs");

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.EstimateNumber).HasMaxLength(30);

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_DashboardEstValueSuccessful>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardEstValueSuccessful");

                entity.Property(e => e.Month).HasMaxLength(8);

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<vw_DashboardPlanDue14DaysExcludedMp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardPlanDue14DaysExcludedMps");

                entity.Property(e => e.AccRef)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Comment_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#1");

                entity.Property(e => e.Comment_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#2");

                entity.Property(e => e.CustOrderNumber)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerAnalysis_1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#1");

                entity.Property(e => e.CustomerAnalysis_2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#2");

                entity.Property(e => e.CustomerAnalysis_3)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#3");

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ExclusionReason)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.Period).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.UniqueIdentifier).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_DashboardPlanForFollowUp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardPlanForFollowUp");

                entity.Property(e => e.Action)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCode)
                    .IsRequired()
                    .HasMaxLength(235);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreatedReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DemandQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueInQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NeededByDate).HasColumnType("datetime");

                entity.Property(e => e.NetFree).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.PhysicalStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlanPeriod).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Rec1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Rec2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecNumber).HasMaxLength(9);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_DashboardPlanLateRec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardPlanLateRecs");

                entity.Property(e => e.Action)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCode)
                    .IsRequired()
                    .HasMaxLength(235);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreatedReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DemandQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueInQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NeededByDate).HasColumnType("datetime");

                entity.Property(e => e.NetFree).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.PhysicalStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlanPeriod).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Rec1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Rec2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecNumber).HasMaxLength(9);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_DashboardPlanTbmOrderedToday>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardPlanTbmOrderedToday");

                entity.Property(e => e.Action)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCode)
                    .IsRequired()
                    .HasMaxLength(235);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreatedReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DemandQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueInQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NeededByDate).HasColumnType("datetime");

                entity.Property(e => e.NetFree).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.PhysicalStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlanPeriod).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Rec1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Rec2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecNumber).HasMaxLength(9);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_DashboardWoBeingProcessed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardWoBeingProcessed");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.SalesValue).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.WipValue).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_DashboardWoCreatedLast7Day>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardWoCreatedLast7Days");

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.SalesValue).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_DashboardWoLateFinisher>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardWoLateFinishers");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_DashboardWoLateStarter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardWoLateStarters");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_DashboardWoTimeBookedLast7Day>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DashboardWoTimeBookedLast7Days");

                entity.Property(e => e.dayname).HasMaxLength(9);

                entity.Property(e => e.dt).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<vw_EstTransReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EstTransReport");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecordType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Reference).HasMaxLength(60);

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfSale).HasMaxLength(20);
            });

            modelBuilder.Entity<vw_EstimateList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EstimateList");

                entity.Property(e => e.ActualCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualProfit).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.AddressCity)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressCountry)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressCounty)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.AnalysisCode1).HasMaxLength(20);

                entity.Property(e => e.AnalysisCode2).HasMaxLength(20);

                entity.Property(e => e.AnalysisCode3).HasMaxLength(20);

                entity.Property(e => e.AnalysisCode4).HasMaxLength(20);

                entity.Property(e => e.AnalysisCode5).HasMaxLength(20);

                entity.Property(e => e.CalculatedCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalculatedProfit).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ContactSalutation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CopiedFrom).HasMaxLength(30);

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.CurrencyExchangeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CurrencySymbol)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.CustomerAccountName).HasMaxLength(60);

                entity.Property(e => e.CustomerAccountNumber).HasMaxLength(8);

                entity.Property(e => e.CustomerReferenceNo).HasMaxLength(50);

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EnteredBy).HasMaxLength(30);

                entity.Property(e => e.EstimateNumber).HasMaxLength(30);

                entity.Property(e => e.EstimateStatus).HasMaxLength(20);

                entity.Property(e => e.FollowUpDate).HasColumnType("datetime");

                entity.Property(e => e.FullContactName).HasMaxLength(235);

                entity.Property(e => e.FullSalespersonName).HasMaxLength(235);

                entity.Property(e => e.InvoiceDescription).HasMaxLength(1000);

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.MachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockItemCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockItemMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockItemsMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockItemsProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockItemsSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NumberPieces).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherExpensesCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherExpensesMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherExpensesMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherExpensesProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherExpensesSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OverallDiscountAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OverallDiscountPercent).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OverheadRecoveryAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QtyBreakMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyBreakMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyBreakProfit).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.QtyBreakTotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyBreakTotalSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ReCostedBy).HasMaxLength(30);

                entity.Property(e => e.ReCostedDate).HasColumnType("datetime");

                entity.Property(e => e.SOPDocumentNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalespersonFirstName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonLastName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonMiddleName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonSalutation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SiteAddressCity)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressCountry)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SiteAddressCounty)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine1)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine2)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine3)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine4)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.StockCode).HasMaxLength(30);

                entity.Property(e => e.SubcontractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubcontractMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubcontractMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubcontractProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubcontractSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMarkup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_JobTransReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_JobTransReport");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PINumber).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecordType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Reference).HasMaxLength(60);

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SupplierRef).HasMaxLength(10);

                entity.Property(e => e.ToolingTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.Type).HasMaxLength(2);
            });

            modelBuilder.Entity<vw_MrpRecommendationsWithNeededByDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_MrpRecommendationsWithNeededByDate");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ActualQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AdjustedQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BuyerCode)
                    .IsRequired()
                    .HasMaxLength(235);

                entity.Property(e => e.BuyerCodeFirstName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.BuyerCodeKey)
                    .IsRequired()
                    .HasMaxLength(235);

                entity.Property(e => e.BuyerCodeLastName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.BuyerCodeMiddleName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreatedFromRecommendation)
                    .IsRequired()
                    .HasMaxLength(9);

                entity.Property(e => e.CreatedReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DelAddressCity)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressCountry)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DelAddressCounty)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressLine1)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressLine2)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressLine3)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressLine4)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NeededByDate).HasColumnType("datetime");

                entity.Property(e => e.OperationSourceModule)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.OrderDetails).HasMaxLength(1000);

                entity.Property(e => e.ParentTag).HasMaxLength(30);

                entity.Property(e => e.PlanPeriod).HasMaxLength(30);

                entity.Property(e => e.ProductGroupCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroupName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecNumber).HasMaxLength(9);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StockCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.SupplierKey)
                    .IsRequired()
                    .HasMaxLength(13);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_NeededByDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_NeededByDate");

                entity.Property(e => e.DestinationItem).HasMaxLength(100);

                entity.Property(e => e.NeededByDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<vw_POtoWOtoSO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_POtoWOtoSO");

                entity.Property(e => e.Customer_Order_Number)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Customer Order Number");

                entity.Property(e => e.Purchase_Order_Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Purchase Order Number");

                entity.Property(e => e.Sales_Order_Number)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_PlanMpsItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PlanMpsItems");

                entity.Property(e => e.AccRef)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Comment_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#1");

                entity.Property(e => e.Comment_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#2");

                entity.Property(e => e.CustOrderNumber)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerAnalysis_1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#1");

                entity.Property(e => e.CustomerAnalysis_2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#2");

                entity.Property(e => e.CustomerAnalysis_3)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#3");

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ExclusionReason)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LinkedTo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Period).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.UniqueIdentifier).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_PlanMpsItemsExcluded>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PlanMpsItemsExcluded");

                entity.Property(e => e.AccRef)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Comment_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#1");

                entity.Property(e => e.Comment_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#2");

                entity.Property(e => e.CustOrderNumber)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerAnalysis_1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#1");

                entity.Property(e => e.CustomerAnalysis_2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#2");

                entity.Property(e => e.CustomerAnalysis_3)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#3");

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ExclusionReason)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LinkedTo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Period).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.UniqueIdentifier).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_PlanMrpDemand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PlanMrpDemand");

                entity.Property(e => e.Comment_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#1");

                entity.Property(e => e.Comment_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#2");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSuppAcc)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.EstSuppAccRef)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.OpSource)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.PlanPeriod).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_PlanMrpException>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PlanMrpExceptions");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SourceItem)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3);
            });

            modelBuilder.Entity<vw_PlanMrpRecommendation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PlanMrpRecommendations");

                entity.Property(e => e.Action)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCode)
                    .IsRequired()
                    .HasMaxLength(235);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreatedReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CurrentDate).HasColumnType("datetime");

                entity.Property(e => e.DemandQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DestinationItem).HasMaxLength(100);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueInQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Linked)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NeededByDate).HasColumnType("datetime");

                entity.Property(e => e.NetFree).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.ParentTag).HasMaxLength(30);

                entity.Property(e => e.PhysicalStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlanPeriod).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Rec1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Rec2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecNumber).HasMaxLength(9);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_PlanMrpReplenishment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_PlanMrpReplenishments");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.PlanPeriod)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PoLineReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.QtyIn).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyUsed).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_RepAllocationBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepAllocationBalance");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AllocationDate).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderPriority)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecipientName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.RecipientReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SecondRef)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_RepAnalysisCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepAnalysisCodes");

                entity.Property(e => e.Code).HasMaxLength(20);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<vw_RepBinItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepBinItem");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedQtyInStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateOfLastStockCount).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.LastCostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OpeningBalanceDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocatedBOM).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QuantityAllocatedSOP).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QuantityAllocatedStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UnconfirmedQtyInStock).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepBomComponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepBomComponents");

                entity.Property(e => e.BulkIssueItem)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.HoldQuantity)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Instruction).HasMaxLength(255);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Private)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockCode).HasMaxLength(30);

                entity.Property(e => e.UnitofMeasure).HasMaxLength(20);
            });

            modelBuilder.Entity<vw_RepBomDrawing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepBomDrawings");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<vw_RepBomHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepBomHeaders");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.BomID).ValueGeneratedOnAdd();

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Custom_1)
                    .HasColumnType("ntext")
                    .HasColumnName("Custom#1");

                entity.Property(e => e.Custom_10)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#10");

                entity.Property(e => e.Custom_11)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#11");

                entity.Property(e => e.Custom_12)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#12");

                entity.Property(e => e.Custom_2)
                    .HasColumnType("ntext")
                    .HasColumnName("Custom#2");

                entity.Property(e => e.Custom_3)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#3");

                entity.Property(e => e.Custom_4)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#4");

                entity.Property(e => e.Custom_5)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#5");

                entity.Property(e => e.Custom_6)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#6");

                entity.Property(e => e.Custom_7)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#7");

                entity.Property(e => e.Custom_8)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#8");

                entity.Property(e => e.Custom_9)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#9");

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.DefaultQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastCosted).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.MachineRunCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ManufInstructions).HasColumnType("ntext");

                entity.Property(e => e.MarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OnHold)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Phantom)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Private)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.QtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QualityStandard).HasColumnType("ntext");

                entity.Property(e => e.Revision).HasMaxLength(30);

                entity.Property(e => e.StdMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SuggestedSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TopLevel)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalLabourOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMachineOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMaterialsOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalOverheads).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<vw_RepBomOperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepBomOperations");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IncLabSetup)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.KeepLabourWithMachine)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LabourChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription).HasMaxLength(60);

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LabourReference).HasMaxLength(30);

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription).HasMaxLength(60);

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineReference).HasMaxLength(30);

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonPrinting)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Overlap).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWork)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContractOp)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepBomTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepBomTransactions");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_RepBomWOrderCosting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepBomWOrderCosting");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OperationTypeIndicatorDisplay)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.PieceWork)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.QtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecordType).HasMaxLength(1);

                entity.Property(e => e.RecordTypeDisplay)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.SetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractDisplay)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfMeasure).HasColumnType("ntext");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepConformity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepConformity");

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.AgreedConcessions).HasColumnType("ntext");

                entity.Property(e => e.CertID).ValueGeneratedOnAdd();

                entity.Property(e => e.CertificateDate).HasColumnType("datetime");

                entity.Property(e => e.ConditionOnDespatch).HasColumnType("ntext");

                entity.Property(e => e.CustOrdNumber).HasMaxLength(30);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DescriptionOfComponents).HasColumnType("ntext");

                entity.Property(e => e.DrawingNumber).HasMaxLength(30);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.PODate).HasColumnType("datetime");

                entity.Property(e => e.Printed)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Specification).HasColumnType("ntext");

                entity.Property(e => e.WODate).HasColumnType("datetime");

                entity.Property(e => e.WONumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepConformityItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepConformityItems");

                entity.Property(e => e.Comment_1)
                    .HasMaxLength(60)
                    .HasColumnName("Comment#1");

                entity.Property(e => e.Comment_2)
                    .HasMaxLength(60)
                    .HasColumnName("Comment#2");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProductCode).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Units).HasMaxLength(10);
            });

            modelBuilder.Entity<vw_RepDrawingRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepDrawingRegister");

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.Author).HasMaxLength(30);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DesignPackage).HasColumnType("ntext");

                entity.Property(e => e.DiskNumber).HasMaxLength(10);

                entity.Property(e => e.DiskType).HasMaxLength(10);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Location).HasColumnType("ntext");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Revision).HasColumnType("ntext");

                entity.Property(e => e.RevisionDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasMaxLength(30);

                entity.Property(e => e.StockCode).HasMaxLength(30);

                entity.Property(e => e.StockDescription).HasMaxLength(60);

                entity.Property(e => e.Title).HasColumnType("ntext");

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<vw_RepDrawingRevision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepDrawingRevisions");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Revision).HasColumnType("ntext");

                entity.Property(e => e.RevisionDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepEmployees");

                entity.Property(e => e.Address).HasColumnType("ntext");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.CategoryDescription).HasMaxLength(60);

                entity.Property(e => e.CategoryReference).HasMaxLength(30);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ClockNumber).HasMaxLength(50);

                entity.Property(e => e.CondensedAddress).HasMaxLength(500);

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Credit).HasMaxLength(8);

                entity.Property(e => e.Debit).HasMaxLength(8);

                entity.Property(e => e.Department).HasMaxLength(30);

                entity.Property(e => e.EMailAddress).HasMaxLength(255);

                entity.Property(e => e.EmpFinish).HasColumnType("datetime");

                entity.Property(e => e.EmpStart).HasColumnType("datetime");

                entity.Property(e => e.EmployeeNumber).HasMaxLength(10);

                entity.Property(e => e.FaxAreaCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.FaxCountryCode)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.FaxNumber).HasMaxLength(227);

                entity.Property(e => e.FaxPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FaxSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.FirstName).HasMaxLength(20);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Initials).HasMaxLength(5);

                entity.Property(e => e.MobileAreaCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.MobileCountryCode)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.MobileNumber).HasMaxLength(227);

                entity.Property(e => e.MobilePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MobileSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.NatInsNumber).HasMaxLength(15);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Surname).HasMaxLength(30);

                entity.Property(e => e.TelNumber).HasMaxLength(227);

                entity.Property(e => e.TelephoneAreaCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TelephoneCountryCode)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.TelephonePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TelephoneSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Title).HasMaxLength(20);

                entity.Property(e => e.WebAddress).HasMaxLength(255);

                entity.Property(e => e.WorksNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<vw_RepEstDrawing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepEstDrawings");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<vw_RepEstModificationHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepEstModificationHistory");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Reason).HasColumnType("ntext");

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<vw_RepEstQtyBreak>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepEstQtyBreaks");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Margin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Markup).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfSale).HasMaxLength(20);

                entity.Property(e => e.UnitSellingPrice).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepEstStage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepEstStages");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.JobNumber).HasMaxLength(30);

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Memo).HasColumnType("ntext");

                entity.Property(e => e.NonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NumberPieces).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OHeadRecoveryAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.SetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StageID).ValueGeneratedOnAdd();

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.SubContractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepEstTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepEstTransactions");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.LabourDescription).HasMaxLength(60);

                entity.Property(e => e.LabourReference).HasMaxLength(30);

                entity.Property(e => e.LabourTime).HasMaxLength(30);

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription).HasMaxLength(60);

                entity.Property(e => e.MachineReference).HasMaxLength(30);

                entity.Property(e => e.MachineTime).HasMaxLength(30);

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecordType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Reference).HasMaxLength(60);

                entity.Property(e => e.SetupTime).HasMaxLength(30);

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfSale).HasMaxLength(20);
            });

            modelBuilder.Entity<vw_RepEstimate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepEstimates");

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.AddressCity)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressCountryName).HasMaxLength(20);

                entity.Property(e => e.AddressCounty)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.AddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Address_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#1");

                entity.Property(e => e.Address_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#2");

                entity.Property(e => e.Address_3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#3");

                entity.Property(e => e.Address_4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#4");

                entity.Property(e => e.Address_5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Address#5");

                entity.Property(e => e.CondensedAddress).HasMaxLength(500);

                entity.Property(e => e.CondensedSiteAddress).HasMaxLength(500);

                entity.Property(e => e.Contact).HasMaxLength(235);

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ContactSalutation).HasMaxLength(50);

                entity.Property(e => e.CopiedFrom).HasMaxLength(30);

                entity.Property(e => e.CreateGrnAtComplete)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.CurrencyExchangeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CurrencySymbol)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.CustRefNumber).HasMaxLength(50);

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EnteredBy).HasMaxLength(30);

                entity.Property(e => e.EstAnalysis_1)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#1");

                entity.Property(e => e.EstAnalysis_2)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#2");

                entity.Property(e => e.EstAnalysis_3)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#3");

                entity.Property(e => e.EstAnalysis_4)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#4");

                entity.Property(e => e.EstAnalysis_5)
                    .HasMaxLength(20)
                    .HasColumnName("EstAnalysis#5");

                entity.Property(e => e.EstID).ValueGeneratedOnAdd();

                entity.Property(e => e.FinProdCode).HasMaxLength(30);

                entity.Property(e => e.FinProdDesc).HasMaxLength(60);

                entity.Property(e => e.FollowUpDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceDescription).HasColumnType("ntext");

                entity.Property(e => e.JobNumber).HasMaxLength(30);

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.Linked)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.MultiItemEstimateReference).HasMaxLength(30);

                entity.Property(e => e.NonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NumberPieces).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OHeadRecoveryAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OverallDiscAmnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OverallDiscPcnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Printed)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ReCostedBy).HasMaxLength(30);

                entity.Property(e => e.ReCostedDate).HasColumnType("datetime");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Salesperson).HasMaxLength(235);

                entity.Property(e => e.SalespersonFirstName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonLastName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonMiddleName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalespersonSalutation).HasMaxLength(50);

                entity.Property(e => e.SetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SiteAddressCity)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressCountryName).HasMaxLength(20);

                entity.Property(e => e.SiteAddressCounty)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine1)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine2)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine3)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine4)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SiteAddress_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("SiteAddress#1");

                entity.Property(e => e.SiteAddress_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("SiteAddress#2");

                entity.Property(e => e.SiteAddress_3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("SiteAddress#3");

                entity.Property(e => e.SiteAddress_4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("SiteAddress#4");

                entity.Property(e => e.SiteAddress_5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("SiteAddress#5");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.SubContractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContractSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMargin).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalMarkUp).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepExpenseType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepExpenseTypes");

                entity.Property(e => e.ChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.UnitOfSale).HasMaxLength(8);
            });

            modelBuilder.Entity<vw_RepIndentedPartsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepIndentedPartsList");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Instruction).HasMaxLength(255);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.PhantomFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasColumnType("ntext");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitofMeasure).HasColumnType("ntext");
            });

            modelBuilder.Entity<vw_RepJobAllocIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepJobAllocIssues");

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Issued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProductCode).HasMaxLength(30);

                entity.Property(e => e.ReasonForScrap).HasColumnType("ntext");

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Scrapped).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepJobDetailedVariance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepJobDetailedVariance");

                entity.Property(e => e.ActualCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AllowableCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AllowableQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.EstStageReference).HasMaxLength(30);

                entity.Property(e => e.EstimateNumber).HasMaxLength(30);

                entity.Property(e => e.EstimatedCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.JobDescription).HasMaxLength(30);

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecordType)
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.Reference).HasMaxLength(60);

                entity.Property(e => e.StageReference).HasMaxLength(30);

                entity.Property(e => e.VarianceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.VarianceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepJobHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepJobHeaders");

                entity.Property(e => e.AccToDebit).HasMaxLength(8);

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.ActLabourTime).HasMaxLength(30);

                entity.Property(e => e.ActMachineTime).HasMaxLength(30);

                entity.Property(e => e.ActSetupTime).HasMaxLength(30);

                entity.Property(e => e.ActSubContTime).HasMaxLength(30);

                entity.Property(e => e.ActualLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualNonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualOtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualTotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.BinName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CompletedDate).HasColumnType("datetime");

                entity.Property(e => e.CondensedSiteAddress).HasMaxLength(500);

                entity.Property(e => e.Contact).HasMaxLength(235);

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ContactSalutation).HasMaxLength(50);

                entity.Property(e => e.CostsTransStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreateGrnAtComplete)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CreditedTD).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CustOrderNumber).HasMaxLength(60);

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasMaxLength(16);

                entity.Property(e => e.EndDateNoFormat).HasColumnType("datetime");

                entity.Property(e => e.EnteredBy).HasMaxLength(30);

                entity.Property(e => e.EstLabourProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstMachineProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstMaterialProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstNonStockProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstOHeadAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstOtherProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSetupProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSubContProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstToolingProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstTotalProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimateNumber).HasMaxLength(30);

                entity.Property(e => e.EstimatedLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedNonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedOtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedTotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.FinProdCode).HasMaxLength(30);

                entity.Property(e => e.FinProdDesc).HasMaxLength(60);

                entity.Property(e => e.IncludeInMrpDemand)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.IncludeInMrpReplenishments)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDescription).HasColumnType("ntext");

                entity.Property(e => e.InvoicedTD).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastCostDate).HasColumnType("datetime");

                entity.Property(e => e.LastInvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.LastUpdated).HasColumnType("datetime");

                entity.Property(e => e.Linked)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MachineActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OSInvoice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OverallDiscAmnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OverallDiscPcnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlanReference).HasMaxLength(30);

                entity.Property(e => e.Printed)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Profit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProjectNumber).HasMaxLength(50);

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyScrapped).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ReasonForScrap).HasColumnType("ntext");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Salesperson).HasMaxLength(235);

                entity.Property(e => e.SalespersonFirstName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonLastName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonMiddleName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalespersonSalutation).HasMaxLength(50);

                entity.Property(e => e.SetupActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SiteAddress1).HasMaxLength(60);

                entity.Property(e => e.SiteAddress2).HasMaxLength(60);

                entity.Property(e => e.SiteAddress3).HasMaxLength(60);

                entity.Property(e => e.SiteAddress4).HasMaxLength(60);

                entity.Property(e => e.SiteAddress5).HasMaxLength(60);

                entity.Property(e => e.SiteAddressCity)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressCountryName).HasMaxLength(20);

                entity.Property(e => e.SiteAddressCounty)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine1)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine2)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine3)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressLine4)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SiteAddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.StartDate).HasMaxLength(16);

                entity.Property(e => e.StartDateNoFormat).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.SubContActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WarehouseName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WorksNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<vw_RepJobInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepJobInvoices");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Number).HasMaxLength(30);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Type).HasMaxLength(2);

                entity.Property(e => e.User).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepJobOperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepJobOperations");

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActLabourTime).HasMaxLength(30);

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineTime).HasMaxLength(30);

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupTime).HasMaxLength(30);

                entity.Property(e => e.ActSubContTime).HasMaxLength(30);

                entity.Property(e => e.ActSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcSubContractCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CalcToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DiffLabourTime).HasMaxLength(30);

                entity.Property(e => e.DiffMachineTime).HasMaxLength(30);

                entity.Property(e => e.DiffSetupTime).HasMaxLength(30);

                entity.Property(e => e.DiffSubContTime).HasMaxLength(30);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndDateWithTime).HasMaxLength(16);

                entity.Property(e => e.EstLabourTime).HasMaxLength(30);

                entity.Property(e => e.EstMachineTime).HasMaxLength(30);

                entity.Property(e => e.EstSetupTime).HasMaxLength(30);

                entity.Property(e => e.EstSubContTime).HasMaxLength(30);

                entity.Property(e => e.LabourDescription).HasMaxLength(60);

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LabourRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourReference).HasMaxLength(30);

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription).HasMaxLength(60);

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineReference).HasMaxLength(30);

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonPrinting)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.NumberPieces).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpID).ValueGeneratedOnAdd();

                entity.Property(e => e.PieceWorkQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWorkRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.ProcessTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyComplete).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupStart).HasColumnType("datetime");

                entity.Property(e => e.SetupStartWithTime).HasMaxLength(16);

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartDateWithTime).HasMaxLength(16);

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepJobOperationsActual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepJobOperationsActuals");

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualLabourTime).HasMaxLength(30);

                entity.Property(e => e.ActualMachineTime).HasMaxLength(30);

                entity.Property(e => e.ActualSetupTime).HasMaxLength(30);

                entity.Property(e => e.ActualSubContTime).HasMaxLength(30);

                entity.Property(e => e.CategoryDescription).HasMaxLength(60);

                entity.Property(e => e.CategoryReference).HasMaxLength(30);

                entity.Property(e => e.EmployeeFirstName).HasMaxLength(20);

                entity.Property(e => e.EmployeeName).HasMaxLength(50);

                entity.Property(e => e.EmployeeNumber).HasMaxLength(10);

                entity.Property(e => e.EmployeeSurname).HasMaxLength(30);

                entity.Property(e => e.EntryDateTime).HasMaxLength(16);

                entity.Property(e => e.EntryDateTimeNoFormat).HasColumnType("datetime");

                entity.Property(e => e.LabourEnd).HasMaxLength(16);

                entity.Property(e => e.LabourEndNoFormat).HasColumnType("datetime");

                entity.Property(e => e.LabourRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourStart).HasMaxLength(16);

                entity.Property(e => e.LabourStartNoFormat).HasColumnType("datetime");

                entity.Property(e => e.MachineEnd).HasMaxLength(16);

                entity.Property(e => e.MachineEndNoFormat).HasColumnType("datetime");

                entity.Property(e => e.MachineRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineStart).HasMaxLength(16);

                entity.Property(e => e.MachineStartNoFormat).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.PieceWorkQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWorkRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UserName).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepJobStage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepJobStages");

                entity.Property(e => e.ActLabourTime).HasMaxLength(30);

                entity.Property(e => e.ActMachineTime).HasMaxLength(30);

                entity.Property(e => e.ActSetupTime).HasMaxLength(30);

                entity.Property(e => e.ActSubContTime).HasMaxLength(30);

                entity.Property(e => e.ActualLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualNonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualOtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualTotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CompletedDate).HasColumnType("datetime");

                entity.Property(e => e.CreditedTD).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasMaxLength(16);

                entity.Property(e => e.EndDateNoFormat).HasColumnType("datetime");

                entity.Property(e => e.EstLabourProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstMachineProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstMaterialProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstNonStockProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstOHeadAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstOtherProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSetupProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSubContProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstToolingProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstTotalProfit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimateNumber).HasMaxLength(30);

                entity.Property(e => e.EstimatedLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedNonStockCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedOtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstimatedTotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.InvoicedTD).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Memo).HasColumnType("ntext");

                entity.Property(e => e.NonStockActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OSInvoice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OtherSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Profit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyDelivered).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyInvoiced).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.SetupActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StageID).ValueGeneratedOnAdd();

                entity.Property(e => e.StartDate).HasMaxLength(16);

                entity.Property(e => e.StartDateNoFormat).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.SubContActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingSelling).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalActEst).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalSelling).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepJobTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepJobTransactions");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PINumber).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecordType)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Reference).HasMaxLength(60);

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SupplierRef).HasMaxLength(10);

                entity.Property(e => e.ToolingTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.Type).HasMaxLength(2);
            });

            modelBuilder.Entity<vw_RepLabourCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepLabourCategories");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepLabourRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepLabourRegister");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.GroupReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.HourlyChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.NominalID).HasMaxLength(30);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OverheadRecoveryPercentage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepMachineCalibration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepMachineCalibration");

                entity.Property(e => e.LastCalibration).HasColumnType("datetime");

                entity.Property(e => e.NextCalibration).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Repairs).HasColumnType("ntext");

                entity.Property(e => e.Result).HasColumnType("ntext");
            });

            modelBuilder.Entity<vw_RepMachineRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepMachineRegister");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Dimensions).HasMaxLength(255);

                entity.Property(e => e.FriEnd).HasColumnType("datetime");

                entity.Property(e => e.FriStart).HasColumnType("datetime");

                entity.Property(e => e.GroupReference).HasMaxLength(30);

                entity.Property(e => e.HourlyChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LatestNextCalibration).HasColumnType("datetime");

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.MachineID).ValueGeneratedOnAdd();

                entity.Property(e => e.MonEnd).HasColumnType("datetime");

                entity.Property(e => e.MonStart).HasColumnType("datetime");

                entity.Property(e => e.NominalID)
                    .HasMaxLength(30)
                    .IsFixedLength(true);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OriginalCert).HasMaxLength(255);

                entity.Property(e => e.OverheadRecoveryPercentage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Range).HasMaxLength(255);

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.SatEnd).HasColumnType("datetime");

                entity.Property(e => e.SatStart).HasColumnType("datetime");

                entity.Property(e => e.SerialNumber).HasMaxLength(255);

                entity.Property(e => e.SourceCalibration).HasMaxLength(255);

                entity.Property(e => e.SunEnd).HasColumnType("datetime");

                entity.Property(e => e.SunStart).HasColumnType("datetime");

                entity.Property(e => e.ThurEnd).HasColumnType("datetime");

                entity.Property(e => e.ThurStart).HasColumnType("datetime");

                entity.Property(e => e.TueEnd).HasColumnType("datetime");

                entity.Property(e => e.TueStart).HasColumnType("datetime");

                entity.Property(e => e.Type).HasMaxLength(255);

                entity.Property(e => e.WedEnd).HasColumnType("datetime");

                entity.Property(e => e.WedStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<vw_RepMaximumBuild>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepMaximumBuild");

                entity.Property(e => e.BomDescription)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.BomFreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CanMake).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.MaxBuildQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonStockItem)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PossibleStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.QtyOnBom).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Sequence)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<vw_RepMfgAllocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepMfgAllocation");

                entity.Property(e => e.AllocationDescription).HasMaxLength(255);

                entity.Property(e => e.AllocationReference).HasMaxLength(30);

                entity.Property(e => e.BuiltItemQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BuiltItemStockCode).HasMaxLength(50);

                entity.Property(e => e.DateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<vw_RepMfgAllocationBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepMfgAllocationBalance");
            });

            modelBuilder.Entity<vw_RepMfgAllocationLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepMfgAllocationLine");
            });

            modelBuilder.Entity<vw_RepNominal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepNominal");

                entity.Property(e => e.AccountCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.BroughtForwardBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ConsolidatedAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ConsolidatedAdjustment).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ConsolidatedCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ConsolidatedDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CreditYearToDate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DebitYearToDate).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<vw_RepNonChargeableTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepNonChargeableTime");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.Reference).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepNonChargeableTimeActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepNonChargeableTimeActivity");

                entity.Property(e => e.EmployeeName).HasMaxLength(50);

                entity.Property(e => e.EmployeeNumber).HasMaxLength(10);

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepOperationsRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepOperationsRegister");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.IncLabSetup)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.KeepTogether)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LabourChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription).HasMaxLength(60);

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LabourReference).HasMaxLength(30);

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription).HasMaxLength(60);

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineReference).HasMaxLength(30);

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonPrinting)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWork)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1PerItem)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2PerItem)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3PerItem)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4PerItem)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5PerItem)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Saturday)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContractOp)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Sunday)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepPlanMakeForStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepPlanMakeForStock");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.Period).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(6);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<vw_RepPlanMpsItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepPlanMpsItems");

                entity.Property(e => e.AccRef)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.AddedToMpsBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Comment_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#1");

                entity.Property(e => e.Comment_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#2");

                entity.Property(e => e.CustOrderNumber)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CustomerAnalysis_1)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#1");

                entity.Property(e => e.CustomerAnalysis_2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#2");

                entity.Property(e => e.CustomerAnalysis_3)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("CustomerAnalysis#3");

                entity.Property(e => e.CustomerOnHold)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DateAddedToMps).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.Excluded)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ExclusionReason)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.LinkedTo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ManualExclusion)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.OnHold)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.Period).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.UniqueIdentifier).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<vw_RepPlanMrpDemand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepPlanMrpDemand");

                entity.Property(e => e.BulkIssue)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Comment_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#1");

                entity.Property(e => e.Comment_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("Comment#2");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndDateWithTime).HasMaxLength(16);

                entity.Property(e => e.EstCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSuppAcc)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.EstSuppAccRef)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Linked)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Manufactured)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.Period).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartDateWithTime).HasMaxLength(16);

                entity.Property(e => e.SubContract)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3);
            });

            modelBuilder.Entity<vw_RepPlanMrpException>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepPlanMrpExceptions");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SourceItem)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3);
            });

            modelBuilder.Entity<vw_RepPlanMrpRecommendation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepPlanMrpRecommendations");

                entity.Property(e => e.Action)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCode)
                    .IsRequired()
                    .HasMaxLength(235);

                entity.Property(e => e.BuyerCodeFirstName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.BuyerCodeLastName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.BuyerCodeMiddleName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.BuyerCodePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.BuyerCodeSalutation).HasMaxLength(50);

                entity.Property(e => e.CondensedDelAddress).HasMaxLength(500);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreatedReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DelAddressCity)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressCountryName).HasMaxLength(20);

                entity.Property(e => e.DelAddressCounty)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressLine1)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressLine2)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressLine3)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressLine4)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DelAddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.DelAddress_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#1");

                entity.Property(e => e.DelAddress_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#2");

                entity.Property(e => e.DelAddress_3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#3");

                entity.Property(e => e.DelAddress_4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#4");

                entity.Property(e => e.DelAddress_5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("DelAddress#5");

                entity.Property(e => e.DemandQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueInQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndDateWithTime).HasMaxLength(16);

                entity.Property(e => e.Exploded)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FollowUp)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Late)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Linked)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NeededByDate).HasColumnType("datetime");

                entity.Property(e => e.NetFree).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OrderDetails)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.PONumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentTag).HasMaxLength(30);

                entity.Property(e => e.Period).HasMaxLength(30);

                entity.Property(e => e.PhysicalStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Rec1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Rec2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RecNumber).HasMaxLength(9);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartDateWithTime).HasMaxLength(16);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SubContract)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_RepPlanMrpRecommendationsRouting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepPlanMrpRecommendationsRouting");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndDateWithTime).HasMaxLength(16);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.NonPrinting)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OpDescription).HasMaxLength(60);

                entity.Property(e => e.OpReference).HasMaxLength(30);

                entity.Property(e => e.Overlap).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWork)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PriResChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PriResDescription).HasMaxLength(60);

                entity.Property(e => e.PriResNotes).HasColumnType("ntext");

                entity.Property(e => e.PriResReference).HasMaxLength(30);

                entity.Property(e => e.PriResTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SecResChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SecResDescription).HasMaxLength(60);

                entity.Property(e => e.SecResNotes).HasColumnType("ntext");

                entity.Property(e => e.SecResPeople).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.SecResReference).HasMaxLength(30);

                entity.Property(e => e.SecResTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupStart).HasColumnType("datetime");

                entity.Property(e => e.SetupStartWithTime).HasMaxLength(16);

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartDateWithTime).HasMaxLength(16);

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContractOp)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepPlanMrpRecommendationsTag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepPlanMrpRecommendationsTags");

                entity.Property(e => e.DestinationItem).HasMaxLength(100);

                entity.Property(e => e.DestinationItemDisplay).HasMaxLength(100);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.SourceItem).HasMaxLength(100);

                entity.Property(e => e.SourceItemDisplay).HasMaxLength(100);
            });

            modelBuilder.Entity<vw_RepPlanMrpReplenishment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepPlanMrpReplenishments");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.PoLineReference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.QtyIn).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyUsed).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3);
            });

            modelBuilder.Entity<vw_RepPlanUniqueProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepPlanUniqueProducts");

                entity.Property(e => e.ProductCode).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepPopOrderReturn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepPopOrderReturn");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SettlementDiscPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SourceDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubtotalChargesNetValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubtotalChargesTaxValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubtotalDiscountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubtotalGoodsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubtotalLandedCosts).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SupplierDocumentNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAccrualValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalGrossValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalTaxValue).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepPopOrderReturnLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepPopOrderReturnLine");

                entity.Property(e => e.AddChargeInvoiceValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BuyingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BuyingUnitMultiple).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.DisputedAddChargeValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DisputedInvCredQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LandedCostsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OnOrderQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PricingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PricingUnitMultiple).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.ReceiptReturnQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierPartRef)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.UnitBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.UnitDiscountValue).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepProspect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepProspects");

                entity.Property(e => e.AccountManager)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.AccountManagerFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountManagerLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountManagerMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AccountManagerPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AccountManagerSalutation).HasMaxLength(50);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.AddressCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressCountryName).HasMaxLength(20);

                entity.Property(e => e.AddressCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Address_1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#1");

                entity.Property(e => e.Address_2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#2");

                entity.Property(e => e.Address_3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#3");

                entity.Property(e => e.Address_4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#4");

                entity.Property(e => e.Address_5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#5");

                entity.Property(e => e.CondensedAddress).HasMaxLength(500);

                entity.Property(e => e.CondensedDelAddress).HasMaxLength(500);

                entity.Property(e => e.Contact)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContactSalutation).HasMaxLength(50);

                entity.Property(e => e.CustName).HasMaxLength(60);

                entity.Property(e => e.DelAddressCity)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DelAddressCountryName).HasMaxLength(20);

                entity.Property(e => e.DelAddressCounty)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DelAddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DelAddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DelAddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DelAddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DelAddressPostcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DelAddress_1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DelAddress#1");

                entity.Property(e => e.DelAddress_2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DelAddress#2");

                entity.Property(e => e.DelAddress_3)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DelAddress#3");

                entity.Property(e => e.DelAddress_4)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DelAddress#4");

                entity.Property(e => e.DelAddress_5)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DelAddress#5");

                entity.Property(e => e.DelContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DelContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DelContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DelContactName)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.DelContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DelContactSalutation).HasMaxLength(50);

                entity.Property(e => e.DelFaxAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DelFaxCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DelFaxNumber)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DelFaxPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DelFaxSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DelTelNumber)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.DelTelephoneAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DelTelephoneCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DelTelephonePreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DelTelephoneSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EMailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FaxAreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FaxCountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(227)
                    .IsUnicode(false);

                entity.Property(e => e.FaxPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FaxSubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.SalesRep)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRepFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRepLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRepMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRepPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRepSalutation).HasMaxLength(50);

                entity.Property(e => e.TelNumber_1)
                    .HasMaxLength(227)
                    .IsUnicode(false)
                    .HasColumnName("TelNumber#1");

                entity.Property(e => e.TelNumber_2)
                    .HasMaxLength(227)
                    .IsUnicode(false)
                    .HasColumnName("TelNumber#2");

                entity.Property(e => e.Telephone1AreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone1CountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone1PreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone1SubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone2AreaCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone2CountryCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone2PreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone2SubscriberNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TradeContact)
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.TradeContactFirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TradeContactLastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TradeContactMiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.TradeContactPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TradeContactSalutation).HasMaxLength(50);

                entity.Property(e => e.VatRegNumber).HasMaxLength(30);

                entity.Property(e => e.WebAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_RepSalesForecastHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepSalesForecastHeader");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FinancialYearBasis)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ForecastEnd).HasColumnType("datetime");

                entity.Property(e => e.ForecastStart).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<vw_RepSalesForecastLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepSalesForecastLines");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ForecastDate).HasColumnType("datetime");

                entity.Property(e => e.Period).HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SellingPrice).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepSfdcCurrentlyProcessing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepSfdcCurrentlyProcessing");

                entity.Property(e => e.EmployeeNumber).HasMaxLength(10);

                entity.Property(e => e.LoggedOn).HasColumnType("datetime");

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepSfdcOperationTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepSfdcOperationTimes");

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CategoryDescription).HasMaxLength(60);

                entity.Property(e => e.CategoryReference).HasMaxLength(30);

                entity.Property(e => e.EmployeeName).HasMaxLength(50);

                entity.Property(e => e.EmployeeNumber).HasMaxLength(10);

                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LabCredit).HasMaxLength(8);

                entity.Property(e => e.LabDebit).HasMaxLength(8);

                entity.Property(e => e.LabourEnd).HasColumnType("datetime");

                entity.Property(e => e.LabourRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourStart).HasColumnType("datetime");

                entity.Property(e => e.MachCredit).HasMaxLength(8);

                entity.Property(e => e.MachDebit).HasMaxLength(8);

                entity.Property(e => e.MachineEnd).HasColumnType("datetime");

                entity.Property(e => e.MachineRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineStart).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OpDescription).HasMaxLength(60);

                entity.Property(e => e.OpReference).HasMaxLength(30);

                entity.Property(e => e.PieceWorkQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWorkRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupCredit).HasMaxLength(8);

                entity.Property(e => e.SetupDebit).HasMaxLength(8);

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StageReference).HasMaxLength(30);

                entity.Property(e => e.UserName).HasMaxLength(30);

                entity.Property(e => e.WoReference).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepSopOrderReturn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepSopOrderReturn");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.DocumentCreatedBy)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.DocumentDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ExternalReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentNominalAccountRef)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentNominalCostCentre)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentNominalDepartment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentReference)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Priority)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SettlementDiscPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SourceDocumentNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubtotalChargesNetValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubtotalChargesTaxValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubtotalDiscountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SubtotalGoodsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalGrossValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalGrossValueIncSett).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalNetValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalTaxValue).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepSopOrderReturnLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepSopOrderReturnLine");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisCode1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode5)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisCode6)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AvailableForDespatch).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.DespatchNoteComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.InvoiceCreditQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineTaxValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LineTotalValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NominalAccountRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.PostedInvoiceCreditQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PricingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PricingUnitMultiple).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RequestedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SellingUnitDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SellingUnitMultiple).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.SellingUnitWeight).HasColumnType("decimal(15, 4)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TraceAvailForDespatch).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitDiscountPercent).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.UnitDiscountValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitSellingPrice).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepStockItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepStockItem");

                entity.Property(e => e.AutoGeneratePrefix)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AverageBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BaseUnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommodityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.DefaultDespatchNoteComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultPickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FreeStockQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.InactiveDate).HasColumnType("datetime");

                entity.Property(e => e.LandedCostsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.LastTraceArchivedUpTo).HasColumnType("datetime");

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SOPItemPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StandardCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StdCostVarianceLastReset).HasColumnType("datetime");

                entity.Property(e => e.StockMultOfBaseUnit).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("decimal(15, 4)");
            });

            modelBuilder.Entity<vw_RepStockItemSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepStockItemSupplier");

                entity.Property(e => e.AccountBalance).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AccountOpened).HasColumnType("datetime");

                entity.Property(e => e.ApplicationDate).HasColumnType("datetime");

                entity.Property(e => e.CataloguePrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CataloguePriceDate).HasColumnType("datetime");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreditReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateAccountDetailsLastChanged).HasColumnType("datetime");

                entity.Property(e => e.DateEuroAccountCopied).HasColumnType("datetime");

                entity.Property(e => e.DateLastOrder).HasColumnType("datetime");

                entity.Property(e => e.DateListPriceChanged).HasColumnType("datetime");

                entity.Property(e => e.DateOfLastTransaction).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DefaultNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultNominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultNominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultOrderPriority)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EarlySettlementDiscountPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EuroAccountNumberCopiedFromTo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.LandedCostsValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastBaseBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastBuyingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastCreditReview).HasColumnType("datetime");

                entity.Property(e => e.LastOrderQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ListBasePrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ListPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ListPriceExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NextCreditReview).HasColumnType("datetime");

                entity.Property(e => e.OrderQuantityYTD).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OrderValueYTD).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QuantityOnOrder).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ReorderMultipleQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountShortName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierStockCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRegistrationNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TradingTerms)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsualOrderQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ValueOfCurrentOrdersInPOP).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepSubContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepSubContract");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.OpDescription).HasMaxLength(60);

                entity.Property(e => e.OpReference).HasMaxLength(30);

                entity.Property(e => e.ProductCode).HasMaxLength(30);

                entity.Property(e => e.QtyAtSubContractor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierRef).HasMaxLength(8);

                entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Value).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepSubContractAdviceNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepSubContractAdviceNotes");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#1");

                entity.Property(e => e.Address_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#2");

                entity.Property(e => e.Address_3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#3");

                entity.Property(e => e.Address_4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#4");

                entity.Property(e => e.Address_5)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Address#5");

                entity.Property(e => e.AdviceNoteNumber)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CondensedAddress).HasMaxLength(500);

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.CountryName).HasMaxLength(20);

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchDate).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Postcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Salutation).HasMaxLength(50);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepSubContractOperationComponent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepSubContractOperationComponents");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.ProductCode).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UnitofMeasure)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<vw_RepSubstituteTraceableAudit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepSubstituteTraceableAudit");

                entity.Property(e => e.ActionDescription).HasMaxLength(30);

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.ComponentIdentificationNo).HasMaxLength(30);

                entity.Property(e => e.FinishedItemTraceableIdentificationNo).HasMaxLength(30);

                entity.Property(e => e.LoggedOnUser).HasMaxLength(30);

                entity.Property(e => e.MovementType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PerformedOn).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.StockCode).HasMaxLength(30);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepSuppliers");

                entity.Property(e => e.AccountBalance).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AccountOpened).HasColumnType("datetime");

                entity.Property(e => e.ApplicationDate).HasColumnType("datetime");

                entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreditReference)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DateAccountDetailsLastChanged).HasColumnType("datetime");

                entity.Property(e => e.DateEuroAccountCopied).HasColumnType("datetime");

                entity.Property(e => e.DateOfLastTransaction).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.DefaultNominalAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultNominalCostCentre)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultNominalDepartment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultOrderPriority)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EarlySettlementDiscountPercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EuroAccountNumberCopiedFromTo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.LastCreditReview).HasColumnType("datetime");

                entity.Property(e => e.NextCreditReview).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountNumber)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAccountShortName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRegistrationNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TradingTerms)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ValueOfCurrentOrdersInPOP).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<vw_RepTraceableAllocationBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepTraceableAllocationBalance");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.DespatchedQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepTraceableBinItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepTraceableBinItem");

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.GoodsInQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.GoodsOutQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_RepTraceableItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepTraceableItem");

                entity.Property(e => e.AdditionalReference)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AllocatedQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Barcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.GoodsInQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.GoodsOutQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.IdentificationNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PurchaseOrderNo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityReserved).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.SellByDate).HasColumnType("datetime");

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierGRNNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.UseByDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<vw_RepTrialKitting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepTrialKitting");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.ItemType).HasMaxLength(1);

                entity.Property(e => e.ItemTypeDesc)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.JobStartDate).HasColumnType("datetime");

                entity.Property(e => e.PlanReference).HasMaxLength(30);

                entity.Property(e => e.QtyOnOrder).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.ReorderQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RequiredDisplay).HasMaxLength(30);

                entity.Property(e => e.Shortage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ShortageDisplay).HasMaxLength(30);

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToOrder).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WOrderReference).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepWarehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWarehouse");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Contact)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeCreated).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FaxNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastCompletedStocktake).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpLock)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PostalName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SpareDate1).HasColumnType("datetime");

                entity.Property(e => e.SpareDate2).HasColumnType("datetime");

                entity.Property(e => e.SpareDate3).HasColumnType("datetime");

                entity.Property(e => e.SpareNumber1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareNumber3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SpareText1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SpareText3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TelephoneNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WebAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<vw_RepWipAllCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWipAllCosts");

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActOtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActStdMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActTotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.QtyFinished).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepWipMaterial>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWipMaterials");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.IssueCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.IssueQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepWorkToHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWorkToHeaders");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(60);

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasMaxLength(16);

                entity.Property(e => e.EndDateNoFormat).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.PlanReference).HasMaxLength(30);

                entity.Property(e => e.ProjectNumber).HasMaxLength(50);

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasMaxLength(16);

                entity.Property(e => e.StartDateNoFormat).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksNumber).HasMaxLength(50);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepWorkToOperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWorkToOperations");

                entity.Property(e => e.EndDate).HasMaxLength(16);

                entity.Property(e => e.LabourDescription).HasMaxLength(60);

                entity.Property(e => e.LabourReference).HasMaxLength(30);

                entity.Property(e => e.MachineDescription).HasMaxLength(60);

                entity.Property(e => e.MachineReference).HasMaxLength(30);

                entity.Property(e => e.OperationDescription).HasMaxLength(60);

                entity.Property(e => e.OperationReference).HasMaxLength(30);

                entity.Property(e => e.QtyOs).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupStart).HasMaxLength(16);

                entity.Property(e => e.StageReference).HasMaxLength(30);

                entity.Property(e => e.StartDate).HasMaxLength(16);

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<vw_RepWorksOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWorksOrders");

                entity.Property(e => e.AccToDebit).HasMaxLength(8);

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActLabourTime).HasMaxLength(30);

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineTime).HasMaxLength(30);

                entity.Property(e => e.ActMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupTime).HasMaxLength(30);

                entity.Property(e => e.ActStdMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActStdUnplannedCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubContTime).HasMaxLength(30);

                entity.Property(e => e.ActSuggSellPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActUnitCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualLabourOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMachineOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualMaterialOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.BinName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.CostsTransStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasMaxLength(16);

                entity.Property(e => e.EndDateNoFormat).HasColumnType("datetime");

                entity.Property(e => e.EstLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstMachineRunCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstMachineSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstStdMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstSuggSellPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EstUnitCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.IncludeInMrpDemand)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.IncludeInMrpReplenishments)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LastCompletedDate).HasColumnType("datetime");

                entity.Property(e => e.LastCosted).HasColumnType("datetime");

                entity.Property(e => e.Late)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LinkedTo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.NeededByDate).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OsCostsToBePosted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlanReference).HasMaxLength(30);

                entity.Property(e => e.PlannedLabourOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlannedMachineOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PlannedMaterialOverhead).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedLabCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedMachCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedUnplannedCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Printed)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyScrapped).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ReissueWO).HasMaxLength(30);

                entity.Property(e => e.SalespersonFirstName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonLastName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonMiddleName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.SalespersonPreMigratedData)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SalespersonSalutation).HasMaxLength(50);

                entity.Property(e => e.ScrapFactor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ScrapReason).HasColumnType("ntext");

                entity.Property(e => e.StartDate).HasMaxLength(16);

                entity.Property(e => e.StartDateNoFormat).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TotalActualOverheads).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.TotalPlannedOverheads).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.UseCompletionWarehouse)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WorksNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepWorksOrderLabel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWorksOrderLabels");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<vw_RepWorksOrdersAllocIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWorksOrdersAllocIssues");

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Cancelled).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.FromCompletionWarehouse)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Instruction).HasMaxLength(255);

                entity.Property(e => e.Issued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.PostedIssueCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedIssueQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Scrapped).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StockUnitName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TotalIssueCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UnitOfMeasure).HasColumnType("ntext");
            });

            modelBuilder.Entity<vw_RepWorksOrdersOperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWorksOrdersOperations");

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActLabourTime).HasMaxLength(30);

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineTime).HasMaxLength(30);

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupTime).HasMaxLength(30);

                entity.Property(e => e.ActSubContTime).HasMaxLength(30);

                entity.Property(e => e.ActSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Complete).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndDateWithTime).HasMaxLength(16);

                entity.Property(e => e.EstLabourTime).HasMaxLength(30);

                entity.Property(e => e.EstMachineTime).HasMaxLength(30);

                entity.Property(e => e.IncLabSetup)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.KeepLabourWithMachine)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LabourChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription).HasMaxLength(60);

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourPeople).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LabourReference).HasMaxLength(30);

                entity.Property(e => e.LabourTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineChargeRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineDescription).HasMaxLength(60);

                entity.Property(e => e.MachineNotes).HasColumnType("ntext");

                entity.Property(e => e.MachineReference).HasMaxLength(30);

                entity.Property(e => e.MachineTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NonPrinting)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.OpID).ValueGeneratedOnAdd();

                entity.Property(e => e.PieceCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceQuantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWork)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.QtyPerRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC1Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC2Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC3Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC4Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SC5Cost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupStart).HasColumnType("datetime");

                entity.Property(e => e.SetupStartWithTime).HasMaxLength(16);

                entity.Property(e => e.SetupTotal).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Shrinkage).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartDateWithTime).HasMaxLength(16);

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SubContractOp)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SuppRef).HasMaxLength(8);

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingRepeatQty).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<vw_RepWorksOrdersOperationsActual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWorksOrdersOperationsActuals");

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActualLabourTime).HasMaxLength(30);

                entity.Property(e => e.ActualMachineTime).HasMaxLength(30);

                entity.Property(e => e.ActualSetupTime).HasMaxLength(30);

                entity.Property(e => e.ActualSubContTime).HasMaxLength(30);

                entity.Property(e => e.CategoryDescription).HasMaxLength(60);

                entity.Property(e => e.CategoryReference).HasMaxLength(30);

                entity.Property(e => e.EmployeeName).HasMaxLength(50);

                entity.Property(e => e.EmployeeNumber).HasMaxLength(10);

                entity.Property(e => e.EntryDateTime).HasMaxLength(16);

                entity.Property(e => e.EntryDateTimeNoFormat).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.LabourEnd).HasMaxLength(16);

                entity.Property(e => e.LabourEndNoFormat).HasColumnType("datetime");

                entity.Property(e => e.LabourRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourStart).HasMaxLength(16);

                entity.Property(e => e.LabourStartNoFormat).HasColumnType("datetime");

                entity.Property(e => e.MachineEnd).HasMaxLength(16);

                entity.Property(e => e.MachineEndNoFormat).HasColumnType("datetime");

                entity.Property(e => e.MachineRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineStart).HasMaxLength(16);

                entity.Property(e => e.MachineStartNoFormat).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.PieceWorkQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PieceWorkRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyCompleted).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SetupRate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UserName).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepWorksOrdersSalesOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWorksOrdersSalesOrders");

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.CustOrderNumber).HasMaxLength(30);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RelatesToTopLevel)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_RepWorksOrdersScrap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RepWorksOrdersScrap");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ReasonCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ReasonText)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.Reissued).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Scrapped).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.TransType)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<vw_SOtoWOtoPO>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SOtoWOtoPO");

                entity.Property(e => e.Customer_Order_Number)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Customer Order Number");

                entity.Property(e => e.Purchase_Order_Number)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Purchase Order Number");

                entity.Property(e => e.Sales_Order_Number)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("Sales Order Number");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_Sabre_Increase_Despatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Sabre_Increase_Despatches");

                entity.Property(e => e.BR_Cat_No)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BR Cat No");

                entity.Property(e => e.CustomerAccountName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerDocumentNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.DespatchReceiptQuantity).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Despatch_Note_No)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Despatch Note No");

                entity.Property(e => e.Document_Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Document Status");

                entity.Property(e => e.LineQuantity).HasColumnType("decimal(12, 5)");

                entity.Property(e => e.PickingListComment)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.Product_Group_Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Product Group Code");

                entity.Property(e => e.Product_Group_Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Product Group Description");

                entity.Property(e => e.PromisedDeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.SOP_Doc_No)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SOP Doc No");

                entity.Property(e => e.Stock_Code)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Stock Code");

                entity.Property(e => e.Stock_Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Stock Description");

                entity.Property(e => e.Stock_Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Stock Name");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_SubContractAdviceNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SubContractAdviceNotes");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.AddressLine4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Address_1)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#1");

                entity.Property(e => e.Address_2)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#2");

                entity.Property(e => e.Address_3)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#3");

                entity.Property(e => e.Address_4)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Address#4");

                entity.Property(e => e.Address_5)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Address#5");

                entity.Property(e => e.AdviceNoteNumber)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.CondensedAddress).HasMaxLength(500);

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasMaxLength(235)
                    .IsUnicode(false);

                entity.Property(e => e.CountryName).HasMaxLength(20);

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.DespatchDate).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PostCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Salutation).HasMaxLength(50);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.SuppJobRef).HasMaxLength(50);

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_SubContractListAdviceNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SubContractListAdviceNotes");

                entity.Property(e => e.AdviceNoteNumber)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.DespatchDate).HasColumnType("datetime");

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(8);
            });

            modelBuilder.Entity<vw_SubContractListAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SubContractListAll");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Completed).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Despatched).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.OpIDSource).HasMaxLength(32);

                entity.Property(e => e.Ordered).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(38, 10)");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToBeOrdered).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_SubContractListBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SubContractListBatch");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Completed).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Despatched).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Ordered).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToBeOrdered).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_SubContractListOneOff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SubContractListOneOff");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Completed).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Despatched).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Ordered).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.ProcessDescription).HasMaxLength(60);

                entity.Property(e => e.ProcessReference).HasMaxLength(30);

                entity.Property(e => e.Required).HasColumnType("decimal(38, 10)");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToBeOrdered).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_SubContractRaisePurchaseOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SubContractRaisePurchaseOrder");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.Completed).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Despatched).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Narrative).HasMaxLength(50);

                entity.Property(e => e.OpDescription).HasMaxLength(60);

                entity.Property(e => e.OpReference).HasMaxLength(30);

                entity.Property(e => e.Ordered).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Required).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SubContDetails).HasColumnType("ntext");

                entity.Property(e => e.Supplier).HasMaxLength(8);

                entity.Property(e => e.ToBeOrdered).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_SubContractStockAtSubContractor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_SubContractStockAtSubContractor");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.OpDescription).HasMaxLength(60);

                entity.Property(e => e.OpReference).HasMaxLength(30);

                entity.Property(e => e.ProductCode).HasMaxLength(30);

                entity.Property(e => e.QtyAtSubContractor).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierRef).HasMaxLength(8);

                entity.Property(e => e.UnitCost).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Value).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_WoTotalTimeCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WoTotalTimeCosts");

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActStdMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.QtyFinished).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_WoTreeLinksView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WoTreeLinksView");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LastCompletedDate).HasColumnType("datetime");

                entity.Property(e => e.PlanPeriod).HasMaxLength(30);

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_WoWorkInProgress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WoWorkInProgress");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.IssueCost).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.IssueQty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Reference).HasMaxLength(30);

                entity.Property(e => e.UnitCost).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_WoWorkInProgressAllCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WoWorkInProgressAllCosts");

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMaterialCost).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.ActOtherCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActStdMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActTotalCost).HasColumnType("decimal(38, 5)");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.QtyFinished).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_WorksOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WorksOrders");

                entity.Property(e => e.AccToDebit).HasMaxLength(8);

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.ActLabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActMachineCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActStdMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActSuggSellPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ActUnitCost).HasColumnType("decimal(38, 12)");

                entity.Property(e => e.AnalysisCode_1)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#1");

                entity.Property(e => e.AnalysisCode_2)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#2");

                entity.Property(e => e.AnalysisCode_3)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#3");

                entity.Property(e => e.AnalysisCode_4)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#4");

                entity.Property(e => e.AnalysisCode_5)
                    .HasMaxLength(20)
                    .HasColumnName("AnalysisCode#5");

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(60);

                entity.Property(e => e.CostPcnt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CostsTransStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CurrentDate).HasColumnType("datetime");

                entity.Property(e => e.Custom_1)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#1");

                entity.Property(e => e.Custom_2)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#2");

                entity.Property(e => e.Custom_3)
                    .HasMaxLength(50)
                    .HasColumnName("Custom#3");

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EnteredBy).HasMaxLength(30);

                entity.Property(e => e.ImageForWoDocs).HasMaxLength(255);

                entity.Property(e => e.IssueCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LastCompletedDate).HasColumnType("datetime");

                entity.Property(e => e.LastCosted).HasColumnType("datetime");

                entity.Property(e => e.Linked)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LinkedTo)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MachineRun).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MachineSet).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NeededByDate).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.OsCostsToBePosted).HasColumnType("decimal(24, 5)");

                entity.Property(e => e.PipelineList)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.PlanPeriod).HasMaxLength(30);

                entity.Property(e => e.PostedLabCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedMachCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedMatCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedSetupCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedSubContCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PostedToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ProjectNumber).HasMaxLength(50);

                entity.Property(e => e.QtyCostedFor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyFinished).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyScrapped).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ReissueWO).HasMaxLength(30);

                entity.Property(e => e.Salesperson).HasMaxLength(235);

                entity.Property(e => e.SalespersonFirstName).HasMaxLength(60);

                entity.Property(e => e.SalespersonLastName).HasMaxLength(60);

                entity.Property(e => e.SalespersonMiddleName).HasMaxLength(60);

                entity.Property(e => e.SalespersonPreMigratedData).HasMaxLength(30);

                entity.Property(e => e.SalespersonSalutation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScrapFactor).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ScrapReason).HasMaxLength(4000);

                entity.Property(e => e.StandardMaterialCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.SubContract).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SuggestedSellingPrice).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ToolingCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.WarehouseName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WorksNumber).HasMaxLength(50);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<vw_WorksOrderAllocatedComponentsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WorksOrderAllocatedComponentsList");

                entity.Property(e => e.Allocated).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BinName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryStatus)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(60);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FinishedDescription).HasMaxLength(60);

                entity.Property(e => e.FinishedStockCode).HasMaxLength(60);

                entity.Property(e => e.PipelineList)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Stage).HasMaxLength(30);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StockCode).HasMaxLength(30);

                entity.Property(e => e.UnitOfMeasure).HasColumnType("ntext");

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);

                entity.Property(e => e.WorksOrderStatus).HasMaxLength(20);
            });

            modelBuilder.Entity<vw_WorksOrderWithOriginalSalesOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WorksOrderWithOriginalSalesOrders");

                entity.Property(e => e.AccountRef).HasMaxLength(8);

                entity.Property(e => e.BomDescription).HasMaxLength(60);

                entity.Property(e => e.BomReference).HasMaxLength(30);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueLessSafety).HasColumnType("datetime");

                entity.Property(e => e.PipelineList)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroupCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroupDesc)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QtyFinished).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.QtyOutstanding).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.QtyRequired).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.WarehouseName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
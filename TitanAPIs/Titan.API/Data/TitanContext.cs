// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Titan.API.Models;

namespace Titan.API
{
    public partial class TitanContext : DbContext
    {
        public TitanContext()
        {
        }

        public TitanContext(DbContextOptions<TitanContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AWKCostTotalsReport> AWKCostTotalsReports { get; set; }
        public virtual DbSet<AWKDetail> AWKDetails { get; set; }
        public virtual DbSet<AWKHeader> AWKHeaders { get; set; }
        public virtual DbSet<AWKReport> AWKReports { get; set; }
        public virtual DbSet<AWKSetting> AWKSettings { get; set; }
        public virtual DbSet<AWKStockHeader> AWKStockHeaders { get; set; }
        public virtual DbSet<ContractAuth> ContractAuths { get; set; }
        public virtual DbSet<ContractDetail> ContractDetails { get; set; }
        public virtual DbSet<ContractHeader> ContractHeaders { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<DigitalGRNDetail> DigitalGRNDetails { get; set; }
        public virtual DbSet<DigitalGRNHeader> DigitalGRNHeaders { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<EIRelationship> EIRelationships { get; set; }
        public virtual DbSet<EQPTracking> EQPTrackings { get; set; }
        public virtual DbSet<ETrack> ETracks { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EngineeringInstruction> EngineeringInstructions { get; set; }
        public virtual DbSet<FeatureFlag> FeatureFlags { get; set; }
        public virtual DbSet<GRNLocation> GRNLocations { get; set; }
        public virtual DbSet<HoldNote> HoldNotes { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<LookUpAWKFault> LookUpAWKFaults { get; set; }
        public virtual DbSet<LookUpAWKSalesType> LookUpAWKSalesTypes { get; set; }
        public virtual DbSet<LookUpAWKWorkRequired> LookUpAWKWorkRequireds { get; set; }
        public virtual DbSet<LookUpColour> LookUpColours { get; set; }
        public virtual DbSet<LookUpDeliveryTerm> LookUpDeliveryTerms { get; set; }
        public virtual DbSet<LookUpDespatchMethod> LookUpDespatchMethods { get; set; }
        public virtual DbSet<LookUpEngType> LookUpEngTypes { get; set; }
        public virtual DbSet<LookUpLeadTime> LookUpLeadTimes { get; set; }
        public virtual DbSet<LookUpLocation> LookUpLocations { get; set; }
        public virtual DbSet<LookUpTicketDatum> LookUpTicketData { get; set; }
        public virtual DbSet<LookUpWarranty> LookUpWarranties { get; set; }
        public virtual DbSet<LookUpWorkRequired> LookUpWorkRequireds { get; set; }
        public virtual DbSet<NewExpedite> NewExpedites { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderHeader> OrderHeaders { get; set; }
        public virtual DbSet<PartsListCat> PartsListCats { get; set; }
        public virtual DbSet<PartsListDetail> PartsListDetails { get; set; }
        public virtual DbSet<PartsListHeader> PartsListHeaders { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<StockHeader> StockHeaders { get; set; }
        public virtual DbSet<StockTakeDetail> StockTakeDetails { get; set; }
        public virtual DbSet<StockTakeHeader> StockTakeHeaders { get; set; }
        public virtual DbSet<StockTakeStatus> StockTakeStatuses { get; set; }
        public virtual DbSet<TicketAction> TicketActions { get; set; }
        public virtual DbSet<TicketHeader> TicketHeaders { get; set; }
        public virtual DbSet<TicketSubscription> TicketSubscriptions { get; set; }
        public virtual DbSet<TrackingDetail> TrackingDetails { get; set; }
        public virtual DbSet<TrackingHeader> TrackingHeaders { get; set; }
        public virtual DbSet<TrackingOperation> TrackingOperations { get; set; }
        public virtual DbSet<_12Months_Part> _12Months_Parts { get; set; }
        public virtual DbSet<vw_AWKStockRecord> vw_AWKStockRecords { get; set; }
        public virtual DbSet<vw_KPI_GoodsIn> vw_KPI_GoodsIns { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AWKCostTotalsReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AWKCostTotalsReport");

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.CatNo).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.RepairCost).HasColumnType("money");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<AWKDetail>(entity =>
            {
                entity.HasKey(e => e.AWDID);

                entity.ToTable("AWKDetail");

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Fault).HasMaxLength(255);

                entity.Property(e => e.LastUpdatedBy).HasMaxLength(50);

                entity.Property(e => e.ProductGroup).HasMaxLength(50);

                entity.Property(e => e.RepairCost).HasColumnType("money");

                entity.Property(e => e.RepairDetail).HasMaxLength(255);

                entity.Property(e => e.StockCode).HasMaxLength(50);

                entity.Property(e => e.WorkRequired).HasMaxLength(255);
            });

            modelBuilder.Entity<AWKHeader>(entity =>
            {
                entity.ToTable("AWKHeader");

                entity.Property(e => e.AWKQuotedBy).HasMaxLength(50);

                entity.Property(e => e.AWKQuotedDate).HasColumnType("datetime");

                entity.Property(e => e.AWKSalesType).HasMaxLength(50);

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountNumber).HasMaxLength(50);

                entity.Property(e => e.ApprovedBy).HasMaxLength(50);

                entity.Property(e => e.AuthorisedBy).HasMaxLength(50);

                entity.Property(e => e.CatNo).HasMaxLength(50);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ContractName).HasMaxLength(50);

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateApproved).HasColumnType("datetime");

                entity.Property(e => e.DateAuthorised).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.EMail).HasMaxLength(255);

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.SOR).HasMaxLength(30);

                entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<AWKReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AWKReport");

                entity.Property(e => e.AWKQuotedBy).HasMaxLength(50);

                entity.Property(e => e.AWKQuotedDate).HasColumnType("datetime");

                entity.Property(e => e.AWKSalesType).HasMaxLength(50);

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.AccountNumber).HasMaxLength(50);

                entity.Property(e => e.ApprovedBy).HasMaxLength(50);

                entity.Property(e => e.AuthorisedBy).HasMaxLength(50);

                entity.Property(e => e.CatNo).HasMaxLength(50);

                entity.Property(e => e.Component).HasMaxLength(255);

                entity.Property(e => e.ContractName).HasMaxLength(50);

                entity.Property(e => e.CustOrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateApproved).HasColumnType("datetime");

                entity.Property(e => e.DateAuthorised).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Fault).HasMaxLength(255);

                entity.Property(e => e.ProductGroup).HasMaxLength(50);

                entity.Property(e => e.Qty).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.RepairCost).HasColumnType("money");

                entity.Property(e => e.RepairDetail).HasMaxLength(255);

                entity.Property(e => e.SOR).HasMaxLength(30);

                entity.Property(e => e.StockCode).HasMaxLength(50);

                entity.Property(e => e.WorkRequired).HasMaxLength(255);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<AWKSetting>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.AWKStorage).HasMaxLength(255);

                entity.Property(e => e.EmailAddresses).HasMaxLength(255);

                entity.Property(e => e.PixelSize).HasDefaultValueSql("((400))");
            });

            modelBuilder.Entity<AWKStockHeader>(entity =>
            {
                entity.HasKey(e => e.StkID);

                entity.ToTable("AWKStockHeader");

                entity.Property(e => e.StkID).ValueGeneratedNever();

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.LastUpdatedBy).HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.StockCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ContractAuth>(entity =>
            {
                entity.HasKey(e => e.conAuthID)
                    .HasName("PK_CotractAuth");

                entity.ToTable("ContractAuth");

                entity.Property(e => e.conAuthID).ValueGeneratedNever();

                entity.Property(e => e.ComDate).HasColumnType("date");

                entity.Property(e => e.ComUsr).HasMaxLength(50);

                entity.Property(e => e.Commercial).HasDefaultValueSql("((0))");

                entity.Property(e => e.EngDate).HasColumnType("date");

                entity.Property(e => e.EngUsr).HasMaxLength(50);

                entity.Property(e => e.Engineering).HasDefaultValueSql("((0))");

                entity.Property(e => e.Enviromental).HasDefaultValueSql("((0))");

                entity.Property(e => e.EnviromentalDate).HasColumnType("date");

                entity.Property(e => e.EnviromentalUsr).HasMaxLength(50);

                entity.Property(e => e.HS).HasDefaultValueSql("((0))");

                entity.Property(e => e.HSDate).HasColumnType("date");

                entity.Property(e => e.HSUsr).HasMaxLength(50);

                entity.Property(e => e.Materials).HasDefaultValueSql("((0))");

                entity.Property(e => e.MaterialsDate).HasColumnType("date");

                entity.Property(e => e.MaterialsUsr).HasMaxLength(50);

                entity.Property(e => e.Production).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductionDate).HasColumnType("date");

                entity.Property(e => e.ProductionUsr).HasMaxLength(50);
            });

            modelBuilder.Entity<ContractDetail>(entity =>
            {
                entity.HasKey(e => e.ConDetID);

                entity.Property(e => e.Colour).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.DeliveryTerms).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.DespatchMethod).HasMaxLength(50);

                entity.Property(e => e.DirtyStockCode).HasMaxLength(50);

                entity.Property(e => e.LastUpdatedBy).HasMaxLength(50);

                entity.Property(e => e.ParentPart).HasMaxLength(50);

                entity.Property(e => e.QuotationNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialInstruction).HasMaxLength(255);

                entity.Property(e => e.StockCode).HasMaxLength(50);

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.Warranty).HasMaxLength(30);

                entity.Property(e => e.WorkRequired).HasMaxLength(50);
            });

            modelBuilder.Entity<ContractHeader>(entity =>
            {
                entity.HasKey(e => e.ConID);

                entity.ToTable("ContractHeader");

                entity.Property(e => e.AddressLine1).HasMaxLength(60);

                entity.Property(e => e.AddressLine2).HasMaxLength(60);

                entity.Property(e => e.AddressLine3).HasMaxLength(60);

                entity.Property(e => e.AddressLine4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.BookingInInstructions).HasMaxLength(255);

                entity.Property(e => e.City).HasMaxLength(60);

                entity.Property(e => e.ContractName).HasMaxLength(50);

                entity.Property(e => e.County).HasMaxLength(60);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CustomerName).HasMaxLength(255);

                entity.Property(e => e.CustomerOrderDate).HasColumnType("date");

                entity.Property(e => e.CustomerOrderNumber).HasMaxLength(255);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.DeliveryTerms).HasMaxLength(50);

                entity.Property(e => e.DespatchMethod).HasMaxLength(50);

                entity.Property(e => e.LastUpdatedBy).HasMaxLength(50);

                entity.Property(e => e.PostCode).HasMaxLength(10);

                entity.Property(e => e.PostalName).HasMaxLength(60);
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasKey(e => e.CusID);

                entity.Property(e => e.CusID).ValueGeneratedNever();

                entity.Property(e => e.ContentType).HasMaxLength(50);

                entity.Property(e => e.CustomerAccountNumber)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName).HasMaxLength(50);

                entity.Property(e => e.ImageData).HasColumnType("image");
            });

            modelBuilder.Entity<DigitalGRNDetail>(entity =>
            {
                entity.HasKey(e => e.DGRNDETID);

                entity.ToTable("DigitalGRNDetail");

                entity.Property(e => e.Colour).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DeliveryTerms).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.DespatchMethod).HasMaxLength(50);

                entity.Property(e => e.DirtyStockCode).HasMaxLength(50);

                entity.Property(e => e.SerialNumber).HasMaxLength(255);

                entity.Property(e => e.SpecialInstruction).HasMaxLength(255);

                entity.Property(e => e.StockCode).HasMaxLength(50);

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.Warranty).HasMaxLength(30);

                entity.Property(e => e.WorkRequired).HasMaxLength(50);

                entity.HasOne(d => d.DGRN)
                    .WithMany(p => p.DigitalGRNDetails)
                    .HasForeignKey(d => d.DGRNID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DigitalGRNDetail_DigitalGRNHeader");
            });

            modelBuilder.Entity<DigitalGRNHeader>(entity =>
            {
                entity.HasKey(e => e.DGRNID);

                entity.ToTable("DigitalGRNHeader");

                entity.Property(e => e.AddressLine1).HasMaxLength(60);

                entity.Property(e => e.AddressLine2).HasMaxLength(60);

                entity.Property(e => e.AddressLine3).HasMaxLength(60);

                entity.Property(e => e.AddressLine4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovedBy).HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(60);

                entity.Property(e => e.County).HasMaxLength(60);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CusOrderNumber).HasMaxLength(50);

                entity.Property(e => e.CustomerName).HasMaxLength(255);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DeliveryTerms).HasMaxLength(50);

                entity.Property(e => e.DespatchMethod).HasMaxLength(50);

                entity.Property(e => e.GRN).HasMaxLength(255);

                entity.Property(e => e.OrdCustomerRef).HasMaxLength(50);

                entity.Property(e => e.OrdSpecialInstruction).HasMaxLength(255);

                entity.Property(e => e.PostCode).HasMaxLength(10);

                entity.Property(e => e.PostalName).HasMaxLength(60);

                entity.Property(e => e.SOR).HasMaxLength(50);
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.HasKey(e => e.DocID);

                entity.Property(e => e.AWKImage).IsUnicode(false);

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.DocumentName).HasMaxLength(250);

                entity.Property(e => e.FilePath).HasMaxLength(250);

                entity.Property(e => e.FileType).HasMaxLength(6);

                entity.Property(e => e.LastUpdatedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<EIRelationship>(entity =>
            {
                entity.HasKey(e => new { e.ParentId, e.ChildId })
                    .HasName("PK_EngineeringInstructionRelationships");

                entity.Property(e => e.ParentId).HasMaxLength(50);

                entity.Property(e => e.ChildId).HasMaxLength(50);
            });

            modelBuilder.Entity<EQPTracking>(entity =>
            {
                entity.HasKey(e => e.ID)
                    .HasName("IX_WoOpPrimaryKey")
                    .IsClustered(false);

                entity.ToTable("EQPTracking");

                entity.Property(e => e.Complete).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndedBy).HasMaxLength(50);

                entity.Property(e => e.InProgress).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.LabourDescription).HasMaxLength(60);

                entity.Property(e => e.LabourNotes).HasColumnType("ntext");

                entity.Property(e => e.LabourReference).HasMaxLength(30);

                entity.Property(e => e.Notes).HasColumnType("ntext");

                entity.Property(e => e.ProcessDescription)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.ProcessReference)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartedBy).HasMaxLength(50);

                entity.Property(e => e.WorksOrderNumber).HasMaxLength(30);
            });

            modelBuilder.Entity<ETrack>(entity =>
            {
                entity.Property(e => e.DateOpened).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.EmailID).HasMaxLength(256);

                entity.Property(e => e.EmailTo).HasMaxLength(255);

                entity.Property(e => e.SentBy).HasMaxLength(50);
            });

            modelBuilder.Entity<EmailTemplate>(entity =>
            {
                entity.HasKey(e => e.TemplateName);

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Template)
                    .IsRequired()
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EngineeringInstruction>(entity =>
            {
                entity.HasKey(e => e.EIRef);

                entity.Property(e => e.EIRef).HasMaxLength(50);
            });

            modelBuilder.Entity<FeatureFlag>(entity =>
            {
                entity.HasKey(e => e.FeatureName);

                entity.ToTable("FeatureFlag");

                entity.Property(e => e.FeatureName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GRNLocation>(entity =>
            {
                entity.HasKey(e => e.GRNID)
                    .HasName("PK_GRNDetails");

                entity.Property(e => e.DateIssued).HasColumnType("datetime");

                entity.Property(e => e.Location).HasMaxLength(50);
            });

            modelBuilder.Entity<HoldNote>(entity =>
            {
                entity.HasKey(e => e.HNID);

                entity.Property(e => e.AccountName).HasMaxLength(60);

                entity.Property(e => e.CatNo).HasMaxLength(50);

                entity.Property(e => e.DateRasied).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Fault).HasMaxLength(255);

                entity.Property(e => e.HoldNotePrefix).HasMaxLength(10);

                entity.Property(e => e.HoldNoteType).HasMaxLength(50);

                entity.Property(e => e.RaisedBy).HasMaxLength(50);

                entity.Property(e => e.SOR).HasMaxLength(30);

                entity.Property(e => e.WONumber).HasMaxLength(50);
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.Property(e => e.UsrName).HasMaxLength(50);

                entity.Property(e => e.logDate).HasColumnType("date");

                entity.Property(e => e.logDetails).IsUnicode(false);

                entity.Property(e => e.logModule)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LookUpAWKFault>(entity =>
            {
                entity.Property(e => e.LookupText).HasMaxLength(255);
            });

            modelBuilder.Entity<LookUpAWKSalesType>(entity =>
            {
                entity.ToTable("LookUpAWKSalesType");

                entity.Property(e => e.LookupText).HasMaxLength(255);
            });

            modelBuilder.Entity<LookUpAWKWorkRequired>(entity =>
            {
                entity.ToTable("LookUpAWKWorkRequired");

                entity.Property(e => e.LookupText).HasMaxLength(255);
            });

            modelBuilder.Entity<LookUpColour>(entity =>
            {
                entity.ToTable("LookUpColour");

                entity.Property(e => e.LookupText).HasMaxLength(255);
            });

            modelBuilder.Entity<LookUpDeliveryTerm>(entity =>
            {
                entity.Property(e => e.LookupText).HasMaxLength(50);
            });

            modelBuilder.Entity<LookUpDespatchMethod>(entity =>
            {
                entity.ToTable("LookUpDespatchMethod");

                entity.Property(e => e.LookupText).HasMaxLength(50);
            });

            modelBuilder.Entity<LookUpEngType>(entity =>
            {
                entity.ToTable("LookUpEngType");

                entity.Property(e => e.LookupText).HasMaxLength(50);
            });

            modelBuilder.Entity<LookUpLeadTime>(entity =>
            {
                entity.ToTable("LookUpLeadTime");

                entity.Property(e => e.LookupText).HasMaxLength(50);
            });

            modelBuilder.Entity<LookUpLocation>(entity =>
            {
                entity.Property(e => e.LookupText).HasMaxLength(10);
            });

            modelBuilder.Entity<LookUpTicketDatum>(entity =>
            {
                entity.HasKey(e => e.lupID)
                    .HasName("PK_Lookups");

                entity.Property(e => e.lupText)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LookUpWarranty>(entity =>
            {
                entity.ToTable("LookUpWarranty");

                entity.Property(e => e.LookupText).HasMaxLength(50);
            });

            modelBuilder.Entity<LookUpWorkRequired>(entity =>
            {
                entity.ToTable("LookUpWorkRequired");

                entity.Property(e => e.LookupText).HasMaxLength(255);
            });

            modelBuilder.Entity<NewExpedite>(entity =>
            {
                entity.ToTable("NewExpedite");

                entity.Property(e => e.LastErrorMessage).HasMaxLength(255);

                entity.Property(e => e.LastErrorTime).HasColumnType("datetime");

                entity.Property(e => e.LastRunTime).HasColumnType("datetime");

                entity.Property(e => e.Progress).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => e.DetID);

                entity.Property(e => e.AssetNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Colour).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.DateRepsReceived).HasColumnType("datetime");

                entity.Property(e => e.DeliveryTerms).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.DespatchMethod).HasMaxLength(50);

                entity.Property(e => e.DirtyStockCode).HasMaxLength(50);

                entity.Property(e => e.LastUpdatedBy).HasMaxLength(50);

                entity.Property(e => e.Location).HasMaxLength(10);

                entity.Property(e => e.QuotationNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SerialNumber).HasMaxLength(255);

                entity.Property(e => e.SpecialInstruction).HasMaxLength(255);

                entity.Property(e => e.StockCode).HasMaxLength(50);

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.Property(e => e.Warranty).HasMaxLength(30);

                entity.Property(e => e.WorkRequired).HasMaxLength(50);
            });

            modelBuilder.Entity<OrderHeader>(entity =>
            {
                entity.HasKey(e => e.OrdID);

                entity.ToTable("OrderHeader");

                entity.Property(e => e.AddressLine1).HasMaxLength(60);

                entity.Property(e => e.AddressLine2).HasMaxLength(60);

                entity.Property(e => e.AddressLine3).HasMaxLength(60);

                entity.Property(e => e.AddressLine4)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovedBy).HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(60);

                entity.Property(e => e.County).HasMaxLength(60);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CusOrderNumber).HasMaxLength(50);

                entity.Property(e => e.CustomerName).HasMaxLength(255);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DeliveryTerms).HasMaxLength(50);

                entity.Property(e => e.DespatchMethod).HasMaxLength(50);

                entity.Property(e => e.GRN).HasMaxLength(50);

                entity.Property(e => e.OrdCustomerRef).HasMaxLength(50);

                entity.Property(e => e.OrdSpecialInstruction).HasMaxLength(255);

                entity.Property(e => e.PostCode).HasMaxLength(10);

                entity.Property(e => e.PostalName).HasMaxLength(60);

                entity.Property(e => e.SOR).HasMaxLength(50);
            });

            modelBuilder.Entity<PartsListCat>(entity =>
            {
                entity.HasKey(e => e.CATID);

                entity.Property(e => e.CatNumber).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.LastUpdatedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<PartsListDetail>(entity =>
            {
                entity.HasKey(e => e.PLDID)
                    .HasName("PK_PartsList");

                entity.ToTable("PartsListDetail");

                entity.Property(e => e.AlternativePartTo).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.LastUpdatedBy).HasMaxLength(50);

                entity.Property(e => e.Manufacturer).HasMaxLength(50);

                entity.Property(e => e.ManufacturersPartNumber).HasMaxLength(50);

                entity.Property(e => e.PartNumber).HasMaxLength(50);

                entity.Property(e => e.PartsListID)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.StockUnit).HasMaxLength(50);
            });

            modelBuilder.Entity<PartsListHeader>(entity =>
            {
                entity.HasKey(e => e.PLHID);

                entity.ToTable("PartsListHeader");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy).HasMaxLength(50);

                entity.Property(e => e.ProductGroup).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(255);
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.AWKStorage).HasMaxLength(255);

                entity.Property(e => e.DocumentStorage).HasMaxLength(255);

                entity.Property(e => e.EmailServer).HasMaxLength(50);

                entity.Property(e => e.POPrefix).HasMaxLength(10);

                entity.Property(e => e.POStorage).HasMaxLength(255);

                entity.Property(e => e.TestEmailServer).HasMaxLength(50);

                entity.Property(e => e.WRTest)
                    .IsRequired()
                    .HasDefaultValueSql("('True')");
            });

            modelBuilder.Entity<StockHeader>(entity =>
            {
                entity.HasKey(e => e.StkID)
                    .HasName("PK_Stock");

                entity.ToTable("StockHeader");

                entity.Property(e => e.StkID).ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.DirtyStockCode).HasMaxLength(50);

                entity.Property(e => e.Image).HasMaxLength(50);

                entity.Property(e => e.StkContentType).HasMaxLength(50);

                entity.Property(e => e.StkImageData).HasColumnType("image");

                entity.Property(e => e.StockCode).HasMaxLength(50);
            });

            modelBuilder.Entity<StockTakeDetail>(entity =>
            {
                entity.Property(e => e.Adjustment).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.AdjustmentValue).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.FreeStock).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Location)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecordedBy).HasMaxLength(50);

                entity.Property(e => e.RecordedDate).HasColumnType("datetime");

                entity.Property(e => e.RecordedValue).HasColumnType("decimal(15, 5)");
            });

            modelBuilder.Entity<StockTakeHeader>(entity =>
            {
                entity.HasKey(e => e.STKID);

                entity.ToTable("StockTakeHeader");

                entity.Property(e => e.CompletedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.DateCompleted).HasColumnType("datetime");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Warehouse)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StockTakeStatus>(entity =>
            {
                entity.HasKey(e => e.StatusID);

                entity.ToTable("StockTakeStatus");

                entity.Property(e => e.StatusID).ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TicketAction>(entity =>
            {
                entity.HasKey(e => e.ActionId);

                entity.ToTable("TicketAction");

                entity.Property(e => e.ActionAssignedTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActionBy).HasMaxLength(50);

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ActionType).HasMaxLength(50);
            });

            modelBuilder.Entity<TicketHeader>(entity =>
            {
                entity.HasKey(e => e.TicketId);

                entity.ToTable("TicketHeader");

                entity.Property(e => e.EngineeringType).HasMaxLength(50);

                entity.Property(e => e.TicketAssignedDept)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketAssignedTo).HasMaxLength(50);

                entity.Property(e => e.TicketClosedDate).HasColumnType("date");

                entity.Property(e => e.TicketContact).HasMaxLength(50);

                entity.Property(e => e.TicketContactCompany).HasMaxLength(50);

                entity.Property(e => e.TicketContactEmail).HasMaxLength(50);

                entity.Property(e => e.TicketContactPhoneNumber).HasMaxLength(50);

                entity.Property(e => e.TicketCreatedBy).HasMaxLength(50);

                entity.Property(e => e.TicketCreatedDate).HasColumnType("datetime");

                entity.Property(e => e.TicketLastedUpdated).HasColumnType("datetime");

                entity.Property(e => e.TicketRasiedDept)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketTargetDate).HasColumnType("datetime");

                entity.Property(e => e.TicketTitle).HasMaxLength(255);

                entity.Property(e => e.TicketType).HasMaxLength(50);

                entity.Property(e => e.TicketURL).HasMaxLength(50);
            });

            modelBuilder.Entity<TicketSubscription>(entity =>
            {
                entity.HasKey(e => e.SubID);

                entity.ToTable("TicketSubscription");
            });

            modelBuilder.Entity<TrackingDetail>(entity =>
            {
                entity.HasKey(e => new { e.WONumber, e.OperationId });

                entity.ToTable("TrackingDetail");

                entity.Property(e => e.FinishTime).HasColumnType("datetime");

                entity.Property(e => e.FinishedBy).HasMaxLength(255);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StartedBy).HasMaxLength(255);

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.TrackingDetails)
                    .HasForeignKey(d => d.OperationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrackingDetail_TrackingOperation");

                entity.HasOne(d => d.WONumberNavigation)
                    .WithMany(p => p.TrackingDetails)
                    .HasForeignKey(d => d.WONumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrackingDetail_TrackingHeader");
            });

            modelBuilder.Entity<TrackingHeader>(entity =>
            {
                entity.HasKey(e => e.WONumber);

                entity.ToTable("TrackingHeader");

                entity.Property(e => e.WONumber).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 5)");

                entity.HasOne(d => d.CurrentOperation)
                    .WithMany(p => p.TrackingHeaders)
                    .HasForeignKey(d => d.CurrentOperationId)
                    .HasConstraintName("FK_TrackingHeader_TrackingOperation");
            });

            modelBuilder.Entity<TrackingOperation>(entity =>
            {
                entity.ToTable("TrackingOperation");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<_12Months_Part>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("12Months_Part");

                entity.Property(e => e.ProductGroup).HasMaxLength(50);
            });

            modelBuilder.Entity<vw_AWKStockRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AWKStockRecords");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Fault).HasMaxLength(255);

                entity.Property(e => e.FreeSabreStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.FreeStock).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.ProductGroup).HasMaxLength(50);

                entity.Property(e => e.QuantityOnPOPOrder).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ReorderLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.RepairCost).HasColumnType("money");

                entity.Property(e => e.RepairDetail).HasMaxLength(255);

                entity.Property(e => e.StockCode).HasMaxLength(50);

                entity.Property(e => e.WorkRequired).HasMaxLength(255);
            });

            modelBuilder.Entity<vw_KPI_GoodsIn>(entity =>
                {
                    entity.HasNoKey();

                    entity.ToView("vw_KPI_GoodsIn");

                    entity.Property(e => e.ContractName).HasMaxLength(50);

                    entity.Property(e => e.StockCode).HasMaxLength(50);
                });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}